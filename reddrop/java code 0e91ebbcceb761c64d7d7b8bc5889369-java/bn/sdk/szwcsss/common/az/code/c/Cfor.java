package bn.sdk.szwcsss.common.az.code.c;

import android.util.Log;
import bn.sdk.szwcsss.common.az.c.constant.Cdo;
import java.net.URLDecoder;
import java.net.URLEncoder;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
/* renamed from: bn.sdk.szwcsss.common.az.code.c.for  reason: invalid class name */
/* loaded from: classes.dex */
public class Cfor {

    /* renamed from: a  reason: collision with root package name */
    private static final byte[] f570a = {6, 6, 3, 3, 8, 7, 2, 3};
    private static final String b = "86324958";

    public static String a(String str) {
        try {
            String c = c(str);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(f570a);
            SecretKeySpec secretKeySpec = new SecretKeySpec(b.getBytes(), "DES");
            Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
            cipher.init(1, secretKeySpec, ivParameterSpec);
            return URLEncoder.encode(Cif.a(cipher.doFinal(c.getBytes())), "utf-8");
        } catch (Exception e) {
            Log.e(Cdo.f525a, "", e);
            return null;
        }
    }

    public static String b(String str) {
        try {
            String decode = URLDecoder.decode(str, "utf-8");
            new Cif();
            byte[] a2 = Cif.a(decode);
            IvParameterSpec ivParameterSpec = new IvParameterSpec(f570a);
            SecretKeySpec secretKeySpec = new SecretKeySpec(b.getBytes(), "DES");
            Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
            cipher.init(2, secretKeySpec, ivParameterSpec);
            return d(new String(cipher.doFinal(a2)));
        } catch (Exception e) {
            Log.e(Cdo.f525a, "", e);
            return null;
        }
    }

    public static String c(String str) {
        String str2 = "";
        if ("".equalsIgnoreCase(str) || str == null) {
            return "";
        }
        byte[] bArr = null;
        try {
            bArr = str.getBytes("utf-8");
        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int i = 0; i < bArr.length; i++) {
            str2 = i + 1 == bArr.length ? str2 + ((int) bArr[i]) : str2 + ((int) bArr[i]) + ",";
        }
        return str2;
    }

    public static String d(String str) {
        String[] split = str.replace("\r\n", "").split(",");
        byte[] bArr = new byte[split.length];
        for (int i = 0; i < split.length; i++) {
            bArr[i] = Byte.valueOf(split[i]).byteValue();
        }
        return new String(bArr, "utf-8");
    }
}
