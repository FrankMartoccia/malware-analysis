package bn.sdk.szwcsss.codec.ah;

import android.content.Context;
import bn.sdk.szwcsss.codec.an.Ctry;
import java.lang.reflect.Method;
/* renamed from: bn.sdk.szwcsss.codec.ah.int  reason: invalid class name */
/* loaded from: classes.dex */
public class Cint {
    /* renamed from: do  reason: not valid java name */
    public static Object m227do(Context context, String str) {
        Class<?> cls = Class.forName(str);
        if (cls == null) {
            return null;
        }
        try {
            return cls.getConstructor(new Class[0]).newInstance(new Object[0]);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public static Object m228do(Class cls, Object obj, String str, Object[] objArr) {
        try {
            Ctry.m348do("1", str);
            Method method = cls.getMethod(str, m230do(cls, str));
            method.setAccessible(true);
            return objArr == null ? method.invoke(obj, new Object[0]) : method.invoke(obj, objArr);
        } catch (Exception e) {
            Ctry.m348do("LoadMethodEX", "LoadMethod:" + str + ":" + e);
            return null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public static Object m229do(String str, String str2, Class[] clsArr, Object[] objArr) {
        return Class.forName(str).getMethod(str2, clsArr).invoke(null, objArr);
    }

    /* renamed from: do  reason: not valid java name */
    public static Class[] m230do(Class cls, String str) {
        Method[] declaredMethods = cls.getDeclaredMethods();
        Class<?>[] clsArr = null;
        for (int i = 0; i < declaredMethods.length; i++) {
            if (declaredMethods[i].getName().equals(str)) {
                clsArr = declaredMethods[i].getParameterTypes();
            }
        }
        return clsArr;
    }
}
