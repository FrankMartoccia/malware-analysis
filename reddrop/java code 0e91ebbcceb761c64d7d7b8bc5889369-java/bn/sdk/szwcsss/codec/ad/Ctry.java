package bn.sdk.szwcsss.codec.ad;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import bn.sdk.szwcsss.codec.ac.Cnew;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import javax.net.ssl.TrustManager;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
/* renamed from: bn.sdk.szwcsss.codec.ad.try  reason: invalid class name */
/* loaded from: classes.dex */
public class Ctry {

    /* renamed from: do  reason: not valid java name */
    private static String f189do = "ua";

    /* renamed from: if  reason: not valid java name */
    private static TrustManager[] f190if = {new Cbyte()};

    /* renamed from: do  reason: not valid java name */
    private static int m174do(Context context) {
        NetworkInfo activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
        if (activeNetworkInfo != null && activeNetworkInfo.isAvailable() && activeNetworkInfo.getType() == 0) {
            String extraInfo = activeNetworkInfo.getExtraInfo();
            if (extraInfo == null) {
                return 0;
            }
            if ("cmwap".equalsIgnoreCase(extraInfo) || "3gwap".equalsIgnoreCase(extraInfo) || "uniwap".equalsIgnoreCase(extraInfo)) {
                return 1;
            }
            if ("ctwap".equalsIgnoreCase(extraInfo)) {
                return 2;
            }
        }
        return 0;
    }

    /* renamed from: do  reason: not valid java name */
    public static HttpResponse m175do(Context context, String str, int i, int i2) {
        try {
            String replaceAll = str.replaceAll(" ", "%20");
            HttpClient httpClient = m178do(replaceAll);
            m179do(context, httpClient);
            HttpParams params = httpClient.getParams();
            HttpConnectionParams.setConnectionTimeout(params, i);
            HttpConnectionParams.setSoTimeout(params, i2);
            HttpClientParams.setRedirecting(params, true);
            HttpGet httpGet = new HttpGet(replaceAll);
            httpGet.setHeader(Cint.b, "application/x-www-form-urlencoded");
            httpGet.setHeader("Charset", "UTF-8");
            httpGet.setHeader(Cint.g, f189do);
            return httpClient.execute(httpGet);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public static HttpResponse m176do(Context context, String str, ArrayList arrayList, int i, int i2) {
        boolean z = true;
        if (arrayList == null) {
            z = false;
        }
        try {
            String replaceAll = str.replaceAll(" ", "%20");
            HttpClient httpClient = m178do(replaceAll);
            m179do(context, httpClient);
            HttpParams params = httpClient.getParams();
            HttpConnectionParams.setConnectionTimeout(params, i);
            HttpConnectionParams.setSoTimeout(params, i2);
            HttpClientParams.setRedirecting(params, true);
            HttpPost httpPost = new HttpPost(replaceAll);
            httpPost.setHeader(Cint.b, "application/x-www-form-urlencoded");
            httpPost.setHeader("Charset", "UTF-8");
            httpPost.setHeader(Cint.g, f189do);
            if (z) {
                httpPost.setEntity(new UrlEncodedFormEntity(arrayList, "UTF-8"));
            }
            return httpClient.execute(httpPost);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public static HttpResponse m177do(Context context, String str, byte[] bArr, int i, int i2) {
        boolean z = true;
        if (bArr == null) {
            z = false;
        }
        try {
            String replaceAll = str.replaceAll(" ", "%20");
            HttpClient httpClient = m178do(replaceAll);
            m179do(context, httpClient);
            HttpParams params = httpClient.getParams();
            HttpConnectionParams.setConnectionTimeout(params, i);
            HttpConnectionParams.setSoTimeout(params, i2);
            HttpClientParams.setRedirecting(params, true);
            HttpPost httpPost = new HttpPost(replaceAll);
            httpPost.setHeader(Cint.b, "application/json");
            httpPost.setHeader("Charset", "UTF-8");
            httpPost.setHeader(Cint.g, f189do);
            if (z) {
                httpPost.setEntity(new ByteArrayEntity(bArr));
            }
            return httpClient.execute(httpPost);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    private static HttpClient m178do(String str) {
        DefaultHttpClient defaultHttpClient;
        try {
            if (str.startsWith("https://")) {
                SSLSocketFactory socketFactory = SSLSocketFactory.getSocketFactory();
                socketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
                ClientConnectionManager connectionManager = new DefaultHttpClient().getConnectionManager();
                connectionManager.getSchemeRegistry().register(new Scheme("https", socketFactory, 443));
                BasicHttpParams basicHttpParams = new BasicHttpParams();
                basicHttpParams.setParameter("http.connection.timeout", 1000);
                basicHttpParams.setParameter("http.socket.timeout", 5000);
                defaultHttpClient = new DefaultHttpClient(connectionManager, basicHttpParams);
            } else {
                defaultHttpClient = new DefaultHttpClient();
            }
            return defaultHttpClient;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    private static void m179do(Context context, HttpClient httpClient) {
        int i = m174do(context);
        if (1 == i) {
            Cnew.m144for("setProxyIfWap cmwap");
            httpClient.getParams().setParameter("http.route.default-proxy", new HttpHost("10.0.0.172", 80));
        } else if (2 == i) {
            Cnew.m144for("setProxyIfWap ctwap");
            httpClient.getParams().setParameter("http.route.default-proxy", new HttpHost("10.0.0.200", 80));
        }
    }

    /* renamed from: do  reason: not valid java name */
    public static boolean m180do(String str, String str2) {
        FileOutputStream fileOutputStream = null;
        InputStream defaultHttpClient = new DefaultHttpClient();
        OutputStream outputStream = null;
        try {
            try {
                HttpEntity entity = defaultHttpClient.execute(new HttpGet(str)).getEntity();
                defaultHttpClient = entity.getContent();
                try {
                    if (entity.getContentLength() <= 0) {
                        Cnew.m142do("file no exist: %s", str2);
                        if (defaultHttpClient != null) {
                            try {
                                defaultHttpClient.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                        if (0 != 0) {
                            try {
                                outputStream.close();
                            } catch (IOException e2) {
                                e2.printStackTrace();
                            }
                        }
                        Cnew.m140do("downLoadFileLocalNoExist finish");
                        return false;
                    }
                    File file = new File(str2);
                    File parentFile = file.getParentFile();
                    if (!parentFile.exists()) {
                        parentFile.mkdirs();
                    }
                    if (file.exists()) {
                        if (defaultHttpClient != null) {
                            try {
                                defaultHttpClient.close();
                            } catch (IOException e3) {
                                e3.printStackTrace();
                            }
                        }
                        if (0 != 0) {
                            try {
                                outputStream.close();
                            } catch (IOException e4) {
                                e4.printStackTrace();
                            }
                        }
                        Cnew.m140do("downLoadFileLocalNoExist finish");
                        return false;
                    }
                    file.createNewFile();
                    FileOutputStream fileOutputStream2 = new FileOutputStream(file);
                    try {
                        byte[] bArr = new byte[4096];
                        while (true) {
                            int read = defaultHttpClient.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            byte[] bArr2 = new byte[read];
                            System.arraycopy(bArr, 0, bArr2, 0, read);
                            fileOutputStream2.write(bArr2);
                        }
                        fileOutputStream2.flush();
                        Cnew.m140do("downLoadFileLocalNoExist write finish");
                        if (defaultHttpClient != null) {
                            try {
                                defaultHttpClient.close();
                            } catch (IOException e5) {
                                e5.printStackTrace();
                            }
                        }
                        if (fileOutputStream2 != null) {
                            try {
                                fileOutputStream2.close();
                            } catch (IOException e6) {
                                e6.printStackTrace();
                            }
                        }
                        Cnew.m140do("downLoadFileLocalNoExist finish");
                        return true;
                    } catch (Exception e7) {
                        e = e7;
                        fileOutputStream = fileOutputStream2;
                        File file2 = new File(str2);
                        if (file2.exists()) {
                            file2.delete();
                        }
                        e.printStackTrace();
                        Cnew.m148if("downLoadFileLocalNoExist Exception: %s", e.getMessage());
                        if (defaultHttpClient != null) {
                            try {
                                defaultHttpClient.close();
                            } catch (IOException e8) {
                                e8.printStackTrace();
                            }
                        }
                        if (fileOutputStream != null) {
                            try {
                                fileOutputStream.close();
                            } catch (IOException e9) {
                                e9.printStackTrace();
                            }
                        }
                        Cnew.m140do("downLoadFileLocalNoExist finish");
                        return false;
                    } catch (Throwable th) {
                        th = th;
                        fileOutputStream = fileOutputStream2;
                        if (defaultHttpClient != null) {
                            try {
                                defaultHttpClient.close();
                            } catch (IOException e10) {
                                e10.printStackTrace();
                            }
                        }
                        if (fileOutputStream != null) {
                            try {
                                fileOutputStream.close();
                            } catch (IOException e11) {
                                e11.printStackTrace();
                            }
                        }
                        Cnew.m140do("downLoadFileLocalNoExist finish");
                        throw th;
                    }
                } catch (Exception e12) {
                    e = e12;
                }
            } catch (Throwable th2) {
                th = th2;
            }
        } catch (Exception e13) {
            e = e13;
            defaultHttpClient = null;
        } catch (Throwable th3) {
            th = th3;
            defaultHttpClient = null;
        }
    }
}
