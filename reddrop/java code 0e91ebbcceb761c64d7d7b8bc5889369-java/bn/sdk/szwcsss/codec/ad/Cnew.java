package bn.sdk.szwcsss.codec.ad;

import android.content.Context;
import android.os.AsyncTask;
import android.os.SystemClock;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import javax.net.ssl.SSLHandshakeException;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
/* renamed from: bn.sdk.szwcsss.codec.ad.new  reason: invalid class name */
/* loaded from: classes.dex */
public class Cnew extends AsyncTask {

    /* renamed from: goto  reason: not valid java name */
    private static final ScheduledExecutorService f178goto = Executors.newScheduledThreadPool(3);

    /* renamed from: byte  reason: not valid java name */
    private boolean f179byte;

    /* renamed from: case  reason: not valid java name */
    private Context f180case;

    /* renamed from: char  reason: not valid java name */
    private int f181char;

    /* renamed from: do  reason: not valid java name */
    private int f182do;

    /* renamed from: else  reason: not valid java name */
    private int f183else;

    /* renamed from: for  reason: not valid java name */
    private Cfor f184for;

    /* renamed from: if  reason: not valid java name */
    private int f185if = 0;

    /* renamed from: int  reason: not valid java name */
    private ArrayList f186int;

    /* renamed from: new  reason: not valid java name */
    private ArrayList f187new;

    /* renamed from: try  reason: not valid java name */
    private byte[] f188try;

    public Cnew(Context context, int i, ArrayList arrayList) {
        this.f180case = context;
        if (i > 1) {
            this.f182do = i;
        } else {
            this.f182do = 1;
        }
        this.f183else = 15000;
        this.f181char = 15000;
        this.f186int = arrayList;
    }

    /* renamed from: do  reason: not valid java name */
    private static String m166do(InputStream inputStream) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        StringBuilder sb = new StringBuilder();
        while (true) {
            try {
                try {
                    String readLine = bufferedReader.readLine();
                    if (readLine != null) {
                        sb.append(readLine);
                    } else {
                        try {
                            break;
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            } finally {
                try {
                    inputStream.close();
                } catch (IOException e3) {
                    e3.printStackTrace();
                }
            }
        }
        inputStream.close();
        return sb.toString();
    }

    /* renamed from: do  reason: not valid java name */
    private HttpResponse m167do(Context context, String str) {
        m169do();
        return this.f179byte ? this.f188try != null ? Ctry.m177do(context, str, this.f188try, this.f181char, this.f183else) : Ctry.m176do(context, str, this.f187new, this.f181char, this.f183else) : Ctry.m175do(context, str, this.f181char, this.f183else);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* JADX WARN: Can't wrap try/catch for region: R(11:(4:80|9|(1:13)|14)|(6:18|(2:20|(5:24|78|25|(2:28|(1:30)(1:45))|31))(2:41|(6:43|44|78|25|(2:28|(0)(0))|31))|32|(3:36|76|37)|(2:39|85)(1:86)|40)|75|78|25|(0)|31|32|(4:34|36|76|37)|(0)(0)|40) */
    /* JADX WARN: Code restructure failed: missing block: B:46:0x00bf, code lost:
        r3 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:47:0x00c0, code lost:
        r1 = r0;
        r0 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:48:0x00c4, code lost:
        r3.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x00c8, code lost:
        r3 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:50:0x00c9, code lost:
        r1 = r0;
        r0 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:51:0x00cd, code lost:
        r3.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:52:0x00d1, code lost:
        r3 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:53:0x00d2, code lost:
        r1 = r0;
        r0 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:54:0x00d6, code lost:
        r3.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:55:0x00da, code lost:
        r3 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:56:0x00db, code lost:
        r1 = r0;
        r0 = r3;
     */
    /* JADX WARN: Code restructure failed: missing block: B:57:0x00df, code lost:
        r3.printStackTrace();
     */
    /* JADX WARN: Removed duplicated region for block: B:27:0x005f A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:30:0x0069  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0078  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0087  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00b9 A[Catch: SSLHandshakeException -> 0x00bf, UnsupportedEncodingException -> 0x00c8, ClientProtocolException -> 0x00d1, IOException -> 0x00da, TRY_ENTER, TRY_LEAVE, TryCatch #5 {IOException -> 0x00da, ClientProtocolException -> 0x00d1, UnsupportedEncodingException -> 0x00c8, SSLHandshakeException -> 0x00bf, blocks: (B:25:0x005b, B:28:0x0061, B:45:0x00b9), top: B:78:0x005b }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x00ab A[SYNTHETIC] */
    /* renamed from: do  reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public String doInBackground(String... strArr) {
        String str;
        HttpResponse httpResponse;
        String str2;
        InputStream content;
        int size;
        String str3 = strArr[0];
        String str4 = null;
        while (str4 == null && this.f185if < this.f182do) {
            long uptimeMillis = SystemClock.uptimeMillis();
            if (isCancelled()) {
                return null;
            }
            try {
                if (this.f186int != null && (size = this.f186int.size()) > 0) {
                    str3 = (String) this.f186int.get(this.f185if % size);
                }
                httpResponse = m167do(this.f180case, str3);
            } catch (ClientProtocolException e) {
                e = e;
                str = str3;
            } catch (UnsupportedEncodingException e2) {
                e = e2;
                str = str3;
            } catch (SSLHandshakeException e3) {
                e = e3;
                str = str3;
            } catch (IOException e4) {
                e = e4;
                str = str3;
            }
            if (httpResponse != null && !isCancelled()) {
                if (httpResponse.getStatusLine().getStatusCode() == 200) {
                    HttpEntity entity = httpResponse.getEntity();
                    if (!(entity == null || (content = entity.getContent()) == null)) {
                        str2 = m166do(content);
                        if (!(this.f184for == null || str2 == null)) {
                            if (this.f184for.m162if(str2)) {
                                str2 = null;
                            } else {
                                bn.sdk.szwcsss.codec.ac.Cnew.m140do("mListener onCheckDataValid true");
                            }
                        }
                        str4 = str2;
                        str = str3;
                    }
                } else {
                    HttpEntity entity2 = httpResponse.getEntity();
                    if (entity2 != null) {
                        entity2.getContent();
                        str2 = str4;
                        if (this.f184for == null) {
                            if (this.f184for.m162if(str2)) {
                            }
                        }
                        str4 = str2;
                        str = str3;
                    }
                }
                this.f185if++;
                long uptimeMillis2 = SystemClock.uptimeMillis();
                if (str4 == null && uptimeMillis2 - uptimeMillis < 5000) {
                    try {
                        Thread.sleep(500L);
                    } catch (InterruptedException e5) {
                        e5.printStackTrace();
                    }
                }
                if (str4 == null) {
                    bn.sdk.szwcsss.codec.ac.Cnew.m149int("HttpRsp Time " + this.f185if + " = " + (uptimeMillis2 - uptimeMillis));
                }
                str3 = str;
            }
            str2 = str4;
            if (this.f184for == null) {
            }
            str4 = str2;
            str = str3;
            this.f185if++;
            long uptimeMillis22 = SystemClock.uptimeMillis();
            if (str4 == null) {
                Thread.sleep(500L);
            }
            if (str4 == null) {
            }
            str3 = str;
        }
        if (str4 != null && str4.startsWith("s") && str4.endsWith("e")) {
            Cdo.m159do(str3);
        }
        return str4;
    }

    /* renamed from: do  reason: not valid java name */
    public void m169do() {
        if (this.f181char < 5000) {
            this.f181char = 5000;
        }
        if (this.f183else < 5000) {
            this.f183else = 5000;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public void m170do(int i, int i2) {
        this.f181char = i;
        this.f183else = i2;
        m169do();
    }

    /* renamed from: do  reason: not valid java name */
    public void m171do(Cfor forVar, byte[] bArr, String str) {
        this.f184for = forVar;
        this.f179byte = true;
        this.f188try = bArr;
        this.f185if = 0;
        if (this.f186int == null) {
            this.f186int = new ArrayList();
        }
        if (this.f186int.size() == 0) {
            this.f186int.add(str);
        }
        if (this.f184for != null) {
            this.f184for.m160do();
        }
        executeOnExecutor(f178goto, str);
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* renamed from: do  reason: not valid java name */
    public void onPostExecute(String str) {
        super.onPostExecute(str);
        if (this.f184for != null && !isCancelled()) {
            if (str != null) {
                String str2 = "length = " + str.length();
            }
            this.f184for.mo110do(str);
            this.f184for = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    /* renamed from: do  reason: not valid java name */
    public void onProgressUpdate(Integer... numArr) {
        super.onProgressUpdate(numArr);
    }

    @Override // android.os.AsyncTask
    protected void onCancelled() {
        super.onCancelled();
        if (this.f184for != null) {
            this.f184for.m161if();
            this.f184for = null;
        }
        this.f185if = 0;
    }
}
