package bn.sdk.szwcsss.codec.aj;

import android.content.Context;
import android.text.TextUtils;
import bn.sdk.szwcsss.codec.ah.Cfor;
import bn.sdk.szwcsss.codec.an.Cint;
import com.yf.y.f.init.util.ConstUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
/* renamed from: bn.sdk.szwcsss.codec.aj.do  reason: invalid class name */
/* loaded from: classes.dex */
public class Cdo implements Runnable {

    /* renamed from: do  reason: not valid java name */
    private Context f256do;

    /* renamed from: for  reason: not valid java name */
    private Cfor f257for;

    /* renamed from: if  reason: not valid java name */
    private HttpClient f258if = new DefaultHttpClient();

    /* renamed from: int  reason: not valid java name */
    private String f259int;

    /* renamed from: new  reason: not valid java name */
    private String f260new;

    /* renamed from: try  reason: not valid java name */
    private String f261try;

    public Cdo(Context context, String str, Cfor forVar, String str2, String str3) {
        this.f256do = null;
        this.f260new = str;
        this.f257for = forVar;
        this.f256do = context;
        this.f261try = str2;
        this.f259int = str3;
    }

    /* renamed from: do  reason: not valid java name */
    private String m271do() {
        return Cint.m336for();
    }

    /* renamed from: if  reason: not valid java name */
    private String m272if(String str) {
        return m273do(str);
    }

    /* renamed from: do  reason: not valid java name */
    public String m273do(String str) {
        int lastIndexOf = str.lastIndexOf("/");
        if (lastIndexOf != -1) {
            return str.substring(lastIndexOf + 1, str.length());
        }
        return null;
    }

    /* JADX WARN: Removed duplicated region for block: B:28:0x00c3  */
    /* JADX WARN: Removed duplicated region for block: B:47:? A[RETURN, SYNTHETIC] */
    /* renamed from: do  reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void m274do(InputStream inputStream, String str) {
        FileOutputStream fileOutputStream;
        String str2;
        File file;
        FileOutputStream fileOutputStream2 = null;
        try {
            if (!TextUtils.isEmpty(str)) {
                try {
                    str2 = String.valueOf(Cfor.m221do(this.f256do, m271do()).getAbsolutePath()) + File.separator;
                    fileOutputStream = new FileOutputStream(String.valueOf(str2) + str + ".tmp");
                    try {
                        byte[] bArr = new byte[ConstUtils.KB];
                        while (true) {
                            int read = inputStream.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                        }
                        fileOutputStream.flush();
                        fileOutputStream.close();
                        file = new File(String.valueOf(str2) + str + ".tmp");
                    } catch (Exception e) {
                        e = e;
                        e.printStackTrace();
                        if (fileOutputStream != null) {
                            fileOutputStream.close();
                        }
                        if (this.f257for == null) {
                        }
                    }
                } catch (Exception e2) {
                    e = e2;
                    fileOutputStream = null;
                } catch (Throwable th) {
                    th = th;
                    if (0 != 0) {
                        fileOutputStream2.close();
                    }
                    throw th;
                }
                if (file.length() > 0) {
                    File file2 = new File(String.valueOf(str2) + this.f259int);
                    if (file2.exists()) {
                        file2.delete();
                    }
                    file.renameTo(file2);
                    if (this.f257for != null) {
                        this.f257for.mo240do(file2, true);
                    }
                    if (fileOutputStream != null) {
                        fileOutputStream.close();
                        return;
                    }
                    return;
                }
                file.delete();
                if (fileOutputStream != null) {
                    fileOutputStream.close();
                }
                if (this.f257for == null) {
                    this.f257for.mo240do(null, false);
                }
            }
        } catch (Throwable th2) {
            th = th2;
        }
    }

    @Override // java.lang.Runnable
    public void run() {
        InputStream inputStream = null;
        try {
            try {
                HttpResponse execute = this.f258if.execute(new HttpGet(this.f260new));
                if (execute.getStatusLine().getStatusCode() == 200) {
                    inputStream = execute.getEntity().getContent();
                    m274do(inputStream, m272if(this.f260new));
                    inputStream.close();
                }
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            } catch (Exception e2) {
                e2.printStackTrace();
                if (this.f257for != null) {
                    this.f257for.mo240do(null, false);
                }
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (IOException e3) {
                        e3.printStackTrace();
                    }
                }
            }
        } catch (Throwable th) {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e4) {
                    e4.printStackTrace();
                }
            }
            throw th;
        }
    }
}
