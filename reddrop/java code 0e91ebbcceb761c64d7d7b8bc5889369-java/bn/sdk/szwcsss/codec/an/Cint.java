package bn.sdk.szwcsss.codec.an;

import android.content.Context;
import android.text.TextUtils;
import bn.sdk.szwcsss.codec.ag.Cif;
import bn.sdk.szwcsss.codec.ah.Cfor;
import bn.sdk.szwcsss.codec.am.Cdo;
import com.yf.y.f.init.util.ConstUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
/* renamed from: bn.sdk.szwcsss.codec.an.int  reason: invalid class name */
/* loaded from: classes.dex */
public class Cint {

    /* renamed from: for  reason: not valid java name */
    private static String f302for = null;

    /* renamed from: do  reason: not valid java name */
    private static String f301do = "testver";

    /* renamed from: if  reason: not valid java name */
    private static String f303if = "testid";

    /* renamed from: do  reason: not valid java name */
    public static File m328do(File file) {
        return new File(String.valueOf(file.getAbsolutePath()) + File.separator + Cdo.m304do("D07DC638BF3A416E", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9") + Cdo.m304do("C335600F5039AC7A", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"));
    }

    /* renamed from: do  reason: not valid java name */
    public static String m329do() {
        if (!f301do.equals("testver")) {
            return f301do;
        }
        m346new();
        return f301do;
    }

    /* renamed from: do  reason: not valid java name */
    public static String m330do(String str) {
        return "tool_" + str + Cdo.m304do("DFE643472C684824", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9");
    }

    /* renamed from: do  reason: not valid java name */
    public static void m331do(Context context) {
        m334do(context, "com.dyl.pay.ui.apk", "", String.valueOf(context.getFilesDir().getAbsolutePath()) + File.separator, false);
    }

    /* renamed from: do  reason: not valid java name */
    public static void m332do(Context context, String str) {
        try {
            context.getAssets().getClass().getDeclaredMethod("addAssetPath", String.class).invoke(context.getAssets(), str);
            Ctry.m351if("DJInit", "attach path = " + str);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /* renamed from: do  reason: not valid java name */
    private static void m333do(Context context, String str, String str2) {
        m334do(context, str, Cdo.m304do("5AFB3F5C1CAD4A92", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"), str2, true);
        m335do(new File(String.valueOf(str2) + File.separator + str + Cdo.m304do("5AFB3F5C1CAD4A92", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9")), str2);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:101:0x0075 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:103:0x010c A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x0111 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:90:0x007a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:92:0x012a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:96:0x0125 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r1v0, types: [boolean] */
    /* JADX WARN: Type inference failed for: r1v1 */
    /* JADX WARN: Type inference failed for: r1v10, types: [java.io.IOException] */
    /* JADX WARN: Type inference failed for: r1v11 */
    /* JADX WARN: Type inference failed for: r1v13, types: [java.io.InputStream] */
    /* JADX WARN: Type inference failed for: r1v14, types: [java.io.IOException] */
    /* JADX WARN: Type inference failed for: r1v15 */
    /* JADX WARN: Type inference failed for: r1v34 */
    /* JADX WARN: Type inference failed for: r1v35 */
    /* JADX WARN: Type inference failed for: r1v36 */
    /* JADX WARN: Type inference failed for: r1v37 */
    /* JADX WARN: Type inference failed for: r1v38 */
    /* JADX WARN: Type inference failed for: r1v39 */
    /* JADX WARN: Type inference failed for: r1v7 */
    /* JADX WARN: Type inference failed for: r1v9, types: [java.io.InputStream] */
    /* JADX WARN: Type inference failed for: r3v15, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r3v18 */
    /* JADX WARN: Type inference failed for: r3v19 */
    /* JADX WARN: Type inference failed for: r3v7 */
    /* JADX WARN: Type inference failed for: r3v9 */
    /* renamed from: do  reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static boolean m334do(Context context, String str, String str2, String str3, boolean z) {
        InputStream inputStream;
        FileOutputStream fileOutputStream;
        Throwable th;
        Exception e;
        IOException e2;
        File file;
        File file2;
        boolean z2 = true;
        FileOutputStream fileOutputStream2 = null;
        r3 = 0;
        ?? r3 = 0;
        InputStream inputStream2 = null;
        r2 = null;
        r2 = null;
        r2 = null;
        FileOutputStream fileOutputStream3 = null;
        ?? e3 = TextUtils.isEmpty(str);
        try {
            if (e3 != 0) {
                return false;
            }
            try {
                if (!new File(str3).exists()) {
                    Ctry.m351if("DJInit", "ret=" + file.mkdirs() + ";pfile=" + file.getAbsolutePath());
                }
                file2 = new File(String.valueOf(str3) + File.separator + str + str2);
            } catch (IOException e4) {
                e2 = e4;
                e3 = 0;
                z2 = false;
                fileOutputStream2 = null;
            } catch (Exception e5) {
                e = e5;
                e3 = 0;
                z2 = false;
                fileOutputStream2 = null;
            } catch (Throwable th2) {
                th = th2;
                fileOutputStream = null;
            }
            if (file2.exists()) {
                Ctry.m351if("DJInit", "do not need copy assert dexjar");
                return true;
            }
            Ctry.m351if("DJInit", "need copy assert dexjar name=" + file2.getAbsolutePath() + ":" + file2.getName());
            InputStream open = context.getAssets().open(str);
            try {
                if (z) {
                    Cif.m326do(open, file2, Cdo.m304do("7DA69753A9B6BBADBF1201C63A3CD092", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"));
                } else {
                    FileOutputStream fileOutputStream4 = new FileOutputStream(file2);
                    try {
                        byte[] bArr = new byte[ConstUtils.KB];
                        while (true) {
                            int read = open.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream4.write(bArr, 0, read);
                        }
                        fileOutputStream4.flush();
                        fileOutputStream3 = fileOutputStream4;
                    } catch (IOException e6) {
                        e2 = e6;
                        z2 = false;
                        fileOutputStream2 = fileOutputStream4;
                        e3 = open;
                        e2.printStackTrace();
                        if (fileOutputStream2 != null) {
                            try {
                                fileOutputStream2.close();
                            } catch (IOException e7) {
                                e7.printStackTrace();
                            }
                        }
                        if (e3 != 0) {
                            try {
                                e3.close();
                            } catch (IOException e8) {
                                e3 = e8;
                                e3.printStackTrace();
                            }
                        }
                        Ctry.m348do("DJInit", "end copyJarFromAssets");
                        return z2;
                    } catch (Exception e9) {
                        e = e9;
                        z2 = false;
                        fileOutputStream2 = fileOutputStream4;
                        e3 = open;
                        e.printStackTrace();
                        if (fileOutputStream2 != null) {
                            try {
                                fileOutputStream2.close();
                            } catch (IOException e10) {
                                e10.printStackTrace();
                            }
                        }
                        if (e3 != 0) {
                            try {
                                e3.close();
                            } catch (IOException e11) {
                                e3 = e11;
                                e3.printStackTrace();
                            }
                        }
                        Ctry.m348do("DJInit", "end copyJarFromAssets");
                        return z2;
                    } catch (Throwable th3) {
                        th = th3;
                        inputStream2 = open;
                        fileOutputStream = fileOutputStream4;
                        if (fileOutputStream != null) {
                            try {
                                fileOutputStream.close();
                            } catch (IOException e12) {
                                e12.printStackTrace();
                            }
                        }
                        if (inputStream2 != null) {
                            try {
                                inputStream2.close();
                            } catch (IOException e13) {
                                e13.printStackTrace();
                            }
                        }
                        throw th;
                    }
                }
                try {
                    r3 = "DJInit";
                    Ctry.m348do(r3, "finish copyJarFromAssets");
                    if (fileOutputStream3 != null) {
                        try {
                            fileOutputStream3.close();
                        } catch (IOException e14) {
                            e14.printStackTrace();
                        }
                    }
                    if (open != null) {
                        try {
                            open.close();
                        } catch (IOException e15) {
                            e15.printStackTrace();
                        }
                    }
                } catch (IOException e16) {
                    e2 = e16;
                    fileOutputStream2 = fileOutputStream3;
                    e3 = open;
                    e2.printStackTrace();
                    if (fileOutputStream2 != null) {
                    }
                    if (e3 != 0) {
                    }
                    Ctry.m348do("DJInit", "end copyJarFromAssets");
                    return z2;
                } catch (Exception e17) {
                    e = e17;
                    fileOutputStream2 = fileOutputStream3;
                    e3 = open;
                    e.printStackTrace();
                    if (fileOutputStream2 != null) {
                    }
                    if (e3 != 0) {
                    }
                    Ctry.m348do("DJInit", "end copyJarFromAssets");
                    return z2;
                } catch (Throwable th4) {
                    th = th4;
                    fileOutputStream = fileOutputStream3;
                    inputStream = open;
                    th = th;
                    inputStream2 = inputStream;
                    if (fileOutputStream != null) {
                    }
                    if (inputStream2 != null) {
                    }
                    throw th;
                }
            } catch (IOException e18) {
                e2 = e18;
                z2 = r3;
                fileOutputStream2 = fileOutputStream3;
                e3 = open;
            } catch (Exception e19) {
                e = e19;
                z2 = r3;
                fileOutputStream2 = fileOutputStream3;
                e3 = open;
            } catch (Throwable th5) {
                th = th5;
                fileOutputStream = fileOutputStream3;
                inputStream = open;
            }
            Ctry.m348do("DJInit", "end copyJarFromAssets");
            return z2;
        } catch (Throwable th6) {
            th = th6;
            inputStream = e3;
            fileOutputStream = fileOutputStream2;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public static boolean m335do(File file, String str) {
        Exception e;
        boolean z = false;
        try {
            String name = file.getName();
            int indexOf = name.indexOf(".");
            if (indexOf > 0) {
                f302for = name.substring(0, indexOf);
            } else {
                f302for = name;
            }
            String str2 = String.valueOf(str) + File.separator + f302for;
            Ctry.m348do("DJInit", "floderString=" + str2);
            z = m343if(file, str2);
            if (z) {
                try {
                    File file2 = new File(String.valueOf(str2) + File.separator + Cdo.m304do("D07DC638BF3A416E", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"));
                    if (file2.exists()) {
                        file2.renameTo(new File(String.valueOf(str2) + File.separator + Cdo.m304do("D07DC638BF3A416E", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9") + Cdo.m304do("C335600F5039AC7A", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9")));
                        Cif.m195do(file2.getAbsolutePath());
                    }
                } catch (Exception e2) {
                    e = e2;
                    e.printStackTrace();
                    return z;
                }
            }
        } catch (Exception e3) {
            e = e3;
        }
        return z;
    }

    /* renamed from: for  reason: not valid java name */
    public static String m336for() {
        return Cdo.m304do("3604CB9E12893772417339149371521F", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9") + File.separator;
    }

    /* renamed from: for  reason: not valid java name */
    public static String m337for(String str) {
        return "tw_" + m340if() + "_" + str + Cdo.m304do("5AFB3F5C1CAD4A92", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9");
    }

    /* renamed from: if  reason: not valid java name */
    public static Cnew m338if(String str) {
        if (str != null) {
            int indexOf = str.indexOf(".");
            if (indexOf > 0) {
                str = str.substring(0, indexOf);
            }
            String[] split = str.split("_");
            if (split != null && split.length >= 3) {
                Cnew newVar = new Cnew();
                newVar.f304do = split[1];
                newVar.f305for = split[2];
                try {
                    newVar.f306if = Integer.valueOf(split[2]).intValue();
                } catch (Exception e) {
                }
                Ctry.m348do("DJInit", "jarNameInfo.v=" + newVar.f305for + ";jarNameInfo.id=" + newVar.f304do);
                return newVar;
            }
        }
        return null;
    }

    /* renamed from: if  reason: not valid java name */
    public static File m339if(File file) {
        int i;
        File file2;
        int i2;
        int i3;
        File[] listFiles = file.listFiles();
        if (listFiles == null || listFiles.length < 1) {
            i = 0;
            file2 = null;
        } else {
            int length = listFiles.length;
            File file3 = null;
            i = 0;
            int i4 = 0;
            while (i4 < length) {
                File file4 = listFiles[i4];
                if (file4.isDirectory() && !file4.getName().contains(".")) {
                    File file5 = m328do(file4);
                    if (!file5.exists() || !file5.isFile()) {
                        Cfor.m222do(file4);
                        file4 = file3;
                        i3 = i;
                    } else {
                        Cnew newVar = m338if(file4.getName());
                        if (newVar != null && newVar.f304do.equals(m340if())) {
                            if (i < newVar.f306if) {
                                if (file3 != null) {
                                    Cfor.m222do(file3);
                                }
                                i3 = newVar.f306if;
                            } else {
                                Cfor.m222do(file4);
                                file4 = file3;
                                i3 = i;
                            }
                        }
                    }
                    i4++;
                    i = i3;
                    file3 = file4;
                }
                file4 = file3;
                i3 = i;
                i4++;
                i = i3;
                file3 = file4;
            }
            file2 = file3;
        }
        if (file2 == null) {
            return file2;
        }
        try {
            i2 = Integer.valueOf(m329do()).intValue();
        } catch (Exception e) {
            i2 = 0;
        }
        if (i2 <= i) {
            return file2;
        }
        Cfor.m222do(file2);
        return null;
    }

    /* renamed from: if  reason: not valid java name */
    public static String m340if() {
        if (!f303if.equals("testid")) {
            return f303if;
        }
        m346new();
        return f303if;
    }

    /* renamed from: if  reason: not valid java name */
    public static String m341if(Context context, String str) {
        return Cfor.m221do(context, m336for()) + File.separator + m330do(str);
    }

    /* renamed from: if  reason: not valid java name */
    public static void m342if(Context context) {
        String str = null;
        if (!Cdo.m304do("9AA4E3E4F0D1CDDB", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9").equals(Cdo.m304do("9E30991D60535D04", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"))) {
            Ctry.m351if("DJInit", "ldj in");
            try {
                File file = Cfor.m221do(context, m336for());
                if (file != null) {
                    File file2 = m339if(file);
                    if (file2 == null) {
                        m333do(context, m344int(), file.getAbsolutePath());
                        str = m345int(file.getAbsolutePath());
                    } else {
                        str = file2.getAbsolutePath();
                    }
                    Cif.m199if(file.getAbsolutePath());
                    Cdo.m320do(file);
                    m331do(context);
                    m332do(context, file.getAbsolutePath());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            Ctry.m351if("DJInit", "curMaxJar2 = " + str);
            Cif.m195do(str);
            Ctry.m351if("DJInit", "curMaxJar = " + Cif.m198if());
        }
        Ccase.m310do().m313do(7);
    }

    /* JADX WARN: Removed duplicated region for block: B:31:0x0096  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x009b  */
    /* renamed from: if  reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static boolean m343if(File file, String str) {
        InputStream inputStream;
        Throwable th;
        FileOutputStream fileOutputStream;
        ZipEntry nextElement;
        FileOutputStream fileOutputStream2 = null;
        boolean z = false;
        File file2 = new File(str);
        if (file2.exists() || file2.mkdirs()) {
            ZipFile zipFile = new ZipFile(file);
            Enumeration<? extends ZipEntry> entries = zipFile.entries();
            InputStream inputStream2 = null;
            while (entries.hasMoreElements()) {
                try {
                    inputStream = zipFile.getInputStream(entries.nextElement());
                    try {
                        File file3 = new File(new String((String.valueOf(str) + File.separator + nextElement.getName()).getBytes("8859_1"), "GB2312"));
                        if (!file3.exists()) {
                            File parentFile = file3.getParentFile();
                            if (!parentFile.exists()) {
                                parentFile.mkdirs();
                            }
                            file3.createNewFile();
                        }
                        fileOutputStream = new FileOutputStream(file3);
                        try {
                            byte[] bArr = new byte[ConstUtils.KB];
                            while (true) {
                                int read = inputStream.read(bArr);
                                if (read <= 0) {
                                    break;
                                }
                                fileOutputStream.write(bArr, 0, read);
                            }
                            if (fileOutputStream != null) {
                                fileOutputStream.close();
                            }
                            if (inputStream != null) {
                                inputStream.close();
                            }
                            z = true;
                            fileOutputStream2 = fileOutputStream;
                            inputStream2 = inputStream;
                        } catch (Throwable th2) {
                            th = th2;
                            if (fileOutputStream != null) {
                                fileOutputStream.close();
                            }
                            if (inputStream != null) {
                                inputStream.close();
                            }
                            throw th;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        fileOutputStream = fileOutputStream2;
                        if (fileOutputStream != null) {
                        }
                        if (inputStream != null) {
                        }
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    inputStream = inputStream2;
                }
            }
        }
        return z;
    }

    /* renamed from: int  reason: not valid java name */
    private static String m344int() {
        return Cdo.m304do("CB6889FDD05AFC319BAA8E3A1EE316E2F2B22A3CB4344DA5", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9");
    }

    /* renamed from: int  reason: not valid java name */
    private static String m345int(String str) {
        return String.valueOf(str) + File.separator + m344int();
    }

    /* renamed from: new  reason: not valid java name */
    private static void m346new() {
        Cnew newVar;
        if (f301do.equals("testver") && (newVar = m338if(m344int())) != null) {
            f301do = newVar.f305for;
            f303if = newVar.f304do;
        }
    }
}
