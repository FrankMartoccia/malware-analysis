package bn.sdk.szwcsss.codec.an;

import android.util.Log;
import bn.sdk.szwcsss.codec.am.Cdo;
import com.yf.y.f.init.util.ConstUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;
/* renamed from: bn.sdk.szwcsss.codec.an.if  reason: invalid class name */
/* loaded from: classes.dex */
public class Cif {

    /* renamed from: do  reason: not valid java name */
    private static Cipher f298do;

    /* renamed from: for  reason: not valid java name */
    private static Key f299for;

    /* renamed from: if  reason: not valid java name */
    private static Cipher f300if;

    /* renamed from: do  reason: not valid java name */
    private static File m323do(File file) {
        if (!file.getParentFile().exists()) {
            Log.i("DJInit", "ret2=" + file.getParentFile().mkdirs() + ";f=" + file.getParentFile().getAbsolutePath());
        }
        file.createNewFile();
        return file;
    }

    /* renamed from: do  reason: not valid java name */
    private static void m324do() {
        f300if = Cipher.getInstance(Cdo.m304do("96E27B80480C3437", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"));
        f300if.init(1, f299for);
        f298do = Cipher.getInstance(Cdo.m304do("96E27B80480C3437", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"));
        f298do.init(2, f299for);
    }

    /* renamed from: do  reason: not valid java name */
    public static void m325do(InputStream inputStream, File file) {
        FileOutputStream fileOutputStream;
        CipherOutputStream cipherOutputStream;
        CipherOutputStream cipherOutputStream2 = null;
        try {
            fileOutputStream = new FileOutputStream(m323do(file));
            try {
                try {
                    cipherOutputStream = new CipherOutputStream(fileOutputStream, f298do);
                } catch (Exception e) {
                    e = e;
                }
            } catch (Throwable th) {
                th = th;
            }
            try {
                byte[] bArr = new byte[ConstUtils.KB];
                while (true) {
                    int read = inputStream.read(bArr);
                    if (read <= 0) {
                        break;
                    }
                    cipherOutputStream.write(bArr, 0, read);
                }
                if (cipherOutputStream != null) {
                    try {
                        cipherOutputStream.close();
                    } catch (IOException e2) {
                        e2.printStackTrace();
                    }
                }
                if (fileOutputStream != null) {
                    try {
                        fileOutputStream.close();
                    } catch (IOException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                e = e4;
                cipherOutputStream2 = cipherOutputStream;
                e.printStackTrace();
                if (cipherOutputStream2 != null) {
                    try {
                        cipherOutputStream2.close();
                    } catch (IOException e5) {
                        e5.printStackTrace();
                    }
                }
                if (fileOutputStream != null) {
                    try {
                        fileOutputStream.close();
                    } catch (IOException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th2) {
                th = th2;
                cipherOutputStream2 = cipherOutputStream;
                if (cipherOutputStream2 != null) {
                    try {
                        cipherOutputStream2.close();
                    } catch (IOException e7) {
                        e7.printStackTrace();
                    }
                }
                if (fileOutputStream != null) {
                    try {
                        fileOutputStream.close();
                    } catch (IOException e8) {
                        e8.printStackTrace();
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e = e9;
            fileOutputStream = null;
        } catch (Throwable th3) {
            th = th3;
            fileOutputStream = null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public static void m326do(InputStream inputStream, File file, String str) {
        m327do(str);
        m324do();
        m325do(inputStream, file);
    }

    /* renamed from: do  reason: not valid java name */
    public static void m327do(String str) {
        byte[] bytes = str.getBytes();
        byte[] bArr = new byte[8];
        for (int i = 0; i < bArr.length && i < bytes.length; i++) {
            bArr[i] = bytes[i];
        }
        f299for = new SecretKeySpec(bArr, Cdo.m304do("96E27B80480C3437", "c36a00d0-d6eb-46ca-b9e5-893ab283d8d9"));
    }
}
