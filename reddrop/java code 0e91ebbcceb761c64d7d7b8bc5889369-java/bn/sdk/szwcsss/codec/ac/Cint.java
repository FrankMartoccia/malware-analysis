package bn.sdk.szwcsss.codec.ac;

import org.json.JSONException;
import org.json.JSONObject;
/* renamed from: bn.sdk.szwcsss.codec.ac.int  reason: invalid class name */
/* loaded from: classes.dex */
public class Cint {
    /* renamed from: do  reason: not valid java name */
    public static Cfor m134do(Class cls, String str) {
        if (str == null) {
            return null;
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            Cfor forVar = (Cfor) cls.newInstance();
            if (!jSONObject.isNull(forVar.mo2if())) {
                forVar.mo1do(jSONObject.getJSONObject(forVar.mo2if()));
                return forVar;
            }
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InstantiationException e2) {
            e2.printStackTrace();
        } catch (JSONException e3) {
            e3.printStackTrace();
        }
        return null;
    }

    /* renamed from: do  reason: not valid java name */
    public static String m135do(JSONObject jSONObject, String str, String str2) {
        if (jSONObject == null) {
            return str2;
        }
        try {
            return jSONObject.has(str) ? jSONObject.getString(str) : str2;
        } catch (JSONException e) {
            e.printStackTrace();
            return str2;
        }
    }

    /* renamed from: if  reason: not valid java name */
    public static Cfor m136if(Class cls, String str) {
        if (str == null) {
            return null;
        }
        try {
            JSONObject jSONObject = new JSONObject(str);
            Cfor forVar = (Cfor) cls.newInstance();
            forVar.mo1do(jSONObject);
            return forVar;
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            return null;
        } catch (InstantiationException e2) {
            e2.printStackTrace();
            return null;
        } catch (JSONException e3) {
            e3.printStackTrace();
            return null;
        }
    }
}
