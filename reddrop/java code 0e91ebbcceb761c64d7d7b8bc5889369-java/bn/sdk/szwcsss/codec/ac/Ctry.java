package bn.sdk.szwcsss.codec.ac;

import android.content.Context;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
/* renamed from: bn.sdk.szwcsss.codec.ac.try  reason: invalid class name */
/* loaded from: classes.dex */
public class Ctry {
    /* renamed from: do  reason: not valid java name */
    private int m151do(char c) {
        if (c == "0".charAt(0)) {
        }
        int i = c == "1".charAt(0) ? 1 : 0;
        if (c == "2".charAt(0)) {
            i = 2;
        }
        if (c == "3".charAt(0)) {
            i = 3;
        }
        if (c == "4".charAt(0)) {
            i = 4;
        }
        if (c == "5".charAt(0)) {
            i = 5;
        }
        if (c == "6".charAt(0)) {
            i = 6;
        }
        if (c == "7".charAt(0)) {
            i = 7;
        }
        if (c == "8".charAt(0)) {
            i = 8;
        }
        if (c == "9".charAt(0)) {
            i = 9;
        }
        if (c == "A".charAt(0)) {
            i = 10;
        }
        if (c == "B".charAt(0)) {
            i = 11;
        }
        if (c == "C".charAt(0)) {
            i = 12;
        }
        if (c == "D".charAt(0)) {
            i = 13;
        }
        if (c == "E".charAt(0)) {
            i = 14;
        }
        if (c == "F".charAt(0)) {
            return 15;
        }
        return i;
    }

    /* renamed from: do  reason: not valid java name */
    private byte[] m152do(String str) {
        byte[] bArr = new byte[str.length() / 2];
        for (int i = 0; i < str.length() / 2; i++) {
            bArr[i] = new Integer((m151do(str.charAt(i * 2)) * 16) + m151do(str.charAt((i * 2) + 1))).byteValue();
        }
        return bArr;
    }

    /* renamed from: do  reason: not valid java name */
    private byte[] m153do(byte[] bArr, byte[] bArr2) {
        SecretKey generateSecret = SecretKeyFactory.getInstance("DES").generateSecret(new DESKeySpec(bArr2));
        Cipher cipher = Cipher.getInstance("DES");
        cipher.init(2, generateSecret);
        return cipher.doFinal(bArr);
    }

    /* JADX WARN: Removed duplicated region for block: B:35:0x00a5 A[Catch: Exception -> 0x0074, TryCatch #7 {Exception -> 0x0074, blocks: (B:3:0x0003, B:5:0x000b, B:7:0x0013, B:9:0x001b, B:14:0x0068, B:17:0x006e, B:24:0x0085, B:27:0x008b, B:31:0x0097, B:34:0x009e, B:35:0x00a5, B:36:0x00a6), top: B:53:0x0003, inners: #0, #5, #6 }] */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0097 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* renamed from: do  reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public byte[] m154do(String str, Context context) {
        InputStream inputStream;
        byte[] bArr;
        InputStream inputStream2;
        try {
            if ("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".length() != 48) {
                Cnew.m147if("decrypt pay file fail [key length error]");
                return null;
            } else if (!str.endsWith(".xml")) {
                Cnew.m141do("TOOL", "decrypt file not xml");
                return null;
            } else {
                byte[] bArr2 = m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(0, 16));
                byte[] bArr3 = m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(16, 32));
                byte[] bArr4 = m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(32, 48));
                try {
                    inputStream2 = context.getAssets().open(str);
                } catch (IOException e) {
                    bArr = null;
                    inputStream2 = null;
                } catch (Throwable th) {
                    th = th;
                    inputStream = null;
                    bArr = null;
                }
                try {
                    byte[] bArr5 = new byte[inputStream2.available()];
                    inputStream2.read(bArr5);
                    bArr = m153do(m153do(m153do(bArr5, bArr4), bArr3), bArr2);
                    try {
                        try {
                            Cnew.m140do("decrypt pay file succ");
                            if (inputStream2 == null) {
                                return null;
                            }
                            try {
                                inputStream2.close();
                                return bArr;
                            } catch (IOException e2) {
                                Cnew.m147if("decrypt close file exception ");
                                return null;
                            }
                        } catch (IOException e3) {
                            Cnew.m147if("decrypt open file fail");
                            if (inputStream2 == null) {
                                return null;
                            }
                            try {
                                inputStream2.close();
                                return bArr;
                            } catch (IOException e4) {
                                Cnew.m147if("decrypt close file exception ");
                                return null;
                            }
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        inputStream = inputStream2;
                        if (inputStream == null) {
                            try {
                                inputStream.close();
                                return bArr;
                            } catch (IOException e5) {
                                Cnew.m147if("decrypt close file exception ");
                                return null;
                            }
                        } else {
                            throw th;
                        }
                    }
                } catch (IOException e6) {
                    bArr = null;
                } catch (Throwable th3) {
                    th = th3;
                    inputStream = inputStream2;
                    bArr = null;
                    if (inputStream == null) {
                    }
                }
            }
        } catch (Exception e7) {
            Cnew.m147if("decrypt pay file fail [key error]");
            return null;
        }
    }

    /* renamed from: do  reason: not valid java name */
    public byte[] m155do(byte[] bArr, int i) {
        byte[] bArr2;
        Exception e;
        try {
            if ("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".length() == 48) {
                try {
                    bArr2 = m153do(m153do(m153do(bArr, m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(32, 48))), m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(16, 32))), m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(0, 16)));
                } catch (Exception e2) {
                    e = e2;
                    bArr2 = null;
                }
                try {
                    Cnew.m144for("decryptFromBytes pay file succ");
                } catch (Exception e3) {
                    e = e3;
                    e.printStackTrace();
                    Cnew.m147if("decryptFromBytes ioexception");
                    return bArr2;
                }
            } else {
                Cnew.m147if("decryptFromBytes pay file fail [key length error]");
                bArr2 = null;
            }
            return bArr2;
        } catch (Exception e4) {
            Cnew.m147if("decryptFromFs pay file fail [key error]");
            return null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:35:0x009e A[Catch: Exception -> 0x006e, TryCatch #1 {Exception -> 0x006e, blocks: (B:3:0x0003, B:5:0x000b, B:7:0x0013, B:9:0x0019, B:14:0x0062, B:17:0x0068, B:24:0x007f, B:27:0x0085, B:31:0x0091, B:34:0x0097, B:35:0x009e, B:36:0x009f), top: B:46:0x0003, inners: #0, #3, #6 }] */
    /* JADX WARN: Removed duplicated region for block: B:47:0x0091 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* renamed from: if  reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public byte[] m156if(String str, Context context) {
        FileInputStream fileInputStream;
        byte[] bArr;
        FileInputStream fileInputStream2;
        try {
            if ("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".length() != 48) {
                Cnew.m147if("decryptFromFs pay file fail [key length error]");
                return null;
            } else if (!str.endsWith(".xml")) {
                Cnew.m140do("decryptFromFs file not xml");
                return null;
            } else {
                byte[] bArr2 = m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(0, 16));
                byte[] bArr3 = m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(16, 32));
                byte[] bArr4 = m152do("D87SF8739DAB098787C09867654379965355FEEEAAADCSCC".substring(32, 48));
                try {
                    fileInputStream2 = context.openFileInput(str);
                } catch (IOException e) {
                    bArr = null;
                    fileInputStream2 = null;
                } catch (Throwable th) {
                    th = th;
                    fileInputStream = null;
                    bArr = null;
                }
                try {
                    byte[] bArr5 = new byte[fileInputStream2.available()];
                    fileInputStream2.read(bArr5);
                    bArr = m153do(m153do(m153do(bArr5, bArr4), bArr3), bArr2);
                    try {
                        try {
                            Cnew.m147if("decryptFromFs pay file succ");
                            if (fileInputStream2 == null) {
                                return null;
                            }
                            try {
                                fileInputStream2.close();
                                return bArr;
                            } catch (IOException e2) {
                                Cnew.m147if("decryptFromFs close file exception ");
                                return null;
                            }
                        } catch (IOException e3) {
                            Cnew.m147if("decryptFromFs open file fail");
                            if (fileInputStream2 == null) {
                                return null;
                            }
                            try {
                                fileInputStream2.close();
                                return bArr;
                            } catch (IOException e4) {
                                Cnew.m147if("decryptFromFs close file exception ");
                                return null;
                            }
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        fileInputStream = fileInputStream2;
                        if (fileInputStream == null) {
                            try {
                                fileInputStream.close();
                                return bArr;
                            } catch (IOException e5) {
                                Cnew.m147if("decryptFromFs close file exception ");
                                return null;
                            }
                        } else {
                            throw th;
                        }
                    }
                } catch (IOException e6) {
                    bArr = null;
                } catch (Throwable th3) {
                    th = th3;
                    fileInputStream = fileInputStream2;
                    bArr = null;
                    if (fileInputStream == null) {
                    }
                }
            }
        } catch (Exception e7) {
            Cnew.m147if("decryptFromFs pay file fail [key error]");
            return null;
        }
    }
}
