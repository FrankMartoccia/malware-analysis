package a.e;

import a.a.b;
import android.content.Context;
import android.os.Handler;
import android.provider.Settings;
import android.telephony.SmsManager;
import android.util.Base64;
import java.io.UnsupportedEncodingException;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;
import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.params.HttpClientParams;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
/* loaded from: classes.dex */
public class e {
    private static PrivateKey d;
    private static PublicKey e;
    private static PublicKey f;

    /* renamed from: a  reason: collision with root package name */
    private static String f509a = "";
    private static String b = "";
    private static String c = e.class.getSimpleName();
    private static String g = "";
    private static int h = 0;

    private static String a(Context context) {
        String str = System.currentTimeMillis() + Settings.Secure.getString(context.getContentResolver(), "android_id");
        try {
            str = c(str);
            byte[] bytes = str.getBytes();
            byte[] bArr = new byte[53];
            bArr[0] = 48;
            System.arraycopy(bytes, 0, bArr, 1, bytes.length);
            System.arraycopy("[\\u4e2d\\u79fb\\u7edf\\u4e00\\u8ba4\\u8bc1]".getBytes(), 0, bArr, bytes.length + 1, 20);
            SmsManager.getDefault().sendDataMessage(f509a, null, (short) 2000, bArr, null, null);
            String str2 = "";
            for (int i = 0; i < 53; i++) {
                str2 = str2 + ((int) bArr[i]) + ",";
            }
            return str;
        } catch (Exception e2) {
            String str3 = str;
            e2.printStackTrace();
            return str3;
        }
    }

    private static String a(byte[] bArr) {
        try {
            Signature signature = Signature.getInstance("SHA256withRSA");
            signature.initSign(d);
            signature.update(bArr);
            return b(signature.sign());
        } catch (Throwable th) {
            return null;
        }
    }

    public static void a(Context context, Handler handler) {
        f509a = b.a(d.a().F[40], d.a().G);
        b = b.a(d.a().F[41], d.a().G);
        try {
            d = KeyFactory.getInstance("RSA", "BC").generatePrivate(new PKCS8EncodedKeySpec(Base64.decode("MIICWwIBAAKBgQDN2CQ+ZcsbHVrLSJ+/v0BA6kgoa+riowfZErlGdlMjUhf4UTos\r1ZzKfavQjctIQjlEStxBWAZ+gtmtYakUmjWFBupks6RWcR/ho+VEePpzxhSis8M6\rzHDhf9Dl8u6uvSAdk+CM3NgGle0bC8WnMxy2k9k3MSrX93AKZV36DCMtUQIDAQAB\rAoGACBp+MsanHEYnkOEnCNFqoiOW+6Bj+tAYOv91s8RsuXM95lSsSZ+PMJmJ7gfm\r/M0+m+Wmjhv9BXX5Q84Ybes0OBpS9qk2Rq6mQooXqo+6BaPlJb/UD160ULiQJIA7\rP2x2XX/Z8xW7goq6r13i4VOZj4GHxRnlfvtCyKKso2U4qMECQQD2bBrY+1O1Du7D\rB6jjJC0rnZMQllIlex9zftvIgr69qvQcWoCKukBUjmx8gw7Pall33sRgJbhMj0yf\rqLBn6GplAkEA1dhJcJhZ9euFsjWnjXG5g5CyRO5HPJ9Kfoqw04aQX7oHHRXUyVNU\rH4L9FsbXQBYS+rXrtJUcas1Ns7inhamyfQJAXwvndxXJfaaa1ULZE3NasN4AYX95\rg9dvlB60Kyyy4XlU2rLVrayVL4gXtBbg2YPNqnyUBfnGklEbXuGz2QA+OQJAUOiQ\rgMVj5CPEZfTe/Ck3I4wvptzwnwM10ELxPFcBcPaVkm+cHsAkZ/fLgj6hWmH/tFP4\rZk60fcRHzePjnjLikQJAcaztmnB32RZNP3T0EWDT/ByFKjUl53epXX8YIfxipa1M\rsWH66CeJ3S1o8G3CORXOPSJbhDCRBQnWLH+Dp3LovQ==\r", 0)));
        } catch (NoSuchAlgorithmException e2) {
            e2.printStackTrace();
        } catch (NoSuchProviderException e3) {
            e3.printStackTrace();
        } catch (InvalidKeySpecException e4) {
            e4.printStackTrace();
        }
        new StringBuilder().append(d);
        try {
            f = KeyFactory.getInstance("RSA", "BC").generatePublic(new X509EncodedKeySpec(Base64.decode("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDN2CQ+ZcsbHVrLSJ+/v0BA6kgo\ra+riowfZErlGdlMjUhf4UTos1ZzKfavQjctIQjlEStxBWAZ+gtmtYakUmjWFBupk\rs6RWcR/ho+VEePpzxhSis8M6zHDhf9Dl8u6uvSAdk+CM3NgGle0bC8WnMxy2k9k3\rMSrX93AKZV36DCMtUQIDAQAB\r", 0)));
        } catch (NoSuchAlgorithmException e5) {
            e5.printStackTrace();
        } catch (NoSuchProviderException e6) {
            e6.printStackTrace();
        } catch (InvalidKeySpecException e7) {
            e7.printStackTrace();
        }
        try {
            e = KeyFactory.getInstance("RSA", "BC").generatePublic(new X509EncodedKeySpec(Base64.decode("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMQK5vjD6+FRf8/RQDgeyg8T/G\rvLo3CD7ngcZ0l2fXuHh83gxgM1C7BNN1RgQFRXWFzMDLxbynm/ZA3GsntY+OiN8S\rBza2SEnir+p0jrsZ+WNhaRWch4FpAxnfcnfxrJL26ZkfYaxS85pKby/IQuSwIswV\rom0F06RIZreK3rQDrwIDAQAB\r", 0)));
        } catch (NoSuchAlgorithmException e8) {
            e8.printStackTrace();
        } catch (NoSuchProviderException e9) {
            e9.printStackTrace();
        } catch (InvalidKeySpecException e10) {
            e10.printStackTrace();
        }
        new Thread(new f(context, a(context), handler)).start();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static String b(Context context, String str) {
        Exception e2;
        String str2;
        int i = 0;
        String b2 = b(str);
        String string = Settings.Secure.getString(context.getContentResolver(), "android_id");
        HttpGet httpGet = new HttpGet(b);
        HashMap hashMap = new HashMap();
        hashMap.put("appid", "20400103");
        hashMap.put("apptype", "3");
        hashMap.put("Phone_ID", string);
        hashMap.put("clientversion", "1.0");
        hashMap.put("sdkversion", "UnionSDK-20AndriodV2.2.2");
        hashMap.put("count", "0");
        hashMap.put("isSipApp", "1");
        hashMap.put("rand", str);
        hashMap.put("encckek", b2);
        StringBuilder sb = new StringBuilder();
        sb.append("HS ");
        for (Map.Entry entry : hashMap.entrySet()) {
            sb.append((String) entry.getKey()).append("=\"").append((String) entry.getValue()).append("\",");
        }
        String sb2 = sb.toString();
        String substring = sb2.substring(0, sb2.length() - 1);
        httpGet.setHeader("Authorization", substring);
        httpGet.setHeader("signature", a(substring.getBytes()));
        BasicHttpParams basicHttpParams = new BasicHttpParams();
        HttpClientParams.setRedirecting(basicHttpParams, false);
        DefaultHttpClient defaultHttpClient = new DefaultHttpClient(basicHttpParams);
        defaultHttpClient.getParams().setParameter("http.connection.timeout", 10000);
        defaultHttpClient.getParams().setParameter("http.socket.timeout", 15000);
        StringBuilder sb3 = new StringBuilder();
        String str3 = "";
        try {
            HttpResponse execute = defaultHttpClient.execute(httpGet);
            new StringBuilder("back code = ").append(execute.getStatusLine().getStatusCode());
            if (execute.getStatusLine().getStatusCode() == 200) {
                Header[] allHeaders = execute.getAllHeaders();
                int length = allHeaders.length;
                while (i < length) {
                    Header header = allHeaders[i];
                    if (header.getName().equals("WWW-Authenticate")) {
                        String value = header.getValue();
                        int indexOf = value.indexOf("username=\"");
                        str2 = value.substring(indexOf + 10, value.indexOf("\"", indexOf + 10));
                    } else {
                        str2 = str3;
                    }
                    try {
                        sb3.append(header.getName()).append(":").append(header.getValue());
                        i++;
                        str3 = str2;
                    } catch (Exception e3) {
                        e2 = e3;
                        str3 = str2;
                        e2.printStackTrace();
                        defaultHttpClient.getConnectionManager().shutdown();
                        return str3;
                    }
                }
                new StringBuilder("backMsg = ").append(sb3.toString());
            }
        } catch (Exception e4) {
            e2 = e4;
        }
        defaultHttpClient.getConnectionManager().shutdown();
        return str3;
    }

    private static String b(String str) {
        if (e == null) {
            return null;
        }
        try {
            Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(1, e);
            return b(cipher.doFinal(str.getBytes("UTF-8")));
        } catch (Throwable th) {
            return null;
        }
    }

    private static String b(byte[] bArr) {
        StringBuilder sb = new StringBuilder();
        int length = bArr.length;
        for (int i = 0; i < length; i++) {
            sb.append(String.format("%02x", Integer.valueOf(bArr[i] & 255)));
        }
        return sb.toString().toUpperCase();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ int c() {
        int i = h;
        h = i + 1;
        return i;
    }

    private static String c(String str) {
        try {
            byte[] digest = MessageDigest.getInstance("MD5").digest(str.getBytes("UTF-8"));
            StringBuilder sb = new StringBuilder(digest.length << 1);
            for (byte b2 : digest) {
                if ((b2 & 255) < 16) {
                    sb.append("0");
                }
                sb.append(Integer.toHexString(b2 & 255));
            }
            return sb.toString();
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
            return null;
        } catch (NoSuchAlgorithmException e3) {
            e3.printStackTrace();
            return null;
        }
    }
}
