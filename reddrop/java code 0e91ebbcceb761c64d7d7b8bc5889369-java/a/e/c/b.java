package a.e.c;

import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
/* loaded from: classes.dex */
public final class b {

    /* renamed from: a  reason: collision with root package name */
    private String f506a;
    private StringReader b;
    private InputStream c;
    private String d;
    private HashSet e;
    private HashMap f;
    private HashMap g;
    private HashSet h;
    private JSONObject i;

    private b(c cVar) {
        StringReader stringReader;
        InputStream inputStream;
        String str;
        HashSet hashSet;
        HashMap hashMap;
        HashMap hashMap2;
        HashSet hashSet2;
        this.f506a = "   ";
        stringReader = cVar.f507a;
        this.b = stringReader;
        inputStream = cVar.b;
        this.c = inputStream;
        str = cVar.c;
        this.d = str;
        hashSet = cVar.d;
        this.e = hashSet;
        hashMap = cVar.e;
        this.f = hashMap;
        hashMap2 = cVar.f;
        this.g = hashMap2;
        hashSet2 = cVar.g;
        this.h = hashSet2;
        this.i = b();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public /* synthetic */ b(c cVar, byte b) {
        this(cVar);
    }

    private JSONObject a(a aVar) {
        JSONObject jSONObject = new JSONObject();
        if (aVar.b() != null) {
            String e = aVar.e();
            r0 = "content";
            String str = (String) this.g.get(e);
            if (str == null) {
            }
            a(e, jSONObject, str, aVar.b());
        }
        try {
            for (ArrayList arrayList : aVar.d().values()) {
                if (arrayList.size() == 1) {
                    a aVar2 = (a) arrayList.get(0);
                    if (this.e.contains(aVar2.e())) {
                        JSONArray jSONArray = new JSONArray();
                        jSONArray.put(a(aVar2));
                        jSONObject.put(aVar2.a(), jSONArray);
                    } else if (aVar2.c()) {
                        jSONObject.put(aVar2.a(), a(aVar2));
                    } else {
                        a(aVar2.e(), jSONObject, aVar2.a(), aVar2.b());
                    }
                } else {
                    JSONArray jSONArray2 = new JSONArray();
                    Iterator it = arrayList.iterator();
                    while (it.hasNext()) {
                        jSONArray2.put(a((a) it.next()));
                    }
                    jSONObject.put(((a) arrayList.get(0)).a(), jSONArray2);
                }
            }
            return jSONObject;
        } catch (JSONException e2) {
            e2.printStackTrace();
            return null;
        }
    }

    private void a(a aVar, XmlPullParser xmlPullParser) {
        int next;
        do {
            try {
                next = xmlPullParser.next();
                if (next == 2) {
                    String name = xmlPullParser.getName();
                    a aVar2 = new a(aVar.e() + "/" + name, name);
                    aVar.a(aVar2);
                    int attributeCount = xmlPullParser.getAttributeCount();
                    for (int i = 0; i < attributeCount; i++) {
                        String attributeName = xmlPullParser.getAttributeName(i);
                        String attributeValue = xmlPullParser.getAttributeValue(i);
                        String str = aVar.e() + "/" + aVar2.a() + "/" + attributeName;
                        String str2 = (String) this.f.get(str);
                        if (str2 == null) {
                            str2 = attributeName;
                        }
                        a aVar3 = new a(str, str2);
                        aVar3.a(attributeValue);
                        aVar2.a(aVar3);
                    }
                    a(aVar2, xmlPullParser);
                } else if (next == 4) {
                    aVar.a(xmlPullParser.getText());
                } else if (next != 3) {
                    new StringBuilder("unknown xml eventType ").append(next);
                } else {
                    return;
                }
            } catch (IOException | NullPointerException | XmlPullParserException e) {
                e.printStackTrace();
                return;
            }
        } while (next != 1);
    }

    private void a(String str, JSONObject jSONObject, String str2, String str3) {
        if (str3 != null) {
            try {
                if (this.h.contains(str)) {
                    jSONObject.put(str2, str3);
                }
                if (str3.equalsIgnoreCase("true")) {
                    jSONObject.put(str2, true);
                } else if (str3.equalsIgnoreCase("false")) {
                    jSONObject.put(str2, false);
                } else {
                    try {
                        jSONObject.put(str2, Integer.valueOf(Integer.parseInt(str3)));
                    } catch (NumberFormatException e) {
                        try {
                            jSONObject.put(str2, Double.valueOf(Double.parseDouble(str3)).doubleValue());
                        } catch (NumberFormatException e2) {
                            jSONObject.put(str2, str3);
                        }
                    }
                }
            } catch (JSONException e3) {
            }
        }
    }

    private JSONObject b() {
        try {
            try {
                a aVar = new a("", "xml");
                XmlPullParserFactory newInstance = XmlPullParserFactory.newInstance();
                newInstance.setNamespaceAware(false);
                XmlPullParser newPullParser = newInstance.newPullParser();
                if (this.b != null) {
                    try {
                        newPullParser.setInput(this.b);
                    } catch (XmlPullParserException e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        newPullParser.setInput(this.c, this.d);
                    } catch (XmlPullParserException e2) {
                        e2.printStackTrace();
                    }
                }
                for (int eventType = newPullParser.getEventType(); eventType != 0; eventType = newPullParser.next()) {
                }
                a(aVar, newPullParser);
                if (this.b != null) {
                    this.b.close();
                }
                return a(aVar);
            } catch (XmlPullParserException e3) {
                e = e3;
                e.printStackTrace();
                return null;
            }
        } catch (IOException e4) {
            e = e4;
            e.printStackTrace();
            return null;
        }
    }

    public final JSONObject a() {
        return this.i;
    }

    public final String toString() {
        if (this.i != null) {
            return this.i.toString();
        }
        return null;
    }
}
