package com.mn.kt.d;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Environment;
import android.os.IBinder;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.util.Base64;
import android.util.DisplayMetrics;
import com.umeng.analytics.pro.j;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
/* loaded from: classes.dex */
public final class a {

    /* renamed from: a  reason: collision with root package name */
    private static String f900a = "util";
    private static String b = null;
    private static String c = null;
    private static String d = null;
    private static int e = -1;
    private static int f = -1;
    private static String g = "0";
    private static String h = "http://120.26.106.206:8088";
    private static String i = "gvTyY9PfGqdlxfZhHMxij6iJVIlAkEAv";

    public static String a() {
        String str = Environment.getExternalStorageDirectory() + File.separator + "Android/data/com.door.pay.app/";
        StringBuffer stringBuffer = new StringBuffer();
        File file = new File(String.valueOf(str) + "uu.dat");
        try {
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        if (!file.exists()) {
            return stringBuffer.toString();
        }
        FileInputStream fileInputStream = new FileInputStream(file);
        while (true) {
            int read = fileInputStream.read();
            if (read == -1) {
                break;
            }
            stringBuffer.append((char) read);
        }
        fileInputStream.close();
        return stringBuffer.toString();
    }

    public static void a(Context context, com.mn.kt.a.a aVar) {
        int i2 = 100006;
        int i3 = 1000;
        String str = "C0007";
        try {
            ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(context.getPackageName(), j.h);
            if (!(applicationInfo == null || applicationInfo.metaData == null)) {
                i2 = applicationInfo.metaData.getInt("AID");
                i3 = applicationInfo.metaData.getInt("CPID");
                str = applicationInfo.metaData.getString("CHID");
            }
        } catch (Exception e2) {
            String str2 = f900a;
            e2.printStackTrace();
        }
        aVar.b = i2;
        aVar.f885a = str;
        aVar.c = i3;
    }

    public static void a(Context context) {
        String file = context.getFilesDir().toString();
        d = file;
        if (file == null) {
            d = "";
        } else if (d.charAt(d.length() - 1) != '/') {
            d = String.valueOf(d) + '/';
        }
    }

    public static String b(Context context) {
        if (c != null && c.length() != 0) {
            return c;
        }
        String macAddress = ((WifiManager) context.getSystemService("wifi")).getConnectionInfo().getMacAddress();
        c = macAddress;
        if (macAddress == null) {
            c = "";
        }
        return c;
    }

    public static String b() {
        return Build.MODEL;
    }

    public static String c() {
        return String.valueOf(Build.FINGERPRINT) + ":" + Build.CPU_ABI + "/" + Build.CPU_ABI2;
    }

    public static DisplayMetrics c(Context context) {
        return context.getResources().getDisplayMetrics();
    }

    /* JADX WARN: Removed duplicated region for block: B:35:0x006c A[ORIG_RETURN, RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:52:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String d(Context context) {
        String str;
        String str2 = null;
        try {
            str2 = ((TelephonyManager) context.getSystemService("phone")).getSubscriberId();
            if (str2 == null || str2.length() == 0) {
                if ((a(0) == null || a(1) == null) ? false : true) {
                    int p = p(context);
                    if (p == -1 && (p = q(context)) == -1) {
                        p = i();
                    }
                    if (!(p == 0 || p == 1)) {
                        String subscriberId = ((TelephonyManager) context.getSystemService("phone")).getSubscriberId();
                        p = (subscriberId == null || !subscriberId.equals(a(0))) ? (subscriberId == null || !subscriberId.equals(a(1))) ? -1 : 1 : 0;
                    }
                    if (p != -1) {
                        str2 = a(p);
                    }
                }
            }
            if (str2 == null || str2.length() == 0) {
                str2 = o(context);
            }
            if (str2 == null || str2.length() == 0) {
                str2 = a(0);
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        if (str2 == null || str2.length() == 0) {
            str = a(1);
            if (str != null) {
                return "";
            }
            return str;
        }
        str = str2;
        if (str != null) {
        }
    }

    public static String e(Context context) {
        NetworkInfo activeNetworkInfo = ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
        if (activeNetworkInfo != null) {
            if (activeNetworkInfo.getType() == 1) {
                return "wifi";
            }
            if (activeNetworkInfo.getType() == 0) {
                String extraInfo = activeNetworkInfo.getExtraInfo();
                boolean z = false;
                if (extraInfo != null) {
                    z = extraInfo.toLowerCase().endsWith("wap");
                }
                if (z) {
                    return "wap";
                }
                return "net";
            }
        }
        return "";
    }

    public static String f(Context context) {
        if (b != null && b.length() != 0) {
            return b;
        }
        b = ((TelephonyManager) context.getSystemService("phone")).getDeviceId();
        try {
            if (b == null) {
                b = Settings.Secure.getString(context.getContentResolver(), "android_id");
            }
        } catch (Exception e2) {
        }
        if (b == null) {
            b = "";
        }
        return b;
    }

    public static void d() {
    }

    public static String g(Context context) {
        return a(String.valueOf(f(context)) + System.currentTimeMillis());
    }

    private static String a(String str) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            char[] charArray = str.toCharArray();
            byte[] bArr = new byte[charArray.length];
            for (int i2 = 0; i2 < charArray.length; i2++) {
                bArr[i2] = (byte) charArray[i2];
            }
            byte[] digest = messageDigest.digest(bArr);
            StringBuffer stringBuffer = new StringBuffer();
            for (byte b2 : digest) {
                int i3 = b2 & 255;
                if (i3 < 16) {
                    stringBuffer.append("0");
                }
                stringBuffer.append(Integer.toHexString(i3));
            }
            return stringBuffer.toString();
        } catch (Exception e2) {
            e2.printStackTrace();
            return "";
        }
    }

    public static String h(Context context) {
        m(context);
        return new StringBuilder(String.valueOf(f)).toString();
    }

    public static int i(Context context) {
        m(context);
        return e;
    }

    private static String m(Context context) {
        int i2;
        int i3 = 0;
        if (e < 0) {
            TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService("phone");
            e = 1;
            f = 0;
            Object[] a2 = com.mn.kt.b.a.a("service list");
            if (((Boolean) a2[0]).booleanValue()) {
                String lowerCase = ((String) a2[1]).toLowerCase();
                int indexOf = lowerCase.indexOf("com.android.internal.telephony.iphonesubinfo");
                e = (indexOf <= 0 || !lowerCase.substring(indexOf + 44).contains("com.android.internal.telephony.iphonesubinfo")) ? 1 : 2;
            }
            Object[] a3 = com.mn.kt.b.a.a("getprop");
            if (((Boolean) a3[0]).booleanValue()) {
                String lowerCase2 = ((String) a3[1]).toLowerCase();
                if (lowerCase2.contains("[init.svc.sprd")) {
                    i2 = 2;
                } else {
                    i2 = lowerCase2.contains("[init.svc.mtk") ? 1 : lowerCase2.contains("[init.svc.qcom") ? 3 : lowerCase2.contains("[init.svc.samsung") ? 4 : 0;
                }
                f = i2;
                if (telephonyManager.getPhoneType() == 0) {
                    e = 0;
                }
                if (e == 1) {
                    if (c.a("gsm.sim.state").contains(",")) {
                        e = 2;
                    } else {
                        while (Pattern.compile("\\[gsm\\..+\\.state.*\\]\\s*:\\s*\\[.*\\]").matcher(lowerCase2).find()) {
                            i3++;
                        }
                        if (i3 > 2) {
                            e = 2;
                        }
                    }
                }
                return lowerCase2;
            }
        }
        return null;
    }

    /* JADX WARN: Removed duplicated region for block: B:12:0x0031  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x003c  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String j(Context context) {
        String str;
        String m = m(context);
        if (e == 1) {
            String a2 = c.a("gsm.operator.numeric");
            if (a2 == null) {
                return "";
            }
            return a2;
        }
        if (m == null) {
            Object[] a3 = com.mn.kt.b.a.a("getprop");
            if (((Boolean) a3[0]).booleanValue()) {
                str = ((String) a3[1]).toLowerCase();
                if (str != null) {
                    String a4 = c.a("gsm.operator.numeric");
                    if (a4 == null) {
                        return "";
                    }
                    return a4;
                }
                Matcher matcher = Pattern.compile("\\[gsm\\.operator\\.numeric.*\\]\\s*:\\s*\\[(.*)\\]").matcher(str.toLowerCase());
                String str2 = "";
                while (matcher.find()) {
                    str2 = String.valueOf(str2) + "," + matcher.group(1);
                }
                if (str2.length() > 0) {
                    return str2.substring(1);
                }
                return str2;
            }
        }
        str = m;
        if (str != null) {
        }
    }

    public static String e() {
        return Build.VERSION.RELEASE;
    }

    public static int f() {
        return Build.VERSION.SDK_INT;
    }

    public static int g() {
        return 0;
    }

    public static String k(Context context) {
        Locale locale = context.getResources().getConfiguration().locale;
        StringBuffer stringBuffer = new StringBuffer();
        if (locale != null) {
            String str = Build.VERSION.RELEASE;
            if (str.length() > 0) {
                stringBuffer.append(str);
            } else {
                stringBuffer.append("1.0");
            }
            stringBuffer.append("; ");
            String language = locale.getLanguage();
            if (language != null) {
                stringBuffer.append(language.toLowerCase());
                String country = locale.getCountry();
                if (country != null) {
                    stringBuffer.append("-");
                    stringBuffer.append(country.toLowerCase());
                }
            } else {
                stringBuffer.append("en");
            }
            String str2 = Build.MODEL;
            if (str2.length() > 0) {
                stringBuffer.append("; ");
                stringBuffer.append(str2);
            }
            String str3 = Build.ID;
            if (str3.length() > 0) {
                stringBuffer.append(" Build/");
                stringBuffer.append(str3);
            }
        }
        return stringBuffer.toString();
    }

    public static byte[] a(byte[] bArr) {
        String str = i;
        try {
            SecureRandom secureRandom = new SecureRandom();
            SecretKey generateSecret = SecretKeyFactory.getInstance("DES").generateSecret(new DESKeySpec(str.getBytes()));
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(1, generateSecret, secureRandom);
            return cipher.doFinal(bArr);
        } catch (Exception e2) {
            e2.printStackTrace();
            return null;
        }
    }

    public static byte[] b(byte[] bArr) {
        String str = i;
        try {
            SecureRandom secureRandom = new SecureRandom();
            SecretKey generateSecret = SecretKeyFactory.getInstance("DES").generateSecret(new DESKeySpec(str.getBytes()));
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(2, generateSecret, secureRandom);
            return cipher.doFinal(bArr);
        } catch (Exception e2) {
            e2.printStackTrace();
            return null;
        }
    }

    public static void a(Context context, String str, String str2, String str3) {
        InputStream inputStream;
        int i2 = 0;
        FileOutputStream fileOutputStream = null;
        String str4 = String.valueOf(str2) + "/" + str3;
        File file = new File(str2);
        if (!file.exists()) {
            file.mkdir();
        }
        try {
            PackageInfo packageArchiveInfo = context.getPackageManager().getPackageArchiveInfo(str4, 1);
            String str5 = packageArchiveInfo != null ? packageArchiveInfo.versionName : null;
            if (str5 != null) {
                str5 = str5.replace(".", "");
                i2 = Integer.parseInt(str5);
            }
            if (str5 == null || 137 > i2) {
                InputStream open = context.getResources().getAssets().open(str);
                try {
                    FileOutputStream fileOutputStream2 = new FileOutputStream(str4);
                    try {
                        byte[] bArr = new byte[7168];
                        while (true) {
                            int read = open.read(bArr);
                            if (read <= 0) {
                                fileOutputStream2.close();
                                open.close();
                                return;
                            }
                            fileOutputStream2.write(bArr, 0, read);
                        }
                    } catch (Exception e2) {
                        e = e2;
                        fileOutputStream = fileOutputStream2;
                        inputStream = open;
                        e.printStackTrace();
                        try {
                            fileOutputStream.close();
                            inputStream.close();
                        } catch (Exception e3) {
                        }
                    }
                } catch (Exception e4) {
                    e = e4;
                    inputStream = open;
                }
            }
        } catch (Exception e5) {
            e = e5;
            inputStream = null;
        }
    }

    public static String a(String str, String str2) {
        try {
            return new String(a(Base64.decode(str, 2), str2), "utf-8");
        } catch (Exception e2) {
            return null;
        }
    }

    private static byte[] a(byte[] bArr, String str) {
        byte[] bytes = str.getBytes();
        int i2 = 0;
        for (int i3 = 0; i3 < bArr.length; i3++) {
            bArr[i3] = (byte) (bArr[i3] ^ bytes[i2]);
            bArr[i3] = (byte) (bArr[i3] ^ bytes[i2]);
            bArr[i3] = (byte) (bArr[i3] ^ bytes[i2]);
            i2++;
            if (i2 == bytes.length) {
                i2 = 0;
            }
        }
        return bArr;
    }

    private static String n(Context context) {
        StringBuilder sb = new StringBuilder();
        try {
            File file = new File(String.valueOf(context.getFilesDir().getAbsolutePath()) + "/LocalPool.xml");
            if (file.exists()) {
                FileInputStream fileInputStream = new FileInputStream(file);
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(fileInputStream));
                while (bufferedReader.ready()) {
                    sb.append(bufferedReader.readLine());
                }
                bufferedReader.close();
                fileInputStream.close();
            }
        } catch (IOException e2) {
            e2.printStackTrace();
        }
        return sb.toString();
    }

    public static List l(Context context) {
        ArrayList arrayList = new ArrayList();
        arrayList.add("http://sdk.qipagame.cn:8088");
        arrayList.add("http://121.40.109.196:8088");
        arrayList.add(h);
        String n = n(context);
        try {
            XmlPullParser newPullParser = XmlPullParserFactory.newInstance().newPullParser();
            newPullParser.setInput(new ByteArrayInputStream(n.getBytes()), "utf-8");
            for (int eventType = newPullParser.getEventType(); eventType != 1; eventType = newPullParser.next()) {
                switch (eventType) {
                    case 2:
                        String name = newPullParser.getName();
                        if ("version".equals(name)) {
                            g = newPullParser.nextText();
                            continue;
                        } else if ("url".equals(name)) {
                            arrayList.add(newPullParser.nextText());
                            continue;
                        } else {
                            continue;
                        }
                }
            }
        } catch (IOException e2) {
            e2.printStackTrace();
        } catch (XmlPullParserException e3) {
            e3.printStackTrace();
        } catch (Exception e4) {
            e4.printStackTrace();
        }
        return arrayList;
    }

    public static String h() {
        return g;
    }

    private static String o(Context context) {
        String str;
        try {
            Class<?> cls = Class.forName("android.telephony.MSimTelephonyManager");
            Object systemService = context.getSystemService("phone_msim");
            Method method = cls.getMethod("getSimState", Integer.TYPE);
            Method method2 = cls.getMethod("getSubscriberId", Integer.TYPE);
            if (((Integer) method.invoke(systemService, 0)).intValue() == 5) {
                str = (String) method2.invoke(systemService, 0);
            } else {
                str = (String) method2.invoke(systemService, 1);
            }
            return str;
        } catch (Exception e2) {
            return null;
        }
    }

    private static String a(int i2) {
        String str = "iphonesubinfo";
        if (i2 == 1) {
            str = "iphonesubinfo2";
        }
        try {
            Method declaredMethod = Class.forName("android.os.ServiceManager").getDeclaredMethod("getService", String.class);
            declaredMethod.setAccessible(true);
            Object invoke = declaredMethod.invoke(null, str);
            if (invoke == null && i2 == 1) {
                invoke = declaredMethod.invoke(null, "iphonesubinfo1");
            }
            if (invoke == null) {
                return null;
            }
            Method declaredMethod2 = Class.forName("com.android.internal.telephony.IPhoneSubInfo$Stub").getDeclaredMethod("asInterface", IBinder.class);
            declaredMethod2.setAccessible(true);
            Object invoke2 = declaredMethod2.invoke(null, invoke);
            return (String) invoke2.getClass().getMethod("getSubscriberId", new Class[0]).invoke(invoke2, new Object[0]);
        } catch (Exception e2) {
            e2.printStackTrace();
            return null;
        }
    }

    private static int p(Context context) {
        try {
            Method declaredMethod = Class.forName("android.telephony.TelephonyManager").getDeclaredMethod("getSmsDefaultSim", new Class[0]);
            declaredMethod.setAccessible(true);
            return ((Integer) declaredMethod.invoke((TelephonyManager) context.getSystemService("phone"), new Object[0])).intValue();
        } catch (Exception e2) {
            e2.printStackTrace();
            return -1;
        }
    }

    private static int q(Context context) {
        try {
            Method declaredMethod = Class.forName("android.telephony.TelephonyManager").getDeclaredMethod("getDefaultDataPhoneId", new Class[0]);
            declaredMethod.setAccessible(true);
            return ((Integer) declaredMethod.invoke((TelephonyManager) context.getSystemService("phone"), new Object[0])).intValue();
        } catch (Exception e2) {
            e2.printStackTrace();
            return -1;
        }
    }

    private static int i() {
        try {
            Method declaredMethod = Class.forName("android.telephony.SmsManager").getDeclaredMethod("getDefault", new Class[0]);
            declaredMethod.setAccessible(true);
            Object invoke = declaredMethod.invoke(null, new Object[0]);
            Method declaredMethod2 = Class.forName("android.telephony.SmsManager").getDeclaredMethod("getPreferredSmsSubscription", new Class[0]);
            declaredMethod2.setAccessible(true);
            return ((Integer) declaredMethod2.invoke(invoke, new Object[0])).intValue();
        } catch (Exception e2) {
            e2.printStackTrace();
            return -1;
        }
    }
}
