package com.mn.kt.b;

import com.mn.kt.d.b;
import java.io.DataInputStream;
import java.io.IOException;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
/* loaded from: classes.dex */
public class a {

    /* renamed from: a  reason: collision with root package name */
    public String f888a;
    public String b;
    private String c = "requestUpdate";

    /* JADX WARN: Removed duplicated region for block: B:30:0x0067 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static Object[] a(String str) {
        DataInputStream dataInputStream;
        String readLine;
        DataInputStream dataInputStream2 = null;
        Object[] objArr = new Object[2];
        objArr[0] = false;
        StringBuffer stringBuffer = new StringBuffer();
        try {
            try {
                Process exec = Runtime.getRuntime().exec(str);
                dataInputStream = new DataInputStream(exec.getInputStream());
                while (true) {
                    try {
                        if (dataInputStream.readLine() == null) {
                            break;
                        }
                        stringBuffer.append(String.valueOf(readLine) + "\r\n");
                    } catch (Exception e) {
                        e = e;
                        e.printStackTrace();
                        if (dataInputStream != null) {
                            try {
                                dataInputStream.close();
                            } catch (Exception e2) {
                                e2.printStackTrace();
                            }
                        }
                        return objArr;
                    }
                }
                exec.waitFor();
                dataInputStream.close();
                objArr[0] = true;
                objArr[1] = stringBuffer.toString();
            } catch (Throwable th) {
                th = th;
                if (dataInputStream2 != null) {
                    try {
                        dataInputStream2.close();
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                }
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
            dataInputStream = null;
        } catch (Throwable th2) {
            th = th2;
            dataInputStream2 = null;
            if (dataInputStream2 != null) {
            }
            throw th;
        }
        return objArr;
    }

    public final String a(String str, JSONObject jSONObject) {
        String str2 = null;
        if (jSONObject == null) {
            this.f888a = "STEP_UPDATE_REQUEST_DATA_ERR";
            this.b = "request update json is null";
        } else {
            String jSONObject2 = jSONObject.toString();
            String str3 = this.c;
            String str4 = ":\trequest: " + str + b.f901a + jSONObject2;
            com.mn.kt.d.a.d();
            HttpPost httpPost = new HttpPost(str);
            BasicHttpParams basicHttpParams = new BasicHttpParams();
            HttpConnectionParams.setConnectionTimeout(basicHttpParams, 15000);
            HttpConnectionParams.setSoTimeout(basicHttpParams, 15000);
            HttpProtocolParams.setUserAgent(basicHttpParams, System.getProperty("http.agent"));
            DefaultHttpClient defaultHttpClient = new DefaultHttpClient(basicHttpParams);
            try {
                httpPost.setEntity(new ByteArrayEntity(com.mn.kt.d.a.a(new String(jSONObject2.getBytes(), "UTF-8").getBytes())));
                HttpResponse execute = defaultHttpClient.execute(httpPost);
                int statusCode = execute.getStatusLine().getStatusCode();
                String str5 = this.c;
                String str6 = ":\t statuscode=" + statusCode;
                com.mn.kt.d.a.d();
                if (execute.getStatusLine().getStatusCode() == 200) {
                    String str7 = this.c;
                    String str8 = ":\tsend message success. StatusCode = " + execute.getStatusLine().getStatusCode() + b.f901a + str;
                    com.mn.kt.d.a.d();
                    this.f888a = "STEP_UPDATE_NORMAL";
                    this.b = "send and receive data success";
                    String str9 = new String(com.mn.kt.d.a.b(EntityUtils.toByteArray(execute.getEntity())));
                    String str10 = this.c;
                    String str11 = ":\t strResult=" + str9;
                    com.mn.kt.d.a.d();
                    str2 = str9;
                } else {
                    this.f888a = "STEP_UPDATE_CODE_ERR";
                    this.b = "statuscode err=" + statusCode;
                }
            } catch (ClientProtocolException e) {
                this.f888a = "STEP_UPDATE_DATASEND_FAILED";
                this.b = e.toString();
                String str12 = this.c;
                String str13 = ":\tClientProtocolException,Failed to send message." + str + e;
                com.mn.kt.d.a.d();
            } catch (IOException e2) {
                this.f888a = "STEP_UPDATE_DATAGET_FAILED";
                this.b = e2.toString();
                String str14 = this.c;
                String str15 = ":\tIOException,Failed to get message." + str + e2;
                com.mn.kt.d.a.d();
            } catch (Exception e3) {
                this.f888a = "STEP_UPDATE_OTHER_ERR";
                this.b = e3.toString();
                String str16 = this.c;
                String str17 = ":\tException,update other exception." + str + e3;
                com.mn.kt.d.a.d();
            }
        }
        return str2;
    }
}
