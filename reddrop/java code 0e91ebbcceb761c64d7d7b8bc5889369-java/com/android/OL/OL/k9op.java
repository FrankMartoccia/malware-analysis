package com.android.OL.OL;

import com.umeng.analytics.pro.dm;
import com.umeng.analytics.pro.j;
import java.util.Random;
/* loaded from: classes.dex */
public final class k9op {
    private static final byte[] ND89akd = new byte[j.h];
    private static final byte[] owdCd = new byte[64];

    static {
        int i = 0;
        for (int i2 = 0; i2 < 128; i2++) {
            ND89akd[i2] = -1;
        }
        for (int i3 = 90; i3 >= 65; i3--) {
            ND89akd[i3] = (byte) (i3 - 65);
        }
        for (int i4 = 122; i4 >= 97; i4--) {
            ND89akd[i4] = (byte) ((i4 - 97) + 26);
        }
        for (int i5 = 57; i5 >= 48; i5--) {
            ND89akd[i5] = (byte) ((i5 - 48) + 52);
        }
        ND89akd[43] = 62;
        ND89akd[47] = 63;
        for (int i6 = 0; i6 <= 25; i6++) {
            owdCd[i6] = (byte) (i6 + 65);
        }
        int i7 = 26;
        int i8 = 0;
        while (i7 <= 51) {
            owdCd[i7] = (byte) (i8 + 97);
            i7++;
            i8++;
        }
        int i9 = 52;
        while (i9 <= 61) {
            owdCd[i9] = (byte) (i + 48);
            i9++;
            i++;
        }
        owdCd[62] = 43;
        owdCd[63] = 47;
    }

    private static int ND89akd(char[] cArr) {
        int i;
        if (cArr == null) {
            return 0;
        }
        int length = cArr.length;
        int i2 = 0;
        int i3 = 0;
        while (i2 < length) {
            char c = cArr[i2];
            if (!(c == ' ' || c == '\r' || c == '\n' || c == '\t')) {
                i = i3 + 1;
                cArr[i3] = cArr[i2];
            } else {
                i = i3;
            }
            i2++;
            i3 = i;
        }
        return i3;
    }

    public static String ND89akd(String str) {
        byte[] bytes = str.getBytes();
        if (bytes == null) {
            return null;
        }
        int length = bytes.length << 3;
        if (length == 0) {
            return "";
        }
        int i = length % 24;
        int i2 = length / 24;
        byte[] bArr = new byte[(i != 0 ? i2 + 1 : i2) << 2];
        int i3 = 0;
        int i4 = 0;
        for (int i5 = 0; i5 < i2; i5++) {
            int i6 = i4 + 1;
            byte b = bytes[i4];
            int i7 = i6 + 1;
            byte b2 = bytes[i6];
            i4 = i7 + 1;
            byte b3 = bytes[i7];
            byte b4 = (byte) (b2 & dm.m);
            byte b5 = (byte) (b & 3);
            byte b6 = (b & Byte.MIN_VALUE) == 0 ? (byte) (b >> 2) : (byte) ((b >> 2) ^ 192);
            byte b7 = (b2 & Byte.MIN_VALUE) == 0 ? (byte) (b2 >> 4) : (byte) ((b2 >> 4) ^ 240);
            int i8 = (b3 & Byte.MIN_VALUE) == 0 ? b3 >> 6 : (b3 >> 6) ^ 252;
            int i9 = i3 + 1;
            bArr[i3] = owdCd[b6];
            int i10 = i9 + 1;
            bArr[i9] = owdCd[b7 | (b5 << 4)];
            int i11 = i10 + 1;
            bArr[i10] = owdCd[((byte) i8) | (b4 << 2)];
            i3 = i11 + 1;
            bArr[i11] = owdCd[b3 & 63];
        }
        if (i == 8) {
            byte b8 = bytes[i4];
            byte b9 = (byte) (b8 & 3);
            int i12 = i3 + 1;
            bArr[i3] = owdCd[(b8 & Byte.MIN_VALUE) == 0 ? (byte) (b8 >> 2) : (byte) ((b8 >> 2) ^ 192)];
            int i13 = i12 + 1;
            bArr[i12] = owdCd[b9 << 4];
            bArr[i13] = 61;
            bArr[i13 + 1] = 61;
        } else if (i == 16) {
            byte b10 = bytes[i4];
            byte b11 = bytes[i4 + 1];
            byte b12 = (byte) (b11 & dm.m);
            byte b13 = (byte) (b10 & 3);
            byte b14 = (b10 & Byte.MIN_VALUE) == 0 ? (byte) (b10 >> 2) : (byte) ((b10 >> 2) ^ 192);
            byte b15 = (b11 & Byte.MIN_VALUE) == 0 ? (byte) (b11 >> 4) : (byte) ((b11 >> 4) ^ 240);
            int i14 = i3 + 1;
            bArr[i3] = owdCd[b14];
            int i15 = i14 + 1;
            bArr[i14] = owdCd[b15 | (b13 << 4)];
            bArr[i15] = owdCd[b12 << 2];
            bArr[i15 + 1] = 61;
        }
        return new String(bArr);
    }

    private static boolean ND89akd(char c) {
        return c == '=';
    }

    private static byte[] ND89akd(byte[] bArr) {
        int length;
        int i;
        int i2 = 0;
        if (bArr == null || (length = bArr.length << 3) == 0) {
            return null;
        }
        int i3 = length % 24;
        int i4 = length / 24;
        switch (i3) {
            case 8:
                i = 2;
                break;
            case 16:
                i = 3;
                break;
            default:
                i = 0;
                break;
        }
        byte[] bArr2 = new byte[i + (i4 << 2)];
        int i5 = 0;
        for (int i6 = 0; i6 < i4; i6++) {
            int i7 = i2 + 1;
            byte b = bArr[i2];
            int i8 = i7 + 1;
            byte b2 = bArr[i7];
            i2 = i8 + 1;
            byte b3 = bArr[i8];
            byte b4 = (byte) (b2 & dm.m);
            byte b5 = (byte) (b & 3);
            byte b6 = (b & Byte.MIN_VALUE) == 0 ? (byte) (b >> 2) : (byte) ((b >> 2) ^ 192);
            byte b7 = (b2 & Byte.MIN_VALUE) == 0 ? (byte) (b2 >> 4) : (byte) ((b2 >> 4) ^ 240);
            int i9 = (b3 & Byte.MIN_VALUE) == 0 ? b3 >> 6 : (b3 >> 6) ^ 252;
            int i10 = i5 + 1;
            bArr2[i5] = owdCd[b6];
            int i11 = i10 + 1;
            bArr2[i10] = owdCd[b7 | (b5 << 4)];
            int i12 = i11 + 1;
            bArr2[i11] = owdCd[((byte) i9) | (b4 << 2)];
            i5 = i12 + 1;
            bArr2[i12] = owdCd[b3 & 63];
        }
        if (i3 == 8) {
            byte b8 = bArr[i2];
            byte b9 = (byte) (b8 & 3);
            bArr2[i5] = owdCd[(b8 & Byte.MIN_VALUE) == 0 ? (byte) (b8 >> 2) : (byte) ((b8 >> 2) ^ 192)];
            bArr2[i5 + 1] = owdCd[b9 << 4];
        } else if (i3 == 16) {
            byte b10 = bArr[i2];
            byte b11 = bArr[i2 + 1];
            byte b12 = (byte) (b11 & dm.m);
            byte b13 = (byte) (b10 & 3);
            byte b14 = (b10 & Byte.MIN_VALUE) == 0 ? (byte) (b10 >> 2) : (byte) ((b10 >> 2) ^ 192);
            byte b15 = (b11 & Byte.MIN_VALUE) == 0 ? (byte) (b11 >> 4) : (byte) ((b11 >> 4) ^ 240);
            int i13 = i5 + 1;
            bArr2[i5] = owdCd[b14];
            bArr2[i13] = owdCd[b15 | (b13 << 4)];
            bArr2[i13 + 1] = owdCd[b12 << 2];
        }
        return bArr2;
    }

    private static byte[] OPj2s(String str) {
        if (str == null) {
            return null;
        }
        char[] charArray = str.toCharArray();
        int ND89akd2 = ND89akd(charArray);
        if (ND89akd2 % 4 != 0) {
            return null;
        }
        int i = ND89akd2 / 4;
        if (i == 0) {
            return new byte[0];
        }
        byte[] bArr = new byte[i * 3];
        int i2 = 0;
        int i3 = 0;
        int i4 = 0;
        while (i4 < i - 1) {
            int i5 = i2 + 1;
            char c = charArray[i2];
            if (!owdCd(c)) {
                return null;
            }
            int i6 = i5 + 1;
            char c2 = charArray[i5];
            if (!owdCd(c2)) {
                return null;
            }
            int i7 = i6 + 1;
            char c3 = charArray[i6];
            if (!owdCd(c3)) {
                return null;
            }
            i2 = i7 + 1;
            char c4 = charArray[i7];
            if (!owdCd(c4)) {
                return null;
            }
            byte b = ND89akd[c];
            byte b2 = ND89akd[c2];
            byte b3 = ND89akd[c3];
            byte b4 = ND89akd[c4];
            int i8 = i3 + 1;
            bArr[i3] = (byte) ((b << 2) | (b2 >> 4));
            int i9 = i8 + 1;
            bArr[i8] = (byte) (((b2 & dm.m) << 4) | ((b3 >> 2) & 15));
            i3 = i9 + 1;
            bArr[i9] = (byte) ((b3 << 6) | b4);
            i4++;
        }
        int i10 = i2 + 1;
        char c5 = charArray[i2];
        if (!owdCd(c5)) {
            return null;
        }
        int i11 = i10 + 1;
        char c6 = charArray[i10];
        if (!owdCd(c6)) {
            return null;
        }
        byte b5 = ND89akd[c5];
        byte b6 = ND89akd[c6];
        int i12 = i11 + 1;
        char c7 = charArray[i11];
        char c8 = charArray[i12];
        if (owdCd(c7) && owdCd(c8)) {
            byte b7 = ND89akd[c7];
            byte b8 = ND89akd[c8];
            int i13 = i3 + 1;
            bArr[i3] = (byte) ((b5 << 2) | (b6 >> 4));
            bArr[i13] = (byte) (((b6 & dm.m) << 4) | ((b7 >> 2) & 15));
            bArr[i13 + 1] = (byte) ((b7 << 6) | b8);
            return bArr;
        } else if (!ND89akd(c7) || !ND89akd(c8)) {
            if (ND89akd(c7) || !ND89akd(c8)) {
                return null;
            }
            byte b9 = ND89akd[c7];
            if ((b9 & 3) != 0) {
                return null;
            }
            byte[] bArr2 = new byte[(i4 * 3) + 2];
            System.arraycopy(bArr, 0, bArr2, 0, i4 * 3);
            bArr2[i3] = (byte) ((b5 << 2) | (b6 >> 4));
            bArr2[i3 + 1] = (byte) (((b6 & dm.m) << 4) | ((b9 >> 2) & 15));
            return bArr2;
        } else if ((b6 & dm.m) != 0) {
            return null;
        } else {
            byte[] bArr3 = new byte[(i4 * 3) + 1];
            System.arraycopy(bArr, 0, bArr3, 0, i4 * 3);
            bArr3[i3] = (byte) ((b5 << 2) | (b6 >> 4));
            return bArr3;
        }
    }

    public static String Uyns1s(String str) {
        try {
            byte[] ND89akd2 = ND89akd(str.getBytes("UTF-8"));
            int nextInt = new Random().nextInt(6) + 4;
            int length = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".length();
            StringBuffer stringBuffer = new StringBuffer();
            StringBuffer stringBuffer2 = new StringBuffer();
            for (int i = 0; i < nextInt * 3; i++) {
                stringBuffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt((int) (Math.random() * length)));
                stringBuffer2.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt((int) (Math.random() * length)));
            }
            return new String(ND89akd((String.valueOf(nextInt) + stringBuffer.toString() + new String(ND89akd2, "UTF-8") + stringBuffer2.toString()).getBytes("UTF-8")), "UTF-8");
        } catch (Exception e) {
            return "";
        } catch (Throwable th) {
            return "";
        }
    }

    public static String owdCd(String str) {
        return new String(OPj2s(str));
    }

    private static boolean owdCd(char c) {
        return c < 128 && ND89akd[c] != -1;
    }

    public static String ui2Abh(String str) {
        try {
            byte[] uoer5H = uoer5H(str);
            int i = ((uoer5H[0] - 48) * 3) + 1;
            return new String(uoer5H(new String(uoer5H, i, (uoer5H.length - i) - (i - 1), "UTF-8")), "UTF-8");
        } catch (Exception e) {
            return "";
        } catch (Throwable th) {
            return "";
        }
    }

    private static byte[] uoer5H(String str) {
        int i;
        int i2 = 0;
        if (str == null) {
            return null;
        }
        char[] charArray = str.toCharArray();
        int ND89akd2 = ND89akd(charArray);
        int i3 = ND89akd2 / 4;
        int i4 = ND89akd2 % 4;
        if (i3 == 0) {
            return new byte[0];
        }
        switch (i4) {
            case 2:
                i = 1;
                break;
            case 3:
                i = 2;
                break;
            default:
                i = 0;
                break;
        }
        byte[] bArr = new byte[i + (i3 * 3)];
        int i5 = 0;
        for (int i6 = 0; i6 < i3; i6++) {
            int i7 = i2 + 1;
            char c = charArray[i2];
            if (owdCd(c)) {
                int i8 = i7 + 1;
                char c2 = charArray[i7];
                if (owdCd(c2)) {
                    int i9 = i8 + 1;
                    char c3 = charArray[i8];
                    if (owdCd(c3)) {
                        i2 = i9 + 1;
                        char c4 = charArray[i9];
                        if (owdCd(c4)) {
                            byte b = ND89akd[c];
                            byte b2 = ND89akd[c2];
                            byte b3 = ND89akd[c3];
                            byte b4 = ND89akd[c4];
                            int i10 = i5 + 1;
                            bArr[i5] = (byte) ((b << 2) | (b2 >> 4));
                            int i11 = i10 + 1;
                            bArr[i10] = (byte) (((b2 & dm.m) << 4) | ((b3 >> 2) & 15));
                            i5 = i11 + 1;
                            bArr[i11] = (byte) ((b3 << 6) | b4);
                        }
                    }
                }
            }
            return null;
        }
        if (!(i4 == 2 || i4 == 3)) {
            return bArr;
        }
        int i12 = i2 + 1;
        char c5 = charArray[i2];
        if (owdCd(c5)) {
            int i13 = i12 + 1;
            char c6 = charArray[i12];
            if (owdCd(c6)) {
                byte b5 = ND89akd[c5];
                byte b6 = ND89akd[c6];
                if (i4 != 2) {
                    byte b7 = ND89akd[charArray[i13]];
                    if ((b7 & 3) != 0) {
                        return null;
                    }
                    bArr[i5] = (byte) ((b5 << 2) | (b6 >> 4));
                    bArr[i5 + 1] = (byte) (((b7 >> 2) & 15) | ((b6 & dm.m) << 4));
                    return bArr;
                } else if ((b6 & dm.m) != 0) {
                    return null;
                } else {
                    bArr[i5] = (byte) ((b5 << 2) | (b6 >> 4));
                    return bArr;
                }
            }
        }
        return null;
    }
}
