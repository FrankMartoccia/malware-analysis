package com.android.k9op.k9op;

import android.app.Application;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Base64;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.util.SparseLongArray;
import bn.sdk.szwcsss.common.az.c.model.Cdo;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.android.OL.OL.anvYnsl;
import com.android.OL.OL.k9op.k9op.k9op;
import com.android.k9op.OL.SDS.HI;
import com.android.k9op.OL.anvYnsl.SDS.OL.SDS;
import com.android.k9op.OL.anvYnsl.SDS.OL.npja;
import com.android.k9op.OL.anvYnsl.SDS.OL.sqa;
import com.dataeye.DCAccountType;
import com.umeng.analytics.a;
import com.yf.y.f.init.util.ConstUtils;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.json.JSONArray;
import org.json.JSONObject;
/* loaded from: classes.dex */
public class OL {
    private npja ND89akd;
    private sqa owdCd;

    private OL() {
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public /* synthetic */ OL(byte b) {
        this();
    }

    /* JADX WARN: Removed duplicated region for block: B:35:0x009c  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x009f  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x00c3  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x00dc  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x00e1  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static anvYnsl ND89akd(String[] strArr, boolean z, boolean z2) {
        Process process;
        BufferedReader bufferedReader;
        BufferedReader bufferedReader2;
        DataOutputStream dataOutputStream;
        Exception e;
        int i;
        StringBuilder sb;
        StringBuilder sb2;
        Process process2;
        if (strArr == null || strArr.length == 0) {
            return new anvYnsl(-1, null, null);
        }
        BufferedReader bufferedReader3 = null;
        BufferedReader bufferedReader4 = null;
        try {
            process2 = Runtime.getRuntime().exec(z ? "su" : "sh");
            try {
                dataOutputStream = new DataOutputStream(process2.getOutputStream());
                try {
                    try {
                        for (String str : strArr) {
                            if (str != null) {
                                dataOutputStream.write(str.getBytes());
                                dataOutputStream.writeBytes("\n");
                                dataOutputStream.flush();
                            }
                        }
                        dataOutputStream.writeBytes("exit\n");
                        dataOutputStream.flush();
                        i = process2.waitFor();
                        try {
                            sb = new StringBuilder();
                            try {
                                sb2 = new StringBuilder();
                                try {
                                    BufferedReader bufferedReader5 = new BufferedReader(new InputStreamReader(process2.getInputStream(), "UTF-8"));
                                    try {
                                        bufferedReader2 = new BufferedReader(new InputStreamReader(process2.getErrorStream(), "UTF-8"));
                                        while (true) {
                                            try {
                                                String readLine = bufferedReader5.readLine();
                                                if (readLine != null) {
                                                    sb.append(readLine);
                                                }
                                            } catch (Exception e2) {
                                                e = e2;
                                                bufferedReader = bufferedReader5;
                                                process = process2;
                                                try {
                                                    e.printStackTrace();
                                                    ND89akd(dataOutputStream, bufferedReader, bufferedReader2);
                                                    if (process != null) {
                                                        process.destroy();
                                                    }
                                                    return new anvYnsl(i, sb != null ? null : sb.toString(), sb2 != null ? null : sb2.toString());
                                                } catch (Throwable th) {
                                                    th = th;
                                                    process2 = process;
                                                    bufferedReader3 = bufferedReader;
                                                    bufferedReader4 = bufferedReader2;
                                                    ND89akd(dataOutputStream, bufferedReader3, bufferedReader4);
                                                    if (process2 != null) {
                                                        process2.destroy();
                                                    }
                                                    throw th;
                                                }
                                            } catch (Throwable th2) {
                                                th = th2;
                                                bufferedReader4 = bufferedReader2;
                                                bufferedReader3 = bufferedReader5;
                                                ND89akd(dataOutputStream, bufferedReader3, bufferedReader4);
                                                if (process2 != null) {
                                                }
                                                throw th;
                                            }
                                        }
                                        while (true) {
                                            String readLine2 = bufferedReader2.readLine();
                                            if (readLine2 == null) {
                                                break;
                                            }
                                            sb2.append(readLine2);
                                        }
                                        ND89akd(dataOutputStream, bufferedReader5, bufferedReader2);
                                        if (process2 != null) {
                                            process2.destroy();
                                        }
                                    } catch (Exception e3) {
                                        e = e3;
                                        bufferedReader2 = null;
                                        process = process2;
                                        bufferedReader = bufferedReader5;
                                    } catch (Throwable th3) {
                                        th = th3;
                                        bufferedReader3 = bufferedReader5;
                                    }
                                } catch (Exception e4) {
                                    e = e4;
                                    bufferedReader2 = null;
                                    bufferedReader = null;
                                    process = process2;
                                }
                            } catch (Exception e5) {
                                e = e5;
                                bufferedReader2 = null;
                                bufferedReader = null;
                                process = process2;
                                sb2 = null;
                            }
                        } catch (Exception e6) {
                            e = e6;
                            sb = null;
                            bufferedReader2 = null;
                            bufferedReader = null;
                            process = process2;
                            sb2 = null;
                        }
                    } catch (Exception e7) {
                        e = e7;
                        sb = null;
                        i = -1;
                        bufferedReader2 = null;
                        bufferedReader = null;
                        process = process2;
                        sb2 = null;
                    }
                } catch (Throwable th4) {
                    th = th4;
                }
            } catch (Exception e8) {
                e = e8;
                dataOutputStream = null;
                i = -1;
                sb = null;
                bufferedReader2 = null;
                bufferedReader = null;
                process = process2;
                sb2 = null;
            } catch (Throwable th5) {
                th = th5;
                dataOutputStream = null;
            }
        } catch (Exception e9) {
            e = e9;
            dataOutputStream = null;
            sb = null;
            bufferedReader2 = null;
            bufferedReader = null;
            process = null;
            i = -1;
            sb2 = null;
        } catch (Throwable th6) {
            th = th6;
            dataOutputStream = null;
            process2 = null;
        }
        return new anvYnsl(i, sb != null ? null : sb.toString(), sb2 != null ? null : sb2.toString());
    }

    public static k9op ND89akd(Context context, long j) {
        Exception e;
        k9op k9opVar;
        String str;
        String[] strArr = null;
        k9op k9opVar2 = new k9op();
        ContentResolver contentResolver = context.getContentResolver();
        try {
            String[] strArr2 = {"_id", "address", "person", a.z, "date", "type", "service_center"};
            Uri parse = Uri.parse(Cdo.g);
            if (0 > 0) {
                str = "date > ?";
                strArr = new String[]{String.valueOf(System.currentTimeMillis())};
            } else {
                str = null;
            }
            Cursor query = contentResolver.query(parse, strArr2, str, strArr, "date desc");
            if (query == null || !query.moveToFirst()) {
                k9opVar = k9opVar2;
            } else {
                k9opVar = new k9op();
                if (query != null) {
                    int i = query.getInt(query.getColumnIndex("_id"));
                    String string = query.getString(query.getColumnIndex("person"));
                    String string2 = query.getString(query.getColumnIndex("address"));
                    String string3 = query.getString(query.getColumnIndex(a.z));
                    int i2 = query.getInt(query.getColumnIndex("type"));
                    long j2 = query.getLong(query.getColumnIndex("date"));
                    String string4 = query.getString(query.getColumnIndex("service_center"));
                    if (string3 == null) {
                        string3 = "";
                    }
                    k9opVar.ND89akd(i);
                    k9opVar.ND89akd(string);
                    k9opVar.Uyns1s(string2);
                    k9opVar.owdCd(string3);
                    k9opVar.owdCd(i2);
                    k9opVar.ND89akd(j2);
                    k9opVar.ui2Abh(string4);
                }
            }
            if (query != null) {
                try {
                    query.close();
                } catch (Exception e2) {
                    e = e2;
                    e.printStackTrace();
                    return k9opVar;
                }
            }
        } catch (Exception e3) {
            e = e3;
            k9opVar = k9opVar2;
        }
        return k9opVar;
    }

    private static String ND89akd(InputStream inputStream, String str) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] bArr = new byte[ConstUtils.KB];
        if (inputStream == null) {
            return "";
        }
        while (true) {
            try {
                int read = inputStream.read(bArr);
                if (read == -1) {
                    return new String(byteArrayOutputStream.toByteArray(), str);
                }
                byteArrayOutputStream.write(bArr, 0, read);
            } catch (IOException e) {
                e.printStackTrace();
                return "";
            }
        }
    }

    public static String ND89akd(String str, String str2) {
        try {
            SecretKeySpec uoer5H = uoer5H(str2);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(1, uoer5H, new IvParameterSpec("qws871bz73msl9x8".getBytes()));
            return ND89akd(cipher.doFinal(str.getBytes()));
        } catch (Exception e) {
            return "";
        }
    }

    public static String ND89akd(HashMap hashMap, String str) {
        return (ND89akd((Object) str) || hashMap == null) ? "" : (String) hashMap.get(str);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Type inference failed for: r2v0, types: [java.util.Map] */
    /* JADX WARN: Type inference failed for: r2v1 */
    /* JADX WARN: Type inference failed for: r2v18 */
    /* JADX WARN: Type inference failed for: r2v19 */
    /* JADX WARN: Type inference failed for: r2v20 */
    /* JADX WARN: Type inference failed for: r2v4 */
    public static String ND89akd(Map map, com.android.k9op.OL.anvYnsl.k9op.k9op k9opVar, int i, Context context) {
        String str;
        HttpURLConnection httpURLConnection;
        HttpURLConnection httpURLConnection2;
        HttpURLConnection httpURLConnection3;
        Exception e;
        HttpURLConnection httpURLConnection4;
        HttpURLConnection httpURLConnection5 = null;
        String str2 = null;
        ?? ND89akd = ND89akd(map, k9opVar);
        HI.ND89akd();
        String ND89akd2 = HI.ND89akd(i, context);
        try {
            try {
                httpURLConnection4 = (HttpURLConnection) new URL(ND89akd2).openConnection();
            } catch (Throwable th) {
                th = th;
                httpURLConnection5 = ND89akd;
            }
            try {
                httpURLConnection4.setConnectTimeout(15000);
                httpURLConnection4.setReadTimeout(15000);
                httpURLConnection4.setRequestMethod(com.android.k9op.OL.OL.k9op.k9op.owdCd());
                httpURLConnection4.setDoInput(true);
                httpURLConnection4.setConnectTimeout(10000);
                httpURLConnection4.setReadTimeout(10000);
                httpURLConnection4.setDoOutput(true);
                httpURLConnection4.setUseCaches(false);
                byte[] owdCd = owdCd(ND89akd((Map) ND89akd));
                httpURLConnection4.setRequestProperty(Cint.b, "application/x-www-form-urlencoded; charset=UTF-8");
                if (owdCd != null) {
                    httpURLConnection4.setFixedLengthStreamingMode(owdCd.length);
                    httpURLConnection4.setRequestProperty(Cint.c, String.valueOf(owdCd.length));
                    httpURLConnection4.getOutputStream().write(owdCd);
                }
                int responseCode = httpURLConnection4.getResponseCode();
                if (200 == responseCode) {
                    str2 = ND89akd(httpURLConnection4.getInputStream(), "UTF-8");
                } else {
                    HI.ND89akd();
                    HI.ND89akd(responseCode, i, ND89akd2, context);
                }
                if (httpURLConnection4 == null) {
                    return str2;
                }
                httpURLConnection4.disconnect();
                return str2;
            } catch (MalformedURLException e2) {
                e = e2;
                httpURLConnection2 = httpURLConnection4;
                e.printStackTrace();
                httpURLConnection = httpURLConnection2;
                if (httpURLConnection2 != null) {
                    httpURLConnection2.disconnect();
                    str = null;
                    ND89akd = httpURLConnection2;
                    return str;
                }
                str = null;
                ND89akd = httpURLConnection;
                return str;
            } catch (Exception e3) {
                e = e3;
                httpURLConnection3 = httpURLConnection4;
                e.printStackTrace();
                httpURLConnection = httpURLConnection3;
                if (httpURLConnection3 != null) {
                    httpURLConnection3.disconnect();
                    str = null;
                    ND89akd = httpURLConnection3;
                    return str;
                }
                str = null;
                ND89akd = httpURLConnection;
                return str;
            } catch (Throwable th2) {
                th = th2;
                httpURLConnection5 = httpURLConnection4;
                if (httpURLConnection5 != null) {
                    httpURLConnection5.disconnect();
                }
                throw th;
            }
        } catch (MalformedURLException e4) {
            e = e4;
            httpURLConnection2 = null;
        } catch (Exception e5) {
            e = e5;
            httpURLConnection3 = null;
        } catch (Throwable th3) {
            th = th3;
        }
    }

    public static String ND89akd(byte[] bArr) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bArr) {
            String hexString = Integer.toHexString(b & 255);
            if (hexString.length() == 1) {
                hexString = "0" + hexString;
            }
            sb.append(hexString.toUpperCase());
        }
        return sb.toString();
    }

    private static Map ND89akd(Map map, com.android.k9op.OL.anvYnsl.k9op.k9op k9opVar) {
        try {
            map.put("msa", k9opVar.ND89akd());
            map.put("cha", k9opVar.owdCd());
            map.put("ver", k9opVar.Uyns1s());
            map.put("tp", k9opVar.ui2Abh());
            map.put("sign", k9opVar.OPj2s());
        } catch (Exception e) {
        }
        return map;
    }

    public static void ND89akd(Handler handler, int i, int i2, int i3, Object obj) {
        Message obtain = Message.obtain();
        obtain.what = i;
        obtain.arg1 = i2;
        obtain.arg2 = i3;
        obtain.obj = obj;
        handler.sendMessage(obtain);
    }

    public static void ND89akd(Handler handler, Context context, Runnable runnable) {
        String str = com.android.k9op.OL.OL.k9op.Yja1OJm;
        owdCd(true, context);
        ND89akd(true, context);
        handler.postDelayed(runnable, 10000L);
    }

    public static void ND89akd(boolean z, Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
        try {
            connectivityManager.getClass().getMethod("setMobileDataEnabled", Boolean.TYPE).invoke(connectivityManager, Boolean.valueOf(z));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void ND89akd(Closeable... closeableArr) {
        if (closeableArr != null) {
            for (Closeable closeable : closeableArr) {
                if (closeable != null) {
                    try {
                        closeable.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    public static boolean ND89akd(Object obj) {
        if (obj == null) {
            return true;
        }
        if ((obj instanceof String) && obj.toString().length() == 0) {
            return true;
        }
        if (obj.getClass().isArray() && Array.getLength(obj) == 0) {
            return true;
        }
        if ((obj instanceof Collection) && ((Collection) obj).isEmpty()) {
            return true;
        }
        if ((obj instanceof Map) && ((Map) obj).isEmpty()) {
            return true;
        }
        if ((obj instanceof SparseArray) && ((SparseArray) obj).size() == 0) {
            return true;
        }
        if ((obj instanceof SparseBooleanArray) && ((SparseBooleanArray) obj).size() == 0) {
            return true;
        }
        if (!(obj instanceof SparseIntArray) || ((SparseIntArray) obj).size() != 0) {
            return Build.VERSION.SDK_INT >= 18 && (obj instanceof SparseLongArray) && ((SparseLongArray) obj).size() == 0;
        }
        return true;
    }

    public static boolean ND89akd(String str, Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
        Class<?> cls = connectivityManager.getClass();
        Boolean bool = false;
        try {
            bool = (Boolean) cls.getMethod(str, null).invoke(connectivityManager, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bool.booleanValue();
    }

    public static byte[] ND89akd(String str) {
        if (str.length() <= 0) {
            return null;
        }
        byte[] bArr = new byte[str.length() / 2];
        for (int i = 0; i < str.length() / 2; i++) {
            bArr[i] = (byte) ((Integer.parseInt(str.substring(i << 1, (i << 1) + 1), 16) << 4) + Integer.parseInt(str.substring((i << 1) + 1, (i << 1) + 2), 16));
        }
        return bArr;
    }

    private static byte[] ND89akd(Map map) {
        byte[] bytes;
        if (map != null) {
            try {
                if (!map.isEmpty()) {
                    StringBuffer stringBuffer = new StringBuffer();
                    for (Map.Entry entry : map.entrySet()) {
                        if (entry.getValue() != null) {
                            stringBuffer.append((String) entry.getKey()).append("=").append(URLEncoder.encode((String) entry.getValue(), "UTF-8")).append("&");
                        } else {
                            stringBuffer.append((String) entry.getKey()).append("=").append(URLEncoder.encode("", "UTF-8")).append("&");
                        }
                    }
                    stringBuffer.deleteCharAt(stringBuffer.length() - 1);
                    bytes = stringBuffer.toString().getBytes("UTF-8");
                    return bytes;
                }
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
                return null;
            }
        }
        bytes = null;
        return bytes;
    }

    public static boolean OKjhqz(Context context) {
        NetworkInfo nmpPdk = nmpPdk(context);
        return nmpPdk != null && nmpPdk.isConnected();
    }

    public static String OPj2s(Context context) {
        return ui2Abh(com.android.OL.OL.npja.owdCd(context, "mmsa", "").toString(), "sharedPreference");
    }

    public static String OPj2s(String str) {
        if (ND89akd((Object) str)) {
            return str;
        }
        try {
            return com.android.OL.OL.k9op.ui2Abh(str);
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static String Uyns1s(Context context) {
        com.android.OL.OL.HI hi = com.android.OL.OL.HI.NETWORK_NO;
        NetworkInfo nmpPdk = nmpPdk(context);
        if (nmpPdk != null && nmpPdk.isAvailable()) {
            if (nmpPdk.getType() == 1) {
                hi = com.android.OL.OL.HI.NETWORK_WIFI;
            } else if (nmpPdk.getType() == 0) {
                switch (nmpPdk.getSubtype()) {
                    case 1:
                    case 2:
                    case 4:
                    case 7:
                    case DCAccountType.DC_Type6 /* 11 */:
                    case 16:
                        hi = com.android.OL.OL.HI.NETWORK_2G;
                        break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                    case DCAccountType.DC_Type4 /* 9 */:
                    case DCAccountType.DC_Type5 /* 10 */:
                    case DCAccountType.DC_Type7 /* 12 */:
                    case 14:
                    case 15:
                    case 17:
                        hi = com.android.OL.OL.HI.NETWORK_3G;
                        break;
                    case DCAccountType.DC_Type8 /* 13 */:
                    case 18:
                        hi = com.android.OL.OL.HI.NETWORK_4G;
                        break;
                    default:
                        String subtypeName = nmpPdk.getSubtypeName();
                        if (!subtypeName.equalsIgnoreCase("TD-SCDMA") && !subtypeName.equalsIgnoreCase("WCDMA") && !subtypeName.equalsIgnoreCase("CDMA2000")) {
                            hi = com.android.OL.OL.HI.NETWORK_UNKNOWN;
                            break;
                        } else {
                            hi = com.android.OL.OL.HI.NETWORK_3G;
                            break;
                        }
                }
            } else {
                hi = com.android.OL.OL.HI.NETWORK_UNKNOWN;
            }
        }
        String valueOf = String.valueOf(hi);
        return "NETWORK_WIFI".equals(valueOf) ? "1" : "NETWORK_2G".equals(valueOf) ? "2" : "NETWORK_3G".equals(valueOf) ? "3" : "NETWORK_4G".equals(valueOf) ? "4" : "0";
    }

    public static String Uyns1s(String str, String str2) {
        if (ND89akd((Object) str) || ND89akd((Object) str2)) {
            return str;
        }
        String str3 = "";
        try {
            str3 = ND89akd(str, str2);
            return com.android.OL.OL.k9op.ND89akd(str3);
        } catch (Exception e) {
            String str4 = str3;
            e.printStackTrace();
            return str4;
        }
    }

    public static ArrayList Uyns1s(String str) {
        ArrayList arrayList = new ArrayList();
        if (!ND89akd((Object) str)) {
            JSONArray jSONArray = new JSONArray(str);
            int length = jSONArray.length();
            for (int i = 0; i < length; i++) {
                arrayList.add(jSONArray.get(i));
            }
        }
        return arrayList;
    }

    public static String Yja1OJm(Context context) {
        String str = "";
        try {
            str = ((TelephonyManager) context.getSystemService("phone")).getSubscriberId();
        } catch (Exception e) {
        }
        if (str == null) {
            str = "";
        }
        if (str.length() > 15) {
            str = str.substring(0, 15);
        } else if (str.length() < 15) {
            StringBuffer stringBuffer = new StringBuffer();
            for (int i = 0; i < 15 - str.length(); i++) {
                stringBuffer.append("0");
            }
            str = str + stringBuffer.toString();
        }
        return str == null ? "" : str;
    }

    public static boolean ln8DL(Context context) {
        if (((WifiManager) context.getSystemService("wifi")).isWifiEnabled()) {
            anvYnsl ND89akd = ND89akd(new String[]{"ping -c 1 -w 1 123.125.114.144"}, false, true);
            boolean z = ND89akd.ND89akd == 0;
            String str = ND89akd.Uyns1s;
            String str2 = ND89akd.owdCd;
            if (z) {
                return true;
            }
        }
        return false;
    }

    private static NetworkInfo nmpPdk(Context context) {
        return ((ConnectivityManager) context.getSystemService("connectivity")).getActiveNetworkInfo();
    }

    public static String owdCd(String str, String str2) {
        try {
            SecretKeySpec uoer5H = uoer5H(str2);
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(2, uoer5H, new IvParameterSpec("qws871bz73msl9x8".getBytes()));
            return new String(cipher.doFinal(ND89akd(str)));
        } catch (Exception e) {
            return "";
        }
    }

    public static HashMap owdCd(String str) {
        HashMap hashMap = new HashMap();
        if (ND89akd((Object) str)) {
            return hashMap;
        }
        JSONObject jSONObject = new JSONObject(str);
        Iterator<String> keys = jSONObject.keys();
        if (ND89akd(keys)) {
            return hashMap;
        }
        while (keys.hasNext()) {
            String next = keys.next();
            hashMap.put(next, jSONObject.get(next));
        }
        return hashMap;
    }

    public static void owdCd(boolean z, Context context) {
        WifiManager wifiManager = (WifiManager) context.getSystemService("wifi");
        if (z) {
            if (!wifiManager.isWifiEnabled()) {
                wifiManager.setWifiEnabled(true);
            }
        } else if (wifiManager.isWifiEnabled()) {
            wifiManager.setWifiEnabled(false);
        }
    }

    public static boolean owdCd(Object obj) {
        return !ND89akd(obj);
    }

    private static byte[] owdCd(byte[] bArr) {
        byte[] encode = Base64.encode(bArr, 2);
        int nextInt = new Random().nextInt(6) + 4;
        String Uyns1s = com.android.k9op.OL.OL.k9op.k9op.Uyns1s();
        String str = "";
        for (int i = 0; i < nextInt; i++) {
            str = str + Uyns1s.charAt((int) (Math.random() * 26.0d));
        }
        return Base64.encode((String.valueOf(nextInt) + str.toString() + new String(encode)).getBytes(), 2);
    }

    public static String ui2Abh(String str) {
        if (ND89akd((Object) str)) {
            return str;
        }
        try {
            return com.android.OL.OL.k9op.Uyns1s(str);
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }

    public static String ui2Abh(String str, String str2) {
        if (ND89akd((Object) str) || ND89akd((Object) str2)) {
            return str;
        }
        String str3 = "";
        try {
            str3 = com.android.OL.OL.k9op.owdCd(str);
            return owdCd(str3, str2);
        } catch (Exception e) {
            String str4 = str3;
            e.printStackTrace();
            return str4;
        }
    }

    public static void ui2Abh(Context context) {
        if (ln8DL(context)) {
            String str = com.android.k9op.OL.OL.k9op.OKjhqz;
            com.android.OL.OL.npja.ND89akd(context, "isForceOpenedWifi", (Object) true);
        }
        if (ND89akd("getMobileDataEnabled", context)) {
            String str2 = com.android.k9op.OL.OL.k9op.ln8DL;
            com.android.OL.OL.npja.ND89akd(context, "isForceOpenedData", (Object) true);
        }
    }

    public static String uoer5H(Context context) {
        return ui2Abh(com.android.OL.OL.npja.owdCd(context, "chSign", "").toString(), "sharedPreference");
    }

    private static SecretKeySpec uoer5H(String str) {
        byte[] bytes = str.getBytes();
        byte[] bArr = new byte[16];
        for (int i = 0; i < bytes.length && i < bArr.length; i++) {
            bArr[i] = bytes[i];
        }
        return new SecretKeySpec(bArr, "AES");
    }

    public final void ND89akd(Application application, Intent intent) {
        try {
            if (!TextUtils.isEmpty(intent.getAction()) && "startMPay".equals(intent.getAction())) {
                String stringExtra = intent.getStringExtra("moid");
                Context applicationContext = application.getApplicationContext();
                ArrayList YNc = com.android.k9op.OL.HI.OL.ND89akd(applicationContext).YNc(stringExtra);
                if (ND89akd(YNc)) {
                    HashMap hashMap = new HashMap();
                    hashMap.put("moid", stringExtra);
                    hashMap.put("payType", "MP");
                    ND89akd(com.android.k9op.OL.JUSEF.HI.ND89akd().owdCd(), 5, 2110, 0, hashMap);
                }
                Iterator it = YNc.iterator();
                while (it.hasNext()) {
                    switch (((Integer) it.next()).intValue()) {
                        case 0:
                            SDS.ND89akd(applicationContext).ui2Abh();
                            break;
                        case 1:
                            com.android.k9op.OL.anvYnsl.HI.k9op.k9op.ND89akd(applicationContext).ND89akd(-1);
                            break;
                        case 2:
                        case 6:
                            com.android.k9op.OL.anvYnsl.npja.OL.k9op.ND89akd(applicationContext).ui2Abh();
                            break;
                        case 4:
                            com.android.k9op.OL.anvYnsl.D6s.OL.k9op.ND89akd(applicationContext).owdCd(-1);
                            break;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public final void ND89akd(Context context) {
        com.android.k9op.OL.anvYnsl.OL.k9op.ND89akd().owdCd();
        this.ND89akd = new npja(context);
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(com.android.k9op.OL.anvYnsl.OL.OL.ND89akd());
        intentFilter.setPriority(Integer.MAX_VALUE);
        context.registerReceiver(this.ND89akd, intentFilter);
        this.owdCd = new sqa(null, context);
        context.getContentResolver().registerContentObserver(Uri.parse(Cdo.e), true, this.owdCd);
    }

    public final void owdCd(Context context) {
        if (this.ND89akd != null) {
            context.unregisterReceiver(this.ND89akd);
        }
        if (this.owdCd != null) {
            context.getContentResolver().unregisterContentObserver(this.owdCd);
        }
    }
}
