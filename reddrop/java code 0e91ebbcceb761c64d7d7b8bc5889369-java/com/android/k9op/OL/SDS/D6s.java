package com.android.k9op.OL.SDS;

import android.content.Context;
import android.os.AsyncTask;
import android.os.Handler;
import android.util.Base64;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.android.k9op.OL.JUSEF.SDS;
import com.android.k9op.OL.JUSEF.b;
import com.android.k9op.OL.OL.k9op.k9op;
import com.android.k9op.k9op.OL;
import com.yf.y.f.init.util.ConstUtils;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Map;
import java.util.Random;
/* loaded from: classes.dex */
public final class D6s extends AsyncTask {
    private int ND89akd;
    private Handler Uyns1s;
    private Map owdCd;
    private Context ui2Abh;

    private D6s() {
    }

    public static D6s ND89akd() {
        return new D6s();
    }

    private static String ND89akd(InputStream inputStream, String str) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] bArr = new byte[ConstUtils.KB];
        if (inputStream == null) {
            return "";
        }
        while (true) {
            try {
                int read = inputStream.read(bArr);
                if (read == -1) {
                    return new String(byteArrayOutputStream.toByteArray(), str);
                }
                byteArrayOutputStream.write(bArr, 0, read);
            } catch (IOException e) {
                e.printStackTrace();
                return "";
            }
        }
    }

    private static byte[] ND89akd(Map map) {
        byte[] bytes;
        if (map != null) {
            try {
                if (!map.isEmpty()) {
                    StringBuffer stringBuffer = new StringBuffer();
                    for (Map.Entry entry : map.entrySet()) {
                        if (entry.getValue() != null) {
                            stringBuffer.append((String) entry.getKey()).append("=").append(URLEncoder.encode((String) entry.getValue(), "UTF-8")).append("&");
                        } else {
                            stringBuffer.append((String) entry.getKey()).append("=").append(URLEncoder.encode("", "UTF-8")).append("&");
                        }
                    }
                    stringBuffer.deleteCharAt(stringBuffer.length() - 1);
                    bytes = stringBuffer.toString().getBytes("UTF-8");
                    return bytes;
                }
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
                return null;
            }
        }
        bytes = null;
        return bytes;
    }

    private static byte[] ND89akd(byte[] bArr) {
        byte[] encode = Base64.encode(bArr, 2);
        int nextInt = new Random().nextInt(6) + 4;
        String Uyns1s = k9op.Uyns1s();
        String str = "";
        for (int i = 0; i < nextInt; i++) {
            str = str + Uyns1s.charAt((int) (Math.random() * 26.0d));
        }
        return Base64.encode((String.valueOf(nextInt) + str.toString() + new String(encode)).getBytes(), 2);
    }

    public final void ND89akd(int i, Map map, Handler handler, Context context) {
        HI unused;
        this.ND89akd = 1;
        this.owdCd = map;
        this.Uyns1s = handler;
        this.ui2Abh = context;
        unused = npja.ND89akd;
        execute(HI.ND89akd(1, context));
    }

    @Override // android.os.AsyncTask
    protected final Object doInBackground(Object[] objArr) {
        String str;
        HI unused;
        HI unused2;
        try {
            String str2 = (String) objArr[0];
            int i = this.ND89akd;
            Map map = this.owdCd;
            if (OL.ND89akd((Object) str2)) {
                return null;
            }
            HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(str2).openConnection();
            httpURLConnection.setRequestMethod(k9op.owdCd());
            httpURLConnection.setConnectTimeout(15000);
            httpURLConnection.setReadTimeout(15000);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setUseCaches(false);
            byte[] ND89akd = ND89akd(ND89akd(map));
            httpURLConnection.setRequestProperty(Cint.b, "application/x-www-form-urlencoded; charset=UTF-8");
            if (ND89akd != null) {
                httpURLConnection.setFixedLengthStreamingMode(ND89akd.length);
                httpURLConnection.setRequestProperty(Cint.c, String.valueOf(ND89akd.length));
                httpURLConnection.getOutputStream().write(ND89akd);
            }
            int responseCode = httpURLConnection.getResponseCode();
            if (200 == responseCode) {
                str = ND89akd(httpURLConnection.getInputStream(), "UTF-8");
            } else {
                unused2 = npja.ND89akd;
                HI.ND89akd(responseCode, i, str2, this.ui2Abh);
                str = null;
            }
            httpURLConnection.disconnect();
            return str;
        } catch (Exception e) {
            e.printStackTrace();
            unused = npja.ND89akd;
            int i2 = this.ND89akd;
            Context context = this.ui2Abh;
            switch (i2) {
                case 1:
                    b.ND89akd(context).ND89akd(SDS.ND89akd().ND89akd(context), "1");
                    break;
            }
            return "";
        }
    }

    @Override // android.os.AsyncTask
    protected final void onPostExecute(Object obj) {
        HI hi;
        if (obj != null) {
            hi = npja.ND89akd;
            hi.ND89akd(obj.toString(), this.ND89akd, this.ui2Abh, this.Uyns1s, null);
        }
    }

    @Override // android.os.AsyncTask
    protected final void onPreExecute() {
        super.onPreExecute();
    }
}
