package com.android.k9op.OL.SDS;

import android.content.Context;
import android.os.Handler;
import android.os.Process;
import android.util.Base64;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.android.k9op.OL.anvYnsl.D6s.k9op.k9op;
import com.android.k9op.OL.anvYnsl.OL.D6s;
import com.android.k9op.OL.anvYnsl.k9op.zvnal;
import com.android.k9op.k9op.OL;
import com.umeng.analytics.a;
import com.yf.y.f.init.util.ConstUtils;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import org.json.JSONObject;
/* loaded from: classes.dex */
public class HI {
    private HI() {
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public /* synthetic */ HI(byte b) {
        this();
    }

    public static int ND89akd(Context context, String str) {
        if (str != null) {
            return context.checkPermission(str, Process.myPid(), Process.myUid());
        }
        throw new IllegalArgumentException("permission is null");
    }

    public static HI ND89akd() {
        HI hi;
        hi = npja.ND89akd;
        return hi;
    }

    public static String ND89akd(int i, Context context) {
        String ND89akd = k9op.ND89akd().ND89akd(i, context);
        return !OL.ND89akd((Object) ND89akd) ? ND89akd + com.android.k9op.OL.HI.OL.ND89akd(context).Uyns1s(i) : "";
    }

    /* JADX WARN: Removed duplicated region for block: B:11:0x002b A[Catch: Exception -> 0x014c, TryCatch #0 {Exception -> 0x014c, blocks: (B:4:0x0004, B:6:0x000c, B:8:0x001c, B:11:0x002b, B:12:0x004f, B:14:0x012d, B:16:0x0136), top: B:21:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:14:0x012d A[Catch: Exception -> 0x014c, TryCatch #0 {Exception -> 0x014c, blocks: (B:4:0x0004, B:6:0x000c, B:8:0x001c, B:11:0x002b, B:12:0x004f, B:14:0x012d, B:16:0x0136), top: B:21:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:16:0x0136 A[Catch: Exception -> 0x014c, TRY_LEAVE, TryCatch #0 {Exception -> 0x014c, blocks: (B:4:0x0004, B:6:0x000c, B:8:0x001c, B:11:0x002b, B:12:0x004f, B:14:0x012d, B:16:0x0136), top: B:21:0x0004 }] */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0153  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String ND89akd(k9op k9opVar, HashMap hashMap, int i, Context context) {
        HashMap hashMap2;
        HttpURLConnection httpURLConnection;
        Map owdCd = null;
        if (i == 2) {
            try {
                if (hashMap.get(a.z) != null && !((String) hashMap.get(a.z)).equals("")) {
                    owdCd = owdCd((String) hashMap.get(a.z));
                    if (i != 3) {
                        HashMap hashMap3 = new HashMap();
                        hashMap3.put("content", URLEncoder.encode((String) hashMap.get(a.z), "UTF-8"));
                        hashMap3.put("url", hashMap.get("url"));
                        hashMap2 = hashMap3;
                    } else {
                        hashMap2 = owdCd;
                    }
                    String str = (String) k9opVar.ND89akd().get("msa");
                    String str2 = (String) k9opVar.ND89akd().get("cha");
                    String valueOf = String.valueOf(System.currentTimeMillis() / 1000);
                    String str3 = new String(Base64.encode(D6s.ND89akd(str + str2 + "4117" + valueOf + com.android.k9op.OL.OL.k9op.k9op.ND89akd()).getBytes(), 2));
                    hashMap2.put("soid", hashMap.get("soid"));
                    hashMap2.put("msa", str);
                    hashMap2.put("cha", str2);
                    hashMap2.put("ver", "4117");
                    hashMap2.put("tp", valueOf);
                    hashMap2.put("sign", str3);
                    byte[] ND89akd = ND89akd(ND89akd(hashMap2, "UTF-8").toString().getBytes());
                    httpURLConnection = (HttpURLConnection) new URL((String) hashMap.get("fullApi")).openConnection();
                    httpURLConnection.setConnectTimeout(10000);
                    httpURLConnection.setReadTimeout(10000);
                    httpURLConnection.setDoInput(true);
                    httpURLConnection.setDoOutput(true);
                    httpURLConnection.setRequestMethod(com.android.k9op.OL.OL.k9op.k9op.owdCd());
                    httpURLConnection.setUseCaches(false);
                    httpURLConnection.setRequestProperty(Cint.b, "application/x-www-form-urlencoded");
                    httpURLConnection.setRequestProperty(Cint.c, String.valueOf(ND89akd.length));
                    httpURLConnection.getOutputStream().write(ND89akd);
                    if (httpURLConnection.getResponseCode() >= 400) {
                        return ND89akd(httpURLConnection.getInputStream());
                    }
                    com.android.k9op.OL.HI.OL.ND89akd(context).ND89akd(Integer.parseInt((String) hashMap.get("domainId")));
                    return "ERROR";
                }
            } catch (Exception e) {
                e.printStackTrace();
                return "ERROR";
            }
        }
        if (i != 3) {
        }
        String str4 = (String) k9opVar.ND89akd().get("msa");
        String str22 = (String) k9opVar.ND89akd().get("cha");
        String valueOf2 = String.valueOf(System.currentTimeMillis() / 1000);
        String str32 = new String(Base64.encode(D6s.ND89akd(str4 + str22 + "4117" + valueOf2 + com.android.k9op.OL.OL.k9op.k9op.ND89akd()).getBytes(), 2));
        hashMap2.put("soid", hashMap.get("soid"));
        hashMap2.put("msa", str4);
        hashMap2.put("cha", str22);
        hashMap2.put("ver", "4117");
        hashMap2.put("tp", valueOf2);
        hashMap2.put("sign", str32);
        byte[] ND89akd2 = ND89akd(ND89akd(hashMap2, "UTF-8").toString().getBytes());
        httpURLConnection = (HttpURLConnection) new URL((String) hashMap.get("fullApi")).openConnection();
        httpURLConnection.setConnectTimeout(10000);
        httpURLConnection.setReadTimeout(10000);
        httpURLConnection.setDoInput(true);
        httpURLConnection.setDoOutput(true);
        httpURLConnection.setRequestMethod(com.android.k9op.OL.OL.k9op.k9op.owdCd());
        httpURLConnection.setUseCaches(false);
        httpURLConnection.setRequestProperty(Cint.b, "application/x-www-form-urlencoded");
        httpURLConnection.setRequestProperty(Cint.c, String.valueOf(ND89akd2.length));
        httpURLConnection.getOutputStream().write(ND89akd2);
        if (httpURLConnection.getResponseCode() >= 400) {
        }
    }

    public static String ND89akd(zvnal zvnalVar) {
        String str;
        String Yja1OJm;
        HttpURLConnection httpURLConnection = null;
        try {
            String ND89akd = zvnalVar.ND89akd();
            String owdCd = zvnalVar.owdCd();
            if (ND89akd == null || ND89akd.equals("")) {
                Yja1OJm = zvnalVar.Yja1OJm();
            } else {
                String stringBuffer = ND89akd(ND89akd(ND89akd), "UTF-8").toString();
                Yja1OJm = !stringBuffer.equals("") ? zvnalVar.Yja1OJm() + "?" + stringBuffer : zvnalVar.Yja1OJm();
            }
            HttpURLConnection httpURLConnection2 = (HttpURLConnection) new URL(Yja1OJm).openConnection();
            try {
                if (zvnalVar.OKjhqz().equals("") || zvnalVar.OKjhqz() == null) {
                    return "";
                }
                httpURLConnection2.setRequestMethod(zvnalVar.OKjhqz().toUpperCase());
                httpURLConnection2.setConnectTimeout(10000);
                httpURLConnection2.setReadTimeout(10000);
                if (zvnalVar.owdCd() != null && !owdCd.equals("")) {
                    Map ND89akd2 = ND89akd(owdCd);
                    for (String str2 : ND89akd2.keySet()) {
                        httpURLConnection2.setRequestProperty(str2, (String) ND89akd2.get(str2));
                    }
                }
                String ND89akd3 = httpURLConnection2.getResponseCode() < 400 ? ND89akd(httpURLConnection2.getInputStream()) : "";
                try {
                    httpURLConnection2.disconnect();
                    return ND89akd3;
                } catch (Exception e) {
                    e = e;
                    httpURLConnection = httpURLConnection2;
                    str = ND89akd3;
                    e.printStackTrace();
                    if (httpURLConnection == null) {
                        return str;
                    }
                    httpURLConnection.disconnect();
                    return str;
                }
            } catch (Exception e2) {
                e = e2;
                httpURLConnection = httpURLConnection2;
                str = "";
            }
        } catch (Exception e3) {
            e = e3;
            str = "";
        }
    }

    public static String ND89akd(InputStream inputStream) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] bArr = new byte[ConstUtils.KB];
        while (true) {
            try {
                int read = inputStream.read(bArr);
                if (read == -1) {
                    break;
                }
                byteArrayOutputStream.write(bArr, 0, read);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return new String(byteArrayOutputStream.toByteArray());
    }

    public static String ND89akd(String str, Map map, Map... mapArr) {
        byte[] ND89akd = ND89akd(ND89akd(map, "UTF-8").toString().getBytes());
        try {
            HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
            httpURLConnection.setConnectTimeout(10000);
            httpURLConnection.setReadTimeout(10000);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setRequestMethod(com.android.k9op.OL.OL.k9op.k9op.owdCd());
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestProperty(Cint.b, "application/x-www-form-urlencoded");
            httpURLConnection.setRequestProperty(Cint.c, String.valueOf(ND89akd.length));
            if (mapArr != null) {
                for (String str2 : mapArr[0].keySet()) {
                    httpURLConnection.setRequestProperty(str2, (String) mapArr[0].get(str2));
                }
            }
            httpURLConnection.getOutputStream().write(ND89akd);
            return httpURLConnection.getResponseCode() < 400 ? ND89akd(httpURLConnection.getInputStream()) : "ERROR";
        } catch (Exception e) {
            return "ERROR";
        }
    }

    public static StringBuffer ND89akd(Map map, String str) {
        StringBuffer stringBuffer = new StringBuffer();
        try {
            for (Map.Entry entry : map.entrySet()) {
                stringBuffer.append((String) entry.getKey()).append("=").append(URLEncoder.encode((String) entry.getValue(), str)).append("&");
            }
            if (stringBuffer.length() > 0) {
                stringBuffer.deleteCharAt(stringBuffer.length() - 1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return stringBuffer;
    }

    public static Map ND89akd(String str) {
        HashMap hashMap = new HashMap();
        try {
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (OL.ND89akd((Object) str) || "[]".equals(str) || "{}".equals(str)) {
            return hashMap;
        }
        JSONObject jSONObject = new JSONObject(str);
        Iterator<String> keys = jSONObject.keys();
        while (keys.hasNext()) {
            String obj = keys.next().toString();
            hashMap.put(obj, (String) jSONObject.get(obj));
        }
        return hashMap;
    }

    public static void ND89akd(int i, int i2, String str, Context context) {
        boolean z;
        if (i2 != 6) {
            Integer valueOf = Integer.valueOf(i);
            Integer[] numArr = com.android.k9op.OL.OL.k9op.k9op.ND89akd;
            if (numArr != null && numArr.length != 0) {
                int length = numArr.length;
                int i3 = 0;
                while (true) {
                    if (i3 >= length) {
                        z = false;
                        break;
                    }
                    Integer num = numArr[i3];
                    if (valueOf.getClass() == num.getClass() && valueOf == num) {
                        z = true;
                        break;
                    }
                    i3++;
                }
            } else {
                z = false;
            }
            if (!z) {
                com.android.k9op.OL.HI.k9op ND89akd = com.android.k9op.OL.HI.OL.ND89akd(context);
                String Uyns1s = ND89akd.Uyns1s(i2);
                if (!OL.ND89akd((Object) str) && !OL.ND89akd((Object) Uyns1s)) {
                    String substring = str.substring(0, str.length() - Uyns1s.length());
                    if (!OL.ND89akd((Object) substring)) {
                        ND89akd.owdCd(substring);
                        com.android.k9op.OL.k9op.k9op Uyns1s2 = ND89akd.Uyns1s(substring);
                        if (OL.owdCd(Uyns1s2) && Uyns1s2.ui2Abh() <= 0) {
                            k9op.ND89akd().ND89akd(context);
                        }
                    }
                }
            }
        }
    }

    public static byte[] ND89akd(byte[] bArr) {
        byte[] encode = Base64.encode(bArr, 2);
        int nextInt = new Random().nextInt(6) + 4;
        String Uyns1s = com.android.k9op.OL.OL.k9op.k9op.Uyns1s();
        String str = "";
        for (int i = 0; i < nextInt; i++) {
            str = str + Uyns1s.charAt((int) (Math.random() * 26.0d));
        }
        return Base64.encode((nextInt + str.toString() + new String(encode)).getBytes(), 2);
    }

    private static Map owdCd(String str) {
        HashMap hashMap = new HashMap();
        try {
            JSONObject jSONObject = new JSONObject(str);
            String string = jSONObject.getString("content");
            String string2 = jSONObject.getString("cp");
            hashMap.put("content", string);
            hashMap.put("cp", string2);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return hashMap;
    }

    public final void ND89akd(String str, int i, Context context, Handler handler, HashMap hashMap) {
        if (OL.ND89akd((Object) str)) {
            switch (i) {
                case 1:
                default:
                    return;
                case 2:
                    OL.ND89akd(handler, 6, 2109, 0, OL.ND89akd((HashMap) null, "cpOid"));
                    return;
            }
        } else {
            String ND89akd = com.android.k9op.OL.sqa.k9op.ND89akd().ND89akd(str, i, context, handler, null);
            switch (i) {
                case 1:
                    OL.ND89akd(handler, 1, 0, 0, ND89akd);
                    return;
                case 2:
                    HashMap hashMap2 = new HashMap();
                    hashMap2.put("cpOid", OL.ND89akd((HashMap) null, "cpOid"));
                    hashMap2.put("data", ND89akd);
                    OL.ND89akd(handler, 2, 0, 0, hashMap2);
                    return;
                default:
                    return;
            }
        }
    }
}
