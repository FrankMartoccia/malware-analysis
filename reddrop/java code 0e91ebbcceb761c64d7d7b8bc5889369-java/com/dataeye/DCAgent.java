package com.dataeye;

import android.content.Context;
import android.text.TextUtils;
import com.dataeye.c.a;
import com.dataeye.c.aa;
import com.dataeye.c.ae;
import com.dataeye.c.af;
import com.dataeye.c.aj;
import com.dataeye.c.ak;
import com.dataeye.c.c;
import com.dataeye.c.r;
import com.dataeye.c.w;
import com.dataeye.c.x;
import java.util.HashMap;
/* loaded from: classes.dex */
public class DCAgent {
    static {
        new r().a();
    }

    public static String getUID() {
        if (!c.c) {
            x.c("Invoke DCAgent.getUID() fail , DataEye SDK need init first! \n Maybe you can try to invoke DCAccont.getUid(Context)");
        }
        w.a("DCAgent_getUid");
        return c.c ? a.b() : "";
    }

    public static String getUID(Context context) {
        w.a("DCAgent_getUid");
        return c.c ? a.b() : a.c(context);
    }

    public static void initConfig(Context context, String appId, String channelId) {
        if (c.c) {
            x.c("Invoke DCAgent.setVersion() must before DataEye SDK init");
            return;
        }
        try {
            c.a(context, appId, channelId);
        } catch (Exception e) {
            x.b("DataEye SDK init error , reason:" + e.getMessage(), e);
        }
        w.a("DCAgent_initConfig");
    }

    public static void onKillProcessOrExit() {
        ak.c();
        if (a.g() != null) {
            if (a.m != null) {
                a.m.c();
            }
            c.a(!a.a());
        } else {
            c.m();
        }
        w.a("DCAgent_onKillProcessOrExit");
    }

    public static void onPause(Context context) {
        if (c.c) {
            c.d();
            new ae(context).start();
            if (a.m != null) {
                a.m.c();
            }
        }
        w.a("DCAgent_onPause");
    }

    public static void onResume(Context context) {
        try {
            if (!c.c) {
                c.a(context, (String) null, (String) null);
            }
            if (c.c) {
                c.a();
                ak.b();
            }
            w.a("DCAgent_onResume");
        } catch (Throwable th) {
        }
    }

    public static void reportError(String title, String error) {
        if (!c.c) {
            x.c("Invoke DCAgent.reportError() fail , DataEye SDK need init first!");
        } else if (DCConfigParams.getParameterBoolean("DESelf_Key_ForBidReportError", false)) {
            x.a("DataEye SDK Online Config : forbid report error to webserver ");
        } else {
            HashMap hashMap = new HashMap();
            hashMap.put("errorTime", new StringBuilder().append(af.b()).toString());
            if (!TextUtils.isEmpty(title)) {
                hashMap.put("title", af.i(title));
            } else {
                hashMap.put("title", "");
            }
            if (!TextUtils.isEmpty(error)) {
                hashMap.put("content", af.i(error));
            } else {
                hashMap.put("content", "");
            }
            DCEvent.onEvent("_DESelf_UserDefined_ErrorReport_3", hashMap);
            w.a("DCAgent_reportError");
        }
    }

    public static void reportError(String title, Throwable e) {
        if (!c.c) {
            x.c("Invoke DCAgent.reportError() fail , DataEye SDK need init first!");
        } else if (DCConfigParams.getParameterBoolean("DESelf_Key_ForBidReportError", false)) {
            x.a("DataEye SDK Online Config : forbid report error to webserver ");
        } else {
            DCEvent.onEvent("_DESelf_UserDefined_ErrorReport_3", aj.a(title, e));
            w.a("DCAgent_reportError");
        }
    }

    public static void setChannelConfig(int configFrom) {
        if (c.c) {
            x.c("Invoke DCAgent.setChannelConfig() must before DataEye SDK init");
        }
    }

    public static void setDebugMode(boolean isDebug) {
        if (c.c) {
            x.c("Invoke DCAgent.setDebugMode() must before DataEye SDK init");
        }
        x.f823a = isDebug;
        w.a("DCAgent_setDebugMode");
    }

    public static void setReportMode(int reportMode) {
        if (c.c) {
            x.c("Invoke DCAgent.setReportMode() must before DataEye SDK init");
            return;
        }
        if (reportMode == 2) {
            c.k = 2;
        } else {
            c.k = 1;
        }
        w.a("DCAgent_setReportMode");
    }

    public static void setUploadInterval(int second) {
        if (c.c) {
            x.c("Invoke DCAgent.setUploadInterval() must before DataEye SDK init");
        } else if (second <= 30 || second >= 43200) {
            x.b("Warring: Upload Interval must be greater than 30 seconds and less than 12 hours ");
        } else {
            c.q = second * 1000;
            w.a("DCAgent_setUploadInterval");
        }
    }

    public static void setVersion(String appVersion) {
        if (!TextUtils.isEmpty(appVersion)) {
            c.m = appVersion;
        }
        if (c.c) {
            aa.a(appVersion);
        }
        w.a("DCAgent_setVersion");
    }

    public static void uploadNow() {
        if (!c.c) {
            x.b("Invoke DCAgent.uploadNow() Ignored,  DataEye SDK need init first");
            return;
        }
        if (c.c) {
            x.b("Invoke DCAgent.uploadNow success,  atï¼š" + System.currentTimeMillis());
            if (a.c()) {
                c.a(false);
            } else {
                c.m();
            }
        }
        w.a("DCAgent_uploadNow");
    }
}
