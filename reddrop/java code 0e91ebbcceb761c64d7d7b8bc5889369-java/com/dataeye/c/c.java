package com.dataeye.c;

import android.app.ActivityManager;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.os.Process;
import android.text.TextUtils;
import com.dataeye.DCConfigParams;
import com.dataeye.DCEvent;
import com.dataeye.a.a;
import com.dataeye.a.e;
import com.dataeye.a.g;
import com.dataeye.a.h;
import com.dataeye.a.i;
import com.dataeye.a.j;
import com.dataeye.a.k;
import com.dataeye.a.l;
import com.yuanlang.pay.plugin.libs.x;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
/* loaded from: classes.dex */
public class c {
    public static long e;
    public static long f;
    public static long g;
    public static long h;
    private static Context r;

    /* renamed from: a  reason: collision with root package name */
    static final String[] f810a = {"android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE", "android.permission.READ_PHONE_STATE"};
    public static boolean b = false;
    public static boolean c = false;
    public static long d = 30000;
    public static boolean i = false;
    public static int j = af.b();
    public static int k = 1;
    public static int l = 0;
    public static String m = "";
    public static LinkedList n = new LinkedList();
    public static String o = "rd.gdatacube.net";
    public static int p = 0;
    public static long q = x.d;

    public static int a(long j2) {
        return (int) (j2 / 1000);
    }

    public static e a(a aVar, long j2, SQLiteDatabase sQLiteDatabase, boolean z, boolean z2) {
        e eVar = new e();
        a(aVar, eVar, z2);
        a(aVar, j2, z, z2, eVar);
        a(aVar.f781a, sQLiteDatabase, z2, eVar);
        return eVar;
    }

    public static final j a(a aVar, long j2) {
        int a2 = a(j2);
        return new j(a2, ((int) ((System.currentTimeMillis() / 1000) - a2)) + 1, aVar.g, !a.a(aVar));
    }

    public static String a(Context context, int i2) {
        List<ActivityManager.RunningAppProcessInfo> runningAppProcesses = ((ActivityManager) context.getSystemService("activity")).getRunningAppProcesses();
        if (runningAppProcesses == null) {
            return null;
        }
        for (ActivityManager.RunningAppProcessInfo runningAppProcessInfo : runningAppProcesses) {
            if (runningAppProcessInfo.pid == i2) {
                return runningAppProcessInfo.processName;
            }
        }
        return null;
    }

    public static final void a() {
        if (e == 0 || System.currentTimeMillis() - h > d || System.currentTimeMillis() - h <= 0) {
            b();
        }
    }

    public static void a(int i2) {
        g = System.currentTimeMillis();
        ac.a("DC_SPENDTIMEINLEVELS_" + i2);
    }

    public static void a(Context context) {
        if (r == null) {
            r = context.getApplicationContext();
        }
    }

    public static void a(Context context, String str) {
        String c2 = am.c(context);
        x.a("此时取到sim卡编号:" + c2);
        if (TextUtils.isEmpty(c2)) {
            String d2 = am.d(context);
            x.a("此时取不到sim卡编号，通过语言来设置:" + d2);
            if (!TextUtils.isEmpty(d2) && d2.equals("zh-cn")) {
                b(context, str);
            }
        } else if (c2.startsWith("460") || c2.startsWith("461")) {
            b(context, str);
        }
    }

    public static void a(Context context, String str, String str2) {
        if (context == null) {
            x.c("DataEye Sdk init fail ,Please check  Context is null !");
            return;
        }
        try {
            String a2 = a(context, Process.myPid());
            x.b("Now Process name:" + a2);
            if (TextUtils.isEmpty(a2) || !a2.equals(context.getPackageName())) {
                x.b("DataEye SDK init fail , Please init in the Main process. ");
            } else {
                a(context);
                x.a();
                if (!c) {
                    if (!af.a(context, f810a)) {
                        x.c("DataEye SDK init fail , Please check uses-permission in AndroidManifest.xml. ");
                    } else {
                        aa.a(context, str, str2);
                        if (aa.f799a) {
                            ac.a(context, aa.c);
                            v.a(context, aa.c);
                            i();
                            aa.a(m);
                            s.b();
                            s.a(new d());
                            s.a(true, null);
                            h();
                            a.b(context);
                            aj.a(context);
                            o();
                            new Thread(new e(context, str)).start();
                            x.b("DataEye SDK init success!  AppId:" + aa.c + "; ChannelId:" + aa.d + "; AppVersion:" + aa.b + "; ReportMode:" + (k == 1 ? "DC_DEFAULT" : "DC_AFTER_LOGIN") + "; OpenAdTracking:" + b);
                            c = true;
                        }
                    }
                }
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }

    private static void a(a aVar, long j2, boolean z, boolean z2, e eVar) {
        if (z || z2) {
            return;
        }
        if (j2 <= 0) {
            x.a("DataEye SDK  loginTime is empty ");
            return;
        }
        eVar.p = new ArrayList();
        eVar.p.add(a(aVar, j2));
    }

    private static void a(a aVar, e eVar, boolean z) {
        eVar.b = aa.c;
        eVar.c = aa.d;
        eVar.s = aa.b;
        eVar.d = a.b();
        if (!z) {
            eVar.e = aVar.f781a;
            eVar.f = aVar.d;
            eVar.g = aVar.e;
            eVar.h = aVar.f;
            eVar.i = aVar.h;
        }
        eVar.j = aa.e.i;
        eVar.k = aa.e.h;
        eVar.l = aa.e.e;
        eVar.n = af.e(r);
        eVar.u = "";
        eVar.x = aVar.l;
        eVar.w = aVar.k;
        eVar.B = new HashMap();
        if (!i) {
            eVar.B.put("WIFIMAC", af.g(r));
            List a2 = am.a(r);
            String str = (a2 == null || a2.size() <= 0) ? "" : (String) a2.get(0);
            String str2 = (a2 == null || a2.size() != 2) ? "" : (String) a2.get(1);
            eVar.B.put("IMEI", str);
            eVar.B.put("IMEI2", str2);
            List b2 = am.b(r);
            String str3 = (b2 == null || b2.size() <= 0) ? "" : (String) b2.get(0);
            String str4 = (b2 == null || b2.size() != 2) ? "" : (String) b2.get(1);
            eVar.B.put("IMSI", str3);
            eVar.B.put("IMSI2", str4);
            eVar.B.put("SIM_OPERATOR", af.c(r));
            eVar.B.put("SIM_OPERATOR_ISO", af.d(r));
        }
        eVar.B.put("REPORTMODE", k == 1 ? "DEFAULT" : "AFTER_LOGIN");
        eVar.B.put("INVOKELOG", w.b());
        eVar.B.put("SESSIONTIME", new StringBuilder().append(g()).toString());
        eVar.B.put("TIMEZONE", af.l());
        eVar.B.put("PACKAGE", af.h(r));
        eVar.B.put("APPID", aa.c);
        eVar.B.put("model", af.d());
        eVar.B.put("lang", af.k(r));
        eVar.B.put("adrId", af.l(r));
        eVar.B.put("manu", af.e());
        eVar.B.put(com.umeng.analytics.pro.x.o, af.i());
        eVar.B.put("root", new StringBuilder().append(af.j()).toString());
        eVar.B.put("uid_v2", a.d(r));
        eVar.B.put("brand_v2", af.g());
        eVar.B.put("SIGN", af.q(r));
        if (aa.e != null && !TextUtils.isEmpty(aa.e.n) && !TextUtils.isEmpty(aa.e.m)) {
            eVar.B.put(com.umeng.analytics.pro.x.ae, aa.e.n);
            eVar.B.put("lon", aa.e.m);
        }
        if (q != x.d) {
            eVar.B.put("UPLOADINTERVAL", new StringBuilder(String.valueOf(q)).toString());
        }
        if (!z) {
            l lVar = new l();
            if (!a.a()) {
                lVar.b = af.b();
                eVar.z = aa.e;
            }
            if (!a.a(aVar)) {
                lVar.c = af.b();
                lVar.d = a.l;
            }
            lVar.f792a = a.g().b;
            eVar.o = lVar;
        }
    }

    public static void a(g gVar) {
        if (a.g() != null) {
            v.a().a(a.f(), gVar);
        }
    }

    public static void a(h hVar) {
        if (a.g() != null) {
            v.a().a(a.f(), hVar);
        }
    }

    public static void a(i iVar) {
        if (a.g() != null) {
            v.a().a(a.f(), iVar);
        }
    }

    public static void a(k kVar) {
        if (a.g() != null) {
            v.a().a(a.f(), kVar);
        }
    }

    private static void a(String str, SQLiteDatabase sQLiteDatabase, boolean z, e eVar) {
        v.b();
        if (!z) {
            ArrayList a2 = v.a().a(str, sQLiteDatabase);
            if (a2 != null && a2.size() > 0) {
                eVar.q = new ArrayList();
                eVar.q.addAll(a2);
                a2.clear();
            }
            ArrayList c2 = v.a().c(str, sQLiteDatabase);
            if (c2 != null && c2.size() > 0) {
                eVar.r = new ArrayList();
                eVar.r.addAll(c2);
                c2.clear();
            }
            ArrayList b2 = v.a().b(str, sQLiteDatabase);
            if (b2 != null && b2.size() > 0) {
                eVar.t = new ArrayList();
                eVar.t.addAll(b2);
                b2.clear();
            }
        }
        ArrayList a3 = v.a().a(sQLiteDatabase);
        if (a3 != null && a3.size() > 0) {
            eVar.t = new ArrayList();
            eVar.t.addAll(a3);
            a3.clear();
        }
        ArrayList b3 = v.a().b(sQLiteDatabase);
        if (b3 != null && b3.size() > 0) {
            eVar.v = new ArrayList();
            eVar.v.addAll(b3);
            b3.clear();
        }
        v.a().a(sQLiteDatabase, v.f821a);
        v.b();
    }

    public static void a(String str, h hVar) {
        hVar.e = af.b();
        ac.b(str, com.dataeye.b.a.a(hVar.a()));
    }

    public static void a(boolean z) {
        x.a("Invoke CacheFactory.uploadAsync start [A]");
        try {
            if (z) {
                x.a("DataEye SDK upload device active info!");
            } else if (k == 2 && a.g() != null && !a.g().c) {
                x.a("Invoke UploadAsync ignored, because reportMode= AFTER_LOGIN and login=false");
                return;
            }
            j.a(new g(z));
        } catch (Throwable th) {
            x.a("DataEye SDK upload data error(A) , reason" + th.getMessage(), th);
        }
    }

    public static boolean a(Context context, SQLiteDatabase sQLiteDatabase) {
        HashMap c2 = v.a().c(sQLiteDatabase);
        if (c2.size() == 0) {
            return false;
        }
        for (Map.Entry entry : c2.entrySet()) {
            Integer num = (Integer) entry.getKey();
            if (a(context, (e) entry.getValue())) {
                v.a().a(sQLiteDatabase, num);
                x.b("DataEye SDK upload data success!(H)");
            } else {
                x.b("DataEye SDK upload data fail!(H)");
                return false;
            }
        }
        return false;
    }

    private static boolean a(Context context, e eVar) {
        if (!af.m(r)) {
            x.b("Invoke CacheFactory.doUploadHistory terminate, reason: network not connected ");
            return false;
        }
        long currentTimeMillis = System.currentTimeMillis();
        boolean n2 = af.n(context);
        try {
        } finally {
            return false;
        }
        if (af.a(o, eVar)) {
            z.a(n2 ? "_dc_oss_def_wifi" : "_dc_oss_def_mobi", "upload", true, System.currentTimeMillis() - currentTimeMillis, eVar.a().length, o);
            j = af.b();
            return true;
        }
        z.a(n2 ? "_dc_oss_def_wifi" : "_dc_oss_def_mobi", "upload", false, System.currentTimeMillis() - currentTimeMillis, eVar.a().length, o);
        return false;
    }

    public static boolean a(SQLiteDatabase sQLiteDatabase) {
        return a(r, sQLiteDatabase);
    }

    public static boolean a(a aVar, SQLiteDatabase sQLiteDatabase, boolean z) {
        boolean z2;
        if (aVar == null) {
            return false;
        }
        try {
            if (!aVar.f781a.equals("_DESelf_DEFAULT_ACCOUNTID") || z) {
                z2 = a(a(aVar, e, sQLiteDatabase, z, false), sQLiteDatabase, false);
                if (z2) {
                    x.b("DataEye SDK upload data success!(A)");
                } else {
                    x.b("DataEye SDK upload data fail!(A)");
                }
            } else {
                x.a("DataEye SDK upload data  stop, reason : accountid is default accountid");
                z2 = true;
            }
            return z2;
        } catch (Throwable th) {
            x.a("DataEye SDK upload data error(A) , reason:" + th.getMessage(), th);
            return false;
        }
    }

    private static boolean a(e eVar, SQLiteDatabase sQLiteDatabase, boolean z) {
        Throwable th;
        if (!af.m(r)) {
            x.b("Invoke CacheFactory.doUpload terminate, reason: network not connected ");
            v.a().a(eVar, sQLiteDatabase);
            return false;
        }
        long currentTimeMillis = System.currentTimeMillis();
        boolean n2 = af.n(r);
        boolean z2 = true;
        try {
            if (af.a(o, eVar)) {
                z.a(n2 ? "_dc_oss_def_wifi" : "_dc_oss_def_mobi", "upload", true, System.currentTimeMillis() - currentTimeMillis, eVar.a().length, o);
                if (!z) {
                    if (eVar.o.b > 0) {
                        a.a(eVar.o.b);
                    }
                    if (eVar.o.c > 0) {
                        a.f(eVar.o.c);
                    }
                }
                j = af.b();
                return true;
            }
            z.a(n2 ? "_dc_oss_def_wifi" : "_dc_oss_def_mobi", "upload", false, System.currentTimeMillis() - currentTimeMillis, eVar.a().length, o);
            v.a().a(eVar, sQLiteDatabase);
            return false;
        } catch (Throwable th2) {
            try {
                z.a(n2 ? "_dc_oss_def_wifi" : "_dc_oss_def_mobi", "upload:" + th2.getMessage(), false, System.currentTimeMillis() - currentTimeMillis, eVar.a().length, o);
                try {
                    x.a("Invoke CacheFactory.doUpload error, reason:" + th2.getMessage(), th2);
                    v.a().a(eVar, sQLiteDatabase);
                    return false;
                } catch (Throwable th3) {
                    th = th3;
                    z2 = false;
                    if (!z2) {
                        v.a().a(eVar, sQLiteDatabase);
                    }
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
            }
        }
    }

    public static long b(int i2) {
        long a2 = ac.a("DC_SPENDTIMEINLEVELS_" + i2, 0L);
        long currentTimeMillis = System.currentTimeMillis() - g;
        return currentTimeMillis > 0 ? a2 + currentTimeMillis : a2;
    }

    public static void b() {
        f = System.currentTimeMillis();
        e = System.currentTimeMillis();
        g = System.currentTimeMillis();
        h = e;
    }

    public static void b(Context context) {
        x.a("Invoke CacheFactory.uploadHistoryDataWhenNetworkChange start [N]");
        SQLiteDatabase sQLiteDatabase = null;
        try {
            v.a(context, aa.c);
            sQLiteDatabase = v.c().a();
            a(context, sQLiteDatabase);
            v.c().a(sQLiteDatabase);
            if (sQLiteDatabase != null) {
                try {
                    v.c().a(sQLiteDatabase);
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
        } catch (Throwable th) {
            try {
                x.a("DataEye SDK upload data error(N) , reason" + th.getMessage(), th);
                if (sQLiteDatabase != null) {
                    try {
                        v.c().a(sQLiteDatabase);
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Throwable th2) {
                if (sQLiteDatabase != null) {
                    try {
                        v.c().a(sQLiteDatabase);
                    } catch (Exception e4) {
                        e4.printStackTrace();
                    }
                }
                throw th2;
            }
        }
    }

    private static void b(Context context, String str) {
        List<ScanResult> scanResults = ((WifiManager) context.getSystemService("wifi")).getScanResults();
        JSONArray jSONArray = new JSONArray();
        for (int i2 = 0; i2 < scanResults.size(); i2++) {
            ScanResult scanResult = scanResults.get(i2);
            if (ah.a(scanResult.frequency) != 0) {
                JSONObject jSONObject = new JSONObject();
                try {
                    jSONObject.put("apMAC", scanResult.BSSID);
                    jSONObject.put("rssi", new StringBuilder(String.valueOf(scanResult.level)).toString());
                    jSONObject.put(com.umeng.analytics.pro.x.b, new StringBuilder(String.valueOf(ah.a(scanResult.frequency))).toString());
                    jSONObject.put("ssid", scanResult.SSID);
                } catch (JSONException e2) {
                    e2.printStackTrace();
                }
                jSONArray.put(jSONObject);
            }
        }
        if (jSONArray != null && jSONArray.length() != 0) {
            x.a("appWifilList:" + jSONArray);
            try {
                String a2 = ai.a(jSONArray.toString(), str.substring(0, 8));
                HashMap hashMap = new HashMap();
                hashMap.put("wifiList", a2);
                DCEvent.onEvent("_DESelf_Wifi_List", hashMap);
            } catch (Exception e3) {
                e3.printStackTrace();
            }
        }
    }

    public static void b(a aVar, long j2) {
        if (aVar == null) {
            x.a("Invoke addDCSyncInHistoryAndUploadAsync fail , reason oldAccountInfo is null");
            return;
        }
        try {
            j.b(new f(aVar, j2));
        } catch (Throwable th) {
            x.a("Invoke addDCSyncInHistoryAndUploadAsync error, reason:" + th.getMessage(), th);
        }
        x.a("Invoke addDCSyncInHistoryAndUploadAsync finish");
    }

    public static void b(h hVar) {
        v.a().b("NoLoginAccoundId", hVar);
    }

    public static void b(String str, h hVar) {
        String a2 = ac.a(str, "");
        if (!TextUtils.isEmpty(a2)) {
            h hVar2 = new h();
            try {
                hVar2.a(new com.dataeye.b.c(com.dataeye.b.a.a(a2)));
                if (hVar2.e > 0) {
                    hVar.b = af.b() - hVar2.e;
                    if (!(hVar2.c == null && hVar.c == null)) {
                        HashMap hashMap = new HashMap();
                        if (hVar2.c != null) {
                            hashMap.putAll(hVar2.c);
                        }
                        if (hVar.c != null) {
                            hashMap.putAll(hVar.c);
                        }
                        hVar.c = hashMap;
                    }
                    hVar.e = hVar2.e;
                    hVar.f = af.b();
                }
                a(hVar);
                ac.a(str);
            } catch (Throwable th) {
            }
        }
    }

    public static boolean b(SQLiteDatabase sQLiteDatabase) {
        try {
            boolean a2 = a(a(a.g(), e, sQLiteDatabase, false, true), sQLiteDatabase, true);
            if (a2) {
                x.b("DataEye SDK upload data success!(BL)");
            } else {
                x.b("DataEye SDK upload data fail!(BL)");
            }
            return a2;
        } catch (Throwable th) {
            x.a("DataEye SDK upload data error(BL) , reason:" + th.getMessage(), th);
            return false;
        }
    }

    public static void c() {
        e = System.currentTimeMillis();
        g = System.currentTimeMillis();
        h = e;
    }

    public static void c(int i2) {
        long a2 = ac.a("DC_SPENDTIMEINLEVELS_" + i2, 0L);
        long currentTimeMillis = System.currentTimeMillis() - g;
        if (currentTimeMillis > 0) {
            a2 += currentTimeMillis;
        }
        ac.b("DC_SPENDTIMEINLEVELS_" + i2, a2);
    }

    public static final void d() {
        h = System.currentTimeMillis();
        if (a.g() != null) {
            c(a.g().g);
        }
    }

    public static Context e() {
        return r;
    }

    public static int f() {
        return (int) (e / 1000);
    }

    public static int g() {
        return (int) (f / 1000);
    }

    public static void h() {
        if (n != null) {
            n.clear();
        } else {
            n = new LinkedList();
        }
        n.add("rd.gdatacube.net");
        n.add("rd.de123.net");
        try {
            String parameterString = DCConfigParams.getParameterString("DESelf_Key_Hosts", "");
            x.a("Hosts:" + parameterString);
            if (!TextUtils.isEmpty(parameterString)) {
                JSONArray jSONArray = new JSONArray(parameterString);
                for (int i2 = 0; i2 < jSONArray.length(); i2++) {
                    String string = jSONArray.getString(i2);
                    if (!TextUtils.isEmpty(string)) {
                        n.add(string);
                    }
                }
            }
        } catch (JSONException e2) {
            e2.printStackTrace();
        }
    }

    public static void i() {
        o = ac.c("DC_CURRENT_HOST", "rd.gdatacube.net");
        x.a("inovke initCurrentHost , current host =  " + o);
    }

    public static void j() {
        if (TextUtils.isEmpty(o)) {
            o = "rd.gdatacube.net";
            return;
        }
        int size = n.size();
        if (size == 0) {
            o = "rd.gdatacube.net";
            h();
        } else if (!n.contains(o)) {
            o = "rd.gdatacube.net";
        } else {
            int indexOf = n.indexOf(o);
            String str = (String) n.get(indexOf + 1 > size + (-1) ? 0 : indexOf + 1);
            x.a("inovke switchSyncHost , switch host from " + o + " to " + str);
            o = str;
        }
    }

    public static long k() {
        return af.b() - j;
    }

    public static void l() {
        x.a("Invoke CacheFactory.uploadHistoryData start [SH]");
        SQLiteDatabase sQLiteDatabase = null;
        try {
            sQLiteDatabase = v.c().a();
            a(sQLiteDatabase);
            v.c().a(sQLiteDatabase);
            if (sQLiteDatabase != null) {
                try {
                    v.c().a(sQLiteDatabase);
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
        } catch (Throwable th) {
            try {
                x.a("DataEye SDK upload data error(SH) , reason:" + th.getMessage(), th);
                if (sQLiteDatabase != null) {
                    try {
                        v.c().a(sQLiteDatabase);
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Throwable th2) {
                if (sQLiteDatabase != null) {
                    try {
                        v.c().a(sQLiteDatabase);
                    } catch (Exception e4) {
                        e4.printStackTrace();
                    }
                }
                throw th2;
            }
        }
    }

    public static void m() {
        x.a("Invoke CacheFactory.uploadHistoryDataAsync start [H]");
        try {
            j.a(new h());
        } catch (Throwable th) {
            x.a("DataEye SDK upload data error(H) , reason" + th.getMessage(), th);
        }
    }

    public static void n() {
        x.a("Invoke CacheFactory.uploadBeforeLoginEventAsync start [BL]");
        try {
            j.a(new i());
        } catch (Throwable th) {
            x.a("DataEye SDK upload data error(BL) , reason" + th.getMessage(), th);
        }
    }

    private static void o() {
        String c2 = ac.c("DC_JPush_Registed", "");
        if (!TextUtils.isEmpty(c2)) {
            String[] split = c2.split("@@");
            if (split.length == 4) {
                HashMap hashMap = new HashMap();
                hashMap.put("uid", split[0]);
                hashMap.put("appid", split[1]);
                hashMap.put("token", split[2]);
                hashMap.put("registeTime", split[3]);
                DCEvent.onEvent("_DESelf_JPush_Registed", hashMap);
            }
            ac.b("DC_JPush_Registed");
        }
        String c3 = ac.c("DC_XinGe_Registed", "");
        if (!TextUtils.isEmpty(c3)) {
            String[] split2 = c3.split("@@");
            if (split2.length == 4) {
                HashMap hashMap2 = new HashMap();
                hashMap2.put("uid", split2[0]);
                hashMap2.put("appid", split2[1]);
                hashMap2.put("token", split2[2]);
                hashMap2.put("registeTime", split2[3]);
                DCEvent.onEvent("_DESelf_XinGe_Registed", hashMap2);
            }
            ac.b("DC_XinGe_Registed");
        }
    }
}
