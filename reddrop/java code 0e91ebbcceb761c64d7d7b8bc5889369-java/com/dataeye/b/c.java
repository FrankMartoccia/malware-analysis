package com.dataeye.b;

import com.dataeye.DCAccountType;
import com.umeng.analytics.pro.dm;
import com.umeng.analytics.pro.j;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Array;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/* loaded from: classes.dex */
public final class c {

    /* renamed from: a  reason: collision with root package name */
    protected String f795a = "UTF-8";
    private ByteBuffer b;

    public c() {
    }

    public c(byte[] bArr) {
        this.b = ByteBuffer.wrap(bArr);
    }

    public static int a(d dVar, ByteBuffer byteBuffer) {
        byte b = byteBuffer.get();
        dVar.f796a = (byte) (b & dm.m);
        dVar.b = (b & 240) >> 4;
        if (dVar.b != 15) {
            return 1;
        }
        dVar.b = byteBuffer.get() & 255;
        return 2;
    }

    private Map a(Map map, Map map2, int i, boolean z) {
        if (map2 == null || map2.isEmpty()) {
            return new HashMap();
        }
        Map.Entry entry = (Map.Entry) map2.entrySet().iterator().next();
        Object key = entry.getKey();
        Object value = entry.getValue();
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 8:
                    int a2 = a(0, 0, true);
                    if (a2 < 0) {
                        throw new b("size invalid: " + a2);
                    }
                    for (int i2 = 0; i2 < a2; i2++) {
                        map.put(a(key, 0, true), a(value, 1, true));
                    }
                    return map;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return map;
        } else {
            throw new b("require field not exist.");
        }
    }

    private void a(byte b) {
        int i = 0;
        switch (b) {
            case 0:
                b(1);
                return;
            case 1:
                b(2);
                return;
            case 2:
                b(4);
                return;
            case 3:
                b(8);
                return;
            case 4:
                b(4);
                return;
            case 5:
                b(8);
                return;
            case 6:
                int i2 = this.b.get();
                if (i2 < 0) {
                    i2 += j.e;
                }
                b(i2);
                return;
            case 7:
                b(this.b.getInt());
                return;
            case 8:
                int a2 = a(0, 0, true);
                while (i < a2 * 2) {
                    b();
                    i++;
                }
                return;
            case DCAccountType.DC_Type4 /* 9 */:
                int a3 = a(0, 0, true);
                while (i < a3) {
                    b();
                    i++;
                }
                return;
            case DCAccountType.DC_Type5 /* 10 */:
                a();
                return;
            case DCAccountType.DC_Type6 /* 11 */:
            case DCAccountType.DC_Type7 /* 12 */:
                return;
            case DCAccountType.DC_Type8 /* 13 */:
                d dVar = new d();
                a(dVar);
                if (dVar.f796a != 0) {
                    throw new b("skipField with invalid type, type value: " + ((int) b) + ", " + ((int) dVar.f796a));
                }
                b(a(0, 0, true));
                return;
            default:
                throw new b("invalid type.");
        }
    }

    private int b(d dVar) {
        return a(dVar, this.b.duplicate());
    }

    private void b() {
        d dVar = new d();
        a(dVar);
        a(dVar.f796a);
    }

    private void b(int i) {
        this.b.position(this.b.position() + i);
    }

    private Object[] b(Object obj, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 < 0) {
                        throw new b("size invalid: " + a2);
                    }
                    Object[] objArr = (Object[]) Array.newInstance(obj.getClass(), a2);
                    for (int i2 = 0; i2 < a2; i2++) {
                        objArr[i2] = a(obj, 0, true);
                    }
                    return objArr;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return null;
        } else {
            throw new b("require field not exist.");
        }
    }

    public byte a(byte b, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 0:
                    return this.b.get();
                case DCAccountType.DC_Type7 /* 12 */:
                    return (byte) 0;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return b;
        } else {
            throw new b("require field not exist.");
        }
    }

    public double a(double d, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 4:
                    return this.b.getFloat();
                case 5:
                    return this.b.getDouble();
                case DCAccountType.DC_Type7 /* 12 */:
                    return 0.0d;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return d;
        } else {
            throw new b("require field not exist.");
        }
    }

    public float a(float f, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 4:
                    return this.b.getFloat();
                case DCAccountType.DC_Type7 /* 12 */:
                    return 0.0f;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return f;
        } else {
            throw new b("require field not exist.");
        }
    }

    public int a(int i, int i2, boolean z) {
        if (a(i2)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 0:
                    return this.b.get();
                case 1:
                    return this.b.getShort();
                case 2:
                    return this.b.getInt();
                case DCAccountType.DC_Type7 /* 12 */:
                    return 0;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return i;
        } else {
            throw new b("require field not exist.");
        }
    }

    public long a(long j, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 0:
                    return this.b.get();
                case 1:
                    return this.b.getShort();
                case 2:
                    return this.b.getInt();
                case 3:
                    return this.b.getLong();
                case DCAccountType.DC_Type7 /* 12 */:
                    return 0L;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return j;
        } else {
            throw new b("require field not exist.");
        }
    }

    public f a(f fVar, int i, boolean z) {
        f fVar2 = null;
        if (a(i)) {
            try {
                fVar2 = (f) fVar.getClass().newInstance();
                d dVar = new d();
                a(dVar);
                if (dVar.f796a != 10) {
                    throw new b("type mismatch.");
                }
                fVar2.a(this);
                a();
            } catch (Exception e) {
                throw new b(e.getMessage());
            }
        } else if (z) {
            throw new b("require field not exist.");
        }
        return fVar2;
    }

    public Object a(Object obj, int i, boolean z) {
        if (obj instanceof Byte) {
            return Byte.valueOf(a((byte) 0, i, z));
        }
        if (obj instanceof Boolean) {
            return Boolean.valueOf(a(false, i, z));
        }
        if (obj instanceof Short) {
            return Short.valueOf(a((short) 0, i, z));
        }
        if (obj instanceof Integer) {
            return Integer.valueOf(a(0, i, z));
        }
        if (obj instanceof Long) {
            return Long.valueOf(a(0L, i, z));
        }
        if (obj instanceof Float) {
            return Float.valueOf(a(0.0f, i, z));
        }
        if (obj instanceof Double) {
            return Double.valueOf(a(0.0d, i, z));
        }
        if (obj instanceof String) {
            return a(i, z);
        }
        if (obj instanceof Map) {
            return a((Map) obj, i, z);
        }
        if (obj instanceof List) {
            return a((List) obj, i, z);
        }
        if (obj instanceof f) {
            return a((f) obj, i, z);
        }
        if (obj.getClass().isArray()) {
            return ((obj instanceof byte[]) || (obj instanceof Byte[])) ? a((byte[]) null, i, z) : obj instanceof boolean[] ? a((boolean[]) null, i, z) : obj instanceof short[] ? a((short[]) null, i, z) : obj instanceof int[] ? a((int[]) null, i, z) : obj instanceof long[] ? a((long[]) null, i, z) : obj instanceof float[] ? a((float[]) null, i, z) : obj instanceof double[] ? a((double[]) null, i, z) : a((Object[]) obj, i, z);
        }
        throw new b("read object error: unsupport type.");
    }

    public String a(int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 6:
                    int i2 = this.b.get();
                    if (i2 < 0) {
                        i2 += j.e;
                    }
                    byte[] bArr = new byte[i2];
                    this.b.get(bArr);
                    try {
                        return new String(bArr, this.f795a);
                    } catch (UnsupportedEncodingException e) {
                        return new String(bArr);
                    }
                case 7:
                    int i3 = this.b.getInt();
                    if (i3 > 104857600 || i3 < 0) {
                        throw new b("String too long: " + i3);
                    }
                    byte[] bArr2 = new byte[i3];
                    this.b.get(bArr2);
                    try {
                        return new String(bArr2, this.f795a);
                    } catch (UnsupportedEncodingException e2) {
                        return new String(bArr2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return null;
        } else {
            throw new b("require field not exist.");
        }
    }

    public String a(String str, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 6:
                    int i2 = this.b.get();
                    if (i2 < 0) {
                        i2 += j.e;
                    }
                    byte[] bArr = new byte[i2];
                    this.b.get(bArr);
                    try {
                        return new String(bArr, this.f795a);
                    } catch (UnsupportedEncodingException e) {
                        return new String(bArr);
                    }
                case 7:
                    int i3 = this.b.getInt();
                    if (i3 > 104857600 || i3 < 0) {
                        throw new b("String too long: " + i3);
                    }
                    byte[] bArr2 = new byte[i3];
                    this.b.get(bArr2);
                    try {
                        return new String(bArr2, this.f795a);
                    } catch (UnsupportedEncodingException e2) {
                        return new String(bArr2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return str;
        } else {
            throw new b("require field not exist.");
        }
    }

    public HashMap a(Map map, int i, boolean z) {
        return (HashMap) a(new HashMap(), map, i, z);
    }

    public List a(List list, int i, boolean z) {
        if (list == null || list.isEmpty()) {
            return new ArrayList();
        }
        Object[] b = b(list.get(0), i, z);
        if (b == null) {
            return null;
        }
        ArrayList arrayList = new ArrayList();
        for (Object obj : b) {
            arrayList.add(obj);
        }
        return arrayList;
    }

    public short a(short s, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case 0:
                    return this.b.get();
                case 1:
                    return this.b.getShort();
                case DCAccountType.DC_Type7 /* 12 */:
                    return (short) 0;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return s;
        } else {
            throw new b("require field not exist.");
        }
    }

    public void a() {
        d dVar = new d();
        do {
            a(dVar);
            a(dVar.f796a);
        } while (dVar.f796a != 11);
    }

    public void a(d dVar) {
        a(dVar, this.b);
    }

    /* JADX WARN: Code restructure failed: missing block: B:10:0x0017, code lost:
        if (r6 != r1.b) goto L6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:19:?, code lost:
        return true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:6:0x0010, code lost:
        return false;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean a(int i) {
        try {
            d dVar = new d();
            while (true) {
                int b = b(dVar);
                if (dVar.f796a == 11) {
                    return false;
                }
                if (i <= dVar.b) {
                    break;
                }
                b(b);
                a(dVar.f796a);
            }
        } catch (b e) {
            return false;
        } catch (BufferUnderflowException e2) {
            return false;
        }
    }

    public boolean a(boolean z, int i, boolean z2) {
        return a((byte) 0, i, z2) != 0;
    }

    public byte[] a(byte[] bArr, int i, boolean z) {
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 < 0) {
                        throw new b("size invalid: " + a2);
                    }
                    byte[] bArr2 = new byte[a2];
                    for (int i2 = 0; i2 < a2; i2++) {
                        bArr2[i2] = a(bArr2[0], 0, true);
                    }
                    return bArr2;
                case DCAccountType.DC_Type8 /* 13 */:
                    d dVar2 = new d();
                    a(dVar2);
                    if (dVar2.f796a != 0) {
                        throw new b("type mismatch, tag: " + i + ", type: " + ((int) dVar.f796a) + ", " + ((int) dVar2.f796a));
                    }
                    int a3 = a(0, 0, true);
                    if (a3 < 0) {
                        throw new b("invalid size, tag: " + i + ", type: " + ((int) dVar.f796a) + ", " + ((int) dVar2.f796a) + ", size: " + a3);
                    }
                    byte[] bArr3 = new byte[a3];
                    this.b.get(bArr3);
                    return bArr3;
                default:
                    throw new b("type mismatch.");
            }
        } else if (!z) {
            return null;
        } else {
            throw new b("require field not exist.");
        }
    }

    public double[] a(double[] dArr, int i, boolean z) {
        double[] dArr2 = null;
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 >= 0) {
                        dArr2 = new double[a2];
                        for (int i2 = 0; i2 < a2; i2++) {
                            dArr2[i2] = a(dArr2[0], 0, true);
                        }
                        break;
                    } else {
                        throw new b("size invalid: " + a2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (z) {
            throw new b("require field not exist.");
        }
        return dArr2;
    }

    public float[] a(float[] fArr, int i, boolean z) {
        float[] fArr2 = null;
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 >= 0) {
                        fArr2 = new float[a2];
                        for (int i2 = 0; i2 < a2; i2++) {
                            fArr2[i2] = a(fArr2[0], 0, true);
                        }
                        break;
                    } else {
                        throw new b("size invalid: " + a2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (z) {
            throw new b("require field not exist.");
        }
        return fArr2;
    }

    public int[] a(int[] iArr, int i, boolean z) {
        int[] iArr2 = null;
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 >= 0) {
                        iArr2 = new int[a2];
                        for (int i2 = 0; i2 < a2; i2++) {
                            iArr2[i2] = a(iArr2[0], 0, true);
                        }
                        break;
                    } else {
                        throw new b("size invalid: " + a2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (z) {
            throw new b("require field not exist.");
        }
        return iArr2;
    }

    public long[] a(long[] jArr, int i, boolean z) {
        long[] jArr2 = null;
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 >= 0) {
                        jArr2 = new long[a2];
                        for (int i2 = 0; i2 < a2; i2++) {
                            jArr2[i2] = a(jArr2[0], 0, true);
                        }
                        break;
                    } else {
                        throw new b("size invalid: " + a2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (z) {
            throw new b("require field not exist.");
        }
        return jArr2;
    }

    public Object[] a(Object[] objArr, int i, boolean z) {
        if (objArr != null && objArr.length != 0) {
            return b(objArr[0], i, z);
        }
        throw new b("unable to get type of key and value.");
    }

    public short[] a(short[] sArr, int i, boolean z) {
        short[] sArr2 = null;
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 >= 0) {
                        sArr2 = new short[a2];
                        for (int i2 = 0; i2 < a2; i2++) {
                            sArr2[i2] = a(sArr2[0], 0, true);
                        }
                        break;
                    } else {
                        throw new b("size invalid: " + a2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (z) {
            throw new b("require field not exist.");
        }
        return sArr2;
    }

    public boolean[] a(boolean[] zArr, int i, boolean z) {
        boolean[] zArr2 = null;
        if (a(i)) {
            d dVar = new d();
            a(dVar);
            switch (dVar.f796a) {
                case DCAccountType.DC_Type4 /* 9 */:
                    int a2 = a(0, 0, true);
                    if (a2 >= 0) {
                        zArr2 = new boolean[a2];
                        for (int i2 = 0; i2 < a2; i2++) {
                            zArr2[i2] = a(zArr2[0], 0, true);
                        }
                        break;
                    } else {
                        throw new b("size invalid: " + a2);
                    }
                default:
                    throw new b("type mismatch.");
            }
        } else if (z) {
            throw new b("require field not exist.");
        }
        return zArr2;
    }
}
