package com.dataeye;

import android.text.TextUtils;
import com.dataeye.c.a;
import com.dataeye.c.c;
import com.dataeye.c.w;
import com.dataeye.c.x;
import java.util.HashMap;
/* loaded from: classes.dex */
public class DCAccount {
    public static final String DESelf_Event_Key_AccountId = "_DES_AccountId";
    public static final String DESelf_Event_Key_LoginTime = "_DES_LoginTime";

    public static void addTag(String tag, String subTag) {
        if (!c.c) {
            x.c("Invoke DCAccount.tag() fail , DataEye SDK need init first!");
        } else if (!TextUtils.isEmpty(tag)) {
            HashMap hashMap = new HashMap();
            hashMap.put("tag", tag);
            if (!TextUtils.isEmpty(subTag)) {
                hashMap.put("subTag", subTag);
            }
            DCEvent.onEvent("_DESelf_addTag", hashMap);
            w.a("DCAccount_tag");
        }
    }

    public static String getAccountId() {
        if (c.c) {
            w.a("DCAgent_getAccountId");
            return a.f();
        }
        x.c("Invoke DCAccount.getAccountId() fail , DataEye SDK need init first!");
        return "";
    }

    public static void login(String accountId) {
        login(accountId, "");
    }

    public static void login(String accountId, String gameServer) {
        if (!c.c) {
            x.c("Invoke DCAccount.login() fail , DataEye SDK need init first!");
        } else if (c.k == 1) {
            a.b();
            x.b("Invoke DCAccount.login() Ignored, because ReportMode is DEFAULT , please invoke ");
        } else {
            if (TextUtils.isEmpty(accountId)) {
                accountId = a.b();
                x.a("login", "loginWithAccountId", "warning", "ReportMode=AFTER_MODE, accountId=null , so accountId=Uid");
            }
            String f = a.f();
            if (f.equals(a.b())) {
                c.c();
                a.a(accountId, gameServer);
                x.b("Invoke DCAccount.login() success, accountid:" + accountId);
            } else if (!accountId.equals(f)) {
                if (!f.equals("_DESelf_DEFAULT_ACCOUNTID")) {
                    c.b(a.g(), c.e);
                    if (a.m != null) {
                        a.m.c();
                    }
                }
                c.c();
                a.a(accountId, gameServer);
                x.b("Invoke DCAccount.login() success, accountid:" + accountId);
            } else {
                x.a("Invoke DCAccount.login() warring, " + accountId + " repeat login ");
            }
            w.a("DCAccount_login");
            HashMap hashMap = new HashMap();
            hashMap.put(DESelf_Event_Key_AccountId, accountId);
            hashMap.put(DESelf_Event_Key_LoginTime, new StringBuilder().append(c.f()).toString());
            DCEvent.onEvent("_DESelf_Account_Login", hashMap);
            c.a(false);
        }
    }

    public static void logout() {
        if (c.k == 1) {
            x.b("Invoke DCAccount.logout() Ignored, because ReportMode is DEFAULT");
            return;
        }
        if (a.c()) {
            c.b(a.g(), c.e);
            a.i();
        }
        w.a("DCAccount_logout");
    }

    public static void removeTag(String tag, String subTag) {
        if (!c.c) {
            x.c("Invoke DCAccount.unTag() fail , DataEye SDK need init first!");
        } else if (!TextUtils.isEmpty(tag)) {
            HashMap hashMap = new HashMap();
            hashMap.put("tag", tag);
            if (!TextUtils.isEmpty(subTag)) {
                hashMap.put("subTag", subTag);
            }
            DCEvent.onEvent("_DESelf_removeTag", hashMap);
            w.a("DCAccount_unTag");
        }
    }

    public static void setAccountType(int accountType) {
        if (!c.c) {
            x.c("Invoke DCAccount.setAccountType() fail , DataEye SDK need init first!");
            return;
        }
        a.b(accountType);
        w.a("DCAccount_setAccountType");
    }

    public static void setAge(int age) {
        if (!c.c) {
            x.c("Invoke DCAccount.setAge() fail , DataEye SDK need init first!");
            return;
        }
        a.d(age);
        w.a("DCAccount_setAge");
    }

    public static void setGameServer(String gameServer) {
        if (!c.c) {
            x.c("Invoke DCAccount.setGameServer() fail , DataEye SDK need init first!");
        } else if (TextUtils.isEmpty(gameServer)) {
            x.c("Invoke DCAccount.setGameServer() fail , gameServer is empty!");
        } else {
            a.b(gameServer);
            w.a("DCAccount_setGameServer");
        }
    }

    public static void setGender(int gender) {
        if (!c.c) {
            x.c("Invoke DCAccount.setGender() fail , DataEye SDK need init first!");
            return;
        }
        a.c(gender);
        w.a("DCAccount_setGender");
    }

    public static void setLevel(int level) {
        if (!c.c) {
            x.c("Invoke DCAccount.setLevel() fail , DataEye SDK need init first!");
            return;
        }
        int i = a.g().g;
        if (i == level) {
            x.c("Invoke DCAccount.setLevel() fail ,same level set again! ");
        } else if (i > level) {
            x.c("Invoke DCAccount.setLevel() fail ,new level is less than the current level! ");
        } else {
            long b = c.b(i);
            if (i > 0) {
                HashMap hashMap = new HashMap();
                hashMap.put("endLevel", String.valueOf(level));
                hashMap.put("spendTimeInLevel", String.valueOf((b / 1000) + 1));
                DCEvent.onEventEnd("_DESelf_Level", hashMap, String.valueOf(i));
                c.a(i);
            }
            if (level > 0) {
                a.e(level);
                HashMap hashMap2 = new HashMap();
                hashMap2.put("startLevel", String.valueOf(level));
                DCEvent.onEventBegin("_DESelf_Level", hashMap2, String.valueOf(level));
                c.c(level);
                c.a(false);
            }
            w.a("DCAccount_setLevel");
        }
    }
}
