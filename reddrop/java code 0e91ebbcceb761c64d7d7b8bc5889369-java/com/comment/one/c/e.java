package com.comment.one.c;

import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.comment.one.don.App;
import com.comment.one.e.b;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.SocketTimeoutException;
import java.util.HashMap;
import java.util.Map;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONObject;
/* loaded from: classes.dex */
public final class e {

    /* renamed from: a  reason: collision with root package name */
    private static int f758a = 15000;
    private static int b = 3;

    private static String a(InputStream inputStream) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        StringBuilder sb = new StringBuilder();
        while (true) {
            try {
                try {
                    String readLine = bufferedReader.readLine();
                    if (readLine == null) {
                        try {
                            break;
                        } catch (IOException e) {
                        }
                    } else {
                        sb.append(String.valueOf(readLine) + "\n");
                    }
                } catch (IOException e2) {
                    try {
                        inputStream.close();
                    } catch (IOException e3) {
                    }
                    try {
                        inputStream.close();
                    } catch (IOException e4) {
                    }
                }
            } finally {
                try {
                    inputStream.close();
                } catch (IOException e5) {
                }
            }
        }
        return sb.toString();
    }

    public static String a(String str) {
        return str == null ? "" : str;
    }

    public static String a(String str, String str2, long j) {
        HttpResponse a2;
        try {
            b.a();
            String a3 = b.a(str, "2017");
            if (a3.equals("") || (a2 = a(String.valueOf(a3) + "?app_id=" + App.getInstance().get_strAppID() + "&t=" + j, str2)) == null) {
                return "";
            }
            String a4 = a(a2);
            return a4 == null ? "" : a4;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private static String a(HttpResponse httpResponse) {
        HttpEntity entity;
        if (httpResponse == null || (entity = httpResponse.getEntity()) == null) {
            return null;
        }
        try {
            return a(entity.getContent());
        } catch (IOException e) {
            return null;
        }
    }

    public static String a(JSONObject jSONObject, String str) {
        String str2 = null;
        if (!jSONObject.isNull(str)) {
            try {
                str2 = jSONObject.getString(str);
            } catch (Exception e) {
                return "";
            }
        }
        return str2 == null ? "" : str2;
    }

    public static String a(JSONObject jSONObject, String str, String str2) {
        String str3 = null;
        if (!jSONObject.isNull(str)) {
            try {
                JSONObject jSONObject2 = jSONObject.getJSONObject(str);
                if (!jSONObject2.isNull(str2)) {
                    str3 = jSONObject2.getString(str2);
                }
            } catch (Exception e) {
                return "";
            }
        }
        return str3 == null ? "" : str3;
    }

    private static Map a(Header[] headerArr) {
        HashMap hashMap = new HashMap();
        for (int i = 0; i < headerArr.length; i++) {
            hashMap.put(headerArr[i].getName(), headerArr[i].getValue());
        }
        return hashMap;
    }

    private static HttpResponse a(String str, String str2) {
        HttpResponse httpResponse;
        int i = b;
        HttpResponse httpResponse2 = null;
        new HashMap();
        while (i > 0) {
            int i2 = i - 1;
            try {
                httpResponse = b(str, str2);
            } catch (SocketTimeoutException e) {
                e = e;
                httpResponse = httpResponse2;
            } catch (ConnectTimeoutException e2) {
                e = e2;
                httpResponse = httpResponse2;
            } catch (IOException e3) {
                e = e3;
                httpResponse = httpResponse2;
            } catch (Exception e4) {
                e = e4;
                httpResponse = httpResponse2;
            } catch (ClientProtocolException e5) {
                e = e5;
                httpResponse = httpResponse2;
            }
            try {
                int statusCode = httpResponse.getStatusLine().getStatusCode();
                Map a2 = a(httpResponse.getAllHeaders());
                if (statusCode == 301 || statusCode == 302) {
                    String str3 = (String) a2.get(Cint.l);
                }
                return httpResponse;
            } catch (ClientProtocolException e6) {
                e = e6;
                e.printStackTrace();
                httpResponse2 = httpResponse;
                i = i2;
            } catch (SocketTimeoutException e7) {
                e = e7;
                e.printStackTrace();
                try {
                    Thread.sleep(1000L);
                    httpResponse2 = httpResponse;
                    i = i2;
                } catch (InterruptedException e8) {
                    e8.printStackTrace();
                    httpResponse2 = httpResponse;
                    i = i2;
                }
            } catch (ConnectTimeoutException e9) {
                e = e9;
                e.printStackTrace();
                try {
                    Thread.sleep(1000L);
                    httpResponse2 = httpResponse;
                    i = i2;
                } catch (InterruptedException e10) {
                    e10.printStackTrace();
                    httpResponse2 = httpResponse;
                    i = i2;
                }
            } catch (IOException e11) {
                e = e11;
                e.printStackTrace();
                try {
                    Thread.sleep(1000L);
                    httpResponse2 = httpResponse;
                    i = i2;
                } catch (InterruptedException e12) {
                    e12.printStackTrace();
                    httpResponse2 = httpResponse;
                    i = i2;
                }
            } catch (Exception e13) {
                e = e13;
                e.printStackTrace();
                httpResponse2 = httpResponse;
                i = i2;
            }
        }
        return httpResponse2;
    }

    private static HttpResponse b(String str, String str2) {
        HttpPost httpPost = new HttpPost(str);
        try {
            byte[] bytes = str2.getBytes("UTF-8");
            if (bytes != null) {
                httpPost.setEntity(new ByteArrayEntity(bytes));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
        HttpParams params = httpPost.getParams();
        HttpConnectionParams.setConnectionTimeout(params, f758a);
        HttpConnectionParams.setSoTimeout(params, f758a);
        return defaultHttpClient.execute(httpPost);
    }
}
