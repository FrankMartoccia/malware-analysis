package com.comment.one.e;

import com.comment.one.c.c;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
/* loaded from: classes.dex */
public final class b {

    /* renamed from: a  reason: collision with root package name */
    public static b f765a;
    private static String b = "2017";
    private Cipher c;
    private Cipher d;

    public b() {
        this(b);
    }

    private b(String str) {
        this.c = null;
        this.d = null;
        try {
            Key a2 = a(str.getBytes());
            this.c = Cipher.getInstance("DES");
            this.c.init(1, a2);
            this.d = Cipher.getInstance("DES");
            this.d.init(2, a2);
        } catch (Exception e) {
        }
    }

    public static b a() {
        if (f765a == null) {
            try {
                f765a = new b();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return f765a;
    }

    public static String a(String str, String str2) {
        try {
            if (str2.trim().length() < 2) {
                str2 = b;
            }
            return new String(a(a(str), str2));
        } catch (Exception e) {
            c.a().a(e);
            return "208";
        }
    }

    private static Key a(byte[] bArr) {
        byte[] bArr2 = new byte[8];
        for (int i = 0; i < bArr.length && i < 8; i++) {
            bArr2[i] = bArr[i];
        }
        return new SecretKeySpec(bArr2, "DES");
    }

    private static byte[] a(String str) {
        byte[] bytes = str.getBytes();
        int length = bytes.length;
        byte[] bArr = new byte[length / 2];
        for (int i = 0; i < length; i += 2) {
            bArr[i / 2] = (byte) Integer.parseInt(new String(bytes, i, 2), 16);
        }
        return bArr;
    }

    private static byte[] a(byte[] bArr, String str) {
        try {
            Key a2 = a(str.getBytes());
            Cipher cipher = Cipher.getInstance("DES");
            cipher.init(2, a2);
            return cipher.doFinal(bArr);
        } catch (Exception e) {
            c.a().a(e);
            return null;
        }
    }
}
