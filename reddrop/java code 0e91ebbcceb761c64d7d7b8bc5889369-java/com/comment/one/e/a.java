package com.comment.one.e;

import android.content.Context;
import android.util.Base64;
import com.yf.y.f.init.util.ConstUtils;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;
/* loaded from: classes.dex */
public final class a {
    public static a c;

    /* renamed from: a  reason: collision with root package name */
    final String f764a = "AES";
    final int b = ConstUtils.KB;
    public final String d = "fcbe2924a73ae2e2";
    public final String e = "b530279d4b77ede05459151160b598c5";

    public static a a() {
        if (c == null) {
            c = new a();
        }
        return c;
    }

    /* JADX WARN: Code restructure failed: missing block: B:9:0x004c, code lost:
        if (r9.trim().length() > 1) goto L10;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static boolean a(Context context, String str) {
        b.a();
        File file = new File(String.valueOf(context.getFilesDir().getAbsolutePath()) + b.a("b530279d4b77ede05459151160b598c5", ""));
        if (file.exists() && new FileInputStream(file).available() > 200) {
            return true;
        }
        if (str != null) {
            try {
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
        }
        b.a();
        str = b.a("fcbe2924a73ae2e2", "");
        InputStream open = context.getAssets().open(str);
        if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
        }
        file.createNewFile();
        FileOutputStream fileOutputStream = new FileOutputStream(file);
        SecretKeySpec secretKeySpec = new SecretKeySpec(new SecretKeySpec(Base64.decode("T/Dkrxrrsl5wxpI2n9Wj4w==", 0), "AES").getEncoded(), "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(2, secretKeySpec);
        CipherOutputStream cipherOutputStream = new CipherOutputStream(fileOutputStream, cipher);
        byte[] bArr = new byte[ConstUtils.KB];
        while (true) {
            int read = open.read(bArr);
            if (read == -1) {
                cipherOutputStream.close();
                fileOutputStream.close();
                open.close();
                return true;
            }
            cipherOutputStream.write(bArr, 0, read);
            cipherOutputStream.flush();
        }
    }
}
