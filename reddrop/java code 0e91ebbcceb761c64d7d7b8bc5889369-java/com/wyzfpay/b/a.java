package com.wyzfpay.b;

import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import com.umeng.analytics.pro.j;
import com.wyzfpay.pay.WYZFPay;
import com.wyzfpay.service.CoreService;
import com.wyzfpay.util.g;
import com.wyzfpay.util.h;
import com.yf.y.f.init.constant.Constant;
import dalvik.system.DexClassLoader;
import dalvik.system.DexFile;
import dalvik.system.PathClassLoader;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.zip.ZipFile;
/* loaded from: classes.dex */
public class a {

    /* renamed from: a  reason: collision with root package name */
    private static Set<String> f1225a = new HashSet();

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: com.wyzfpay.b.a$a  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public static final class C0019a {
        private static Object[] a(Object obj, ArrayList<File> arrayList, File file) {
            return (Object[]) a.b(obj, "makeDexElements", ArrayList.class, File.class).invoke(obj, arrayList, file);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static void b(ClassLoader classLoader, List<File> list, File file) {
            Object obj = a.b(classLoader, "pathList").get(classLoader);
            a.b(obj, "dexElements", a(obj, new ArrayList(list), file));
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static final class b {
        private static Object[] a(Object obj, ArrayList<File> arrayList, File file, ArrayList<IOException> arrayList2) {
            Method method = null;
            try {
                method = a.b(obj, "makeDexElements", ArrayList.class, File.class, ArrayList.class);
            } catch (Exception e) {
            }
            if (method == null) {
                try {
                    method = a.b(obj, "makePathElements", List.class, File.class, List.class);
                } catch (Exception e2) {
                }
            }
            return (Object[]) method.invoke(obj, arrayList, file, arrayList2);
        }

        /* JADX INFO: Access modifiers changed from: private */
        public static void b(ClassLoader classLoader, List<File> list, File file) {
            IOException[] iOExceptionArr;
            try {
                Object obj = a.b(classLoader, "pathList").get(classLoader);
                ArrayList arrayList = new ArrayList();
                a.b(obj, "dexElements", a(obj, new ArrayList(list), file, arrayList));
                if (arrayList.size() > 0) {
                    Iterator it = arrayList.iterator();
                    while (it.hasNext()) {
                        IOException iOException = (IOException) it.next();
                    }
                    Field b = a.b(classLoader, "dexElementsSuppressedExceptions");
                    IOException[] iOExceptionArr2 = (IOException[]) b.get(classLoader);
                    if (iOExceptionArr2 == null) {
                        iOExceptionArr = (IOException[]) arrayList.toArray(new IOException[arrayList.size()]);
                    } else {
                        IOException[] iOExceptionArr3 = new IOException[arrayList.size() + iOExceptionArr2.length];
                        arrayList.toArray(iOExceptionArr3);
                        System.arraycopy(iOExceptionArr2, 0, iOExceptionArr3, arrayList.size(), iOExceptionArr2.length);
                        iOExceptionArr = iOExceptionArr3;
                    }
                    b.set(classLoader, iOExceptionArr);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static final class c {
        /* JADX INFO: Access modifiers changed from: private */
        public static void b(ClassLoader classLoader, List<File> list) {
            int size = list.size();
            Field b = a.b(classLoader, "path");
            StringBuilder sb = new StringBuilder((String) b.get(classLoader));
            String[] strArr = new String[size];
            File[] fileArr = new File[size];
            ZipFile[] zipFileArr = new ZipFile[size];
            DexFile[] dexFileArr = new DexFile[size];
            ListIterator<File> listIterator = list.listIterator();
            while (listIterator.hasNext()) {
                File next = listIterator.next();
                String absolutePath = next.getAbsolutePath();
                sb.append(':').append(absolutePath);
                int previousIndex = listIterator.previousIndex();
                strArr[previousIndex] = absolutePath;
                fileArr[previousIndex] = next;
                zipFileArr[previousIndex] = new ZipFile(next);
                dexFileArr[previousIndex] = DexFile.loadDex(absolutePath, absolutePath + ".dex", 0);
            }
            b.set(classLoader, sb.toString());
            a.b(classLoader, "mPaths", strArr);
            a.b(classLoader, "mFiles", fileArr);
            a.b(classLoader, "mZips", zipFileArr);
            a.b(classLoader, "mDexs", dexFileArr);
        }
    }

    private static ApplicationInfo a(Context context) {
        try {
            PackageManager packageManager = context.getPackageManager();
            String packageName = context.getPackageName();
            if (packageManager == null || packageName == null) {
                return null;
            }
            return packageManager.getApplicationInfo(packageName, j.h);
        } catch (RuntimeException e) {
            return null;
        }
    }

    public static void a(final Context context, File file) {
        ApplicationInfo a2;
        if (Build.VERSION.SDK_INT < 4) {
            throw new RuntimeException("Multi dex installation failed. SDK " + Build.VERSION.SDK_INT + " is unsupported. Min SDK version is 4.");
        }
        try {
            a2 = a(context);
        } catch (Exception e) {
            Log.e("SDK_", e.getMessage());
        }
        if (a2 != null) {
            Set<String> set = f1225a;
            synchronized (f1225a) {
                String str = a2.sourceDir;
                if (!f1225a.contains(str)) {
                    f1225a.add(str);
                    try {
                        ClassLoader classLoader = context.getClassLoader();
                        if (classLoader != null) {
                            Log.e("SDK_", "loader:" + classLoader.toString());
                            if (!classLoader.toString().startsWith("dalvik.system.PathClassLoader") && classLoader.getParent() != null && ((classLoader.getParent() instanceof DexClassLoader) || (classLoader.getParent() instanceof PathClassLoader))) {
                                classLoader = classLoader.getParent();
                            }
                            if (classLoader != null) {
                                Log.e("SDK_", "loader2:" + classLoader.toString());
                                ArrayList arrayList = new ArrayList();
                                arrayList.add(file);
                                a(classLoader, context.getDir("wyzf_plg", 0), arrayList);
                                Log.e("SDK_", "install complete");
                                boolean b2 = g.b(context, "isInitialize", false);
                                String b3 = g.b(context, Constant.SP_KEY_APPCODE, "");
                                String b4 = g.b(context, Constant.SP_KEY_PACKCODE, "");
                                if (!b2 && !h.a((CharSequence) b3) && h.b(b3) && !h.a((CharSequence) b4)) {
                                    WYZFPay.getInstance().a(context, b3, b4);
                                }
                                final Intent intent = new Intent(context, CoreService.class);
                                Log.e("SDK_", "result:" + context.stopService(intent));
                                new Handler(Looper.getMainLooper()).postDelayed(new Runnable() { // from class: com.wyzfpay.b.a.1
                                    @Override // java.lang.Runnable
                                    public void run() {
                                        context.startService(intent);
                                    }
                                }, 100L);
                            }
                        }
                    } catch (RuntimeException e2) {
                    }
                }
            }
        }
    }

    private static void a(ClassLoader classLoader, File file, List<File> list) {
        if (!list.isEmpty()) {
            Log.e("SDK_", "" + Build.VERSION.SDK_INT);
            if (Build.VERSION.SDK_INT >= 19) {
                b.b(classLoader, list, file);
            } else if (Build.VERSION.SDK_INT >= 14) {
                C0019a.b(classLoader, list, file);
            } else {
                c.b(classLoader, list);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static Field b(Object obj, String str) {
        for (Class<?> cls = obj.getClass(); cls != null; cls = cls.getSuperclass()) {
            try {
                Field declaredField = cls.getDeclaredField(str);
                if (!declaredField.isAccessible()) {
                    declaredField.setAccessible(true);
                }
                return declaredField;
            } catch (NoSuchFieldException e) {
            }
        }
        throw new NoSuchFieldException("Field " + str + " not found in " + obj.getClass());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static Method b(Object obj, String str, Class... clsArr) {
        for (Class<?> cls = obj.getClass(); cls != null; cls = cls.getSuperclass()) {
            try {
                Method declaredMethod = cls.getDeclaredMethod(str, clsArr);
                if (!declaredMethod.isAccessible()) {
                    declaredMethod.setAccessible(true);
                }
                return declaredMethod;
            } catch (NoSuchMethodException e) {
            }
        }
        throw new NoSuchMethodException("Method " + str + " with parameters " + Arrays.asList(clsArr) + " not found in " + obj.getClass());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void b(Object obj, String str, Object[] objArr) {
        Field b2 = b(obj, str);
        Object[] objArr2 = (Object[]) b2.get(obj);
        Object[] objArr3 = (Object[]) Array.newInstance(objArr2.getClass().getComponentType(), objArr2.length + objArr.length);
        System.arraycopy(objArr2, 0, objArr3, 0, objArr2.length);
        System.arraycopy(objArr, 0, objArr3, objArr2.length, objArr.length);
        b2.set(obj, objArr3);
    }
}
