package com.wyzfpay.util;

import android.content.Context;
import android.os.Environment;
import android.util.Log;
import com.yuanlang.pay.plugin.libs.c;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
/* loaded from: classes.dex */
public class LogUtils {
    private static Context context;
    private static boolean logSwitch = true;
    private static boolean log2FileSwitch = false;
    private static char logFilter = 'v';
    private static String tag = "TAG";
    private static String dir = null;
    private static int stackIndex = 0;

    /* loaded from: classes.dex */
    public static class a {

        /* renamed from: a  reason: collision with root package name */
        private boolean f1234a = true;
        private boolean b = false;
        private char c = 'v';
        private String d = "TAG";
    }

    private LogUtils() {
        throw new UnsupportedOperationException("u can't instantiate me...");
    }

    public static void d(Object obj) {
        log(tag, obj.toString(), null, 'd');
    }

    public static void d(String str, Object obj) {
        log(str, obj.toString(), null, 'd');
    }

    public static void d(String str, Object obj, Throwable th) {
        log(str, obj.toString(), th, 'd');
    }

    public static void e(Object obj) {
        log(tag, obj.toString(), null, 'e');
    }

    public static void e(String str, Object obj) {
        log(str, obj.toString(), null, 'e');
    }

    public static void e(String str, Object obj, Throwable th) {
        log(str, obj.toString(), th, 'e');
    }

    private static String generateTag(String str) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        if (stackIndex == 0) {
            while (!stackTrace[stackIndex].getMethodName().equals("generateTag")) {
                stackIndex++;
            }
            stackIndex += 3;
        }
        StackTraceElement stackTraceElement = stackTrace[stackIndex];
        String className = stackTraceElement.getClassName();
        return String.format("Tag[" + str + "] %s[%s, %d]", className.substring(className.lastIndexOf(".") + 1), stackTraceElement.getMethodName(), Integer.valueOf(stackTraceElement.getLineNumber()));
    }

    public static a getBuilder() {
        if ("mounted".equals(Environment.getExternalStorageState())) {
            dir = context.getApplicationContext().getExternalCacheDir().getPath() + File.separator + "log" + File.separator;
        } else {
            dir = context.getApplicationContext().getCacheDir().getPath() + File.separator + "log" + File.separator;
        }
        return new a();
    }

    public static void i(Object obj) {
        log(tag, obj.toString(), null, 'i');
    }

    public static void i(String str, Object obj) {
        log(str, obj.toString(), null, 'i');
    }

    public static void i(String str, Object obj, Throwable th) {
        log(str, obj.toString(), th, 'i');
    }

    public static void init(boolean z, boolean z2, char c, String str, Context context2) {
        if ("mounted".equals(Environment.getExternalStorageState())) {
            dir = Environment.getExternalStorageDirectory().getPath() + File.separator;
        } else {
            dir = context2.getApplicationContext().getCacheDir().getPath() + File.separator;
        }
        logSwitch = z;
        log2FileSwitch = z2;
        logFilter = c;
        tag = str;
        context = context2;
    }

    private static void log(String str, String str2, Throwable th, char c) {
        if (str2 != null && !str2.isEmpty() && logSwitch) {
            if ('e' == c && ('e' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(str), str2, th, 'e');
            } else if ('w' == c && ('w' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(str), str2, th, 'w');
            } else if ('d' == c && ('d' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(str), str2, th, 'd');
            } else if ('i' == c && ('d' == logFilter || 'v' == logFilter)) {
                printLog(generateTag(str), str2, th, 'i');
            }
            if (log2FileSwitch) {
                log2File(c, generateTag(str), str2 + '\n' + Log.getStackTraceString(th));
            }
        }
    }

    private static synchronized void log2File(char c, String str, String str2) {
        synchronized (LogUtils.class) {
            Date date = new Date();
            final String str3 = dir + new SimpleDateFormat("MM-dd", Locale.getDefault()).format(date) + ".txt";
            if (f.b(str3)) {
                final String str4 = new SimpleDateFormat("MM-dd HH:mm:ss.SSS", Locale.getDefault()).format(date) + ":" + c + ":" + str + ":" + str2 + '\n';
                new Thread(new Runnable() { // from class: com.wyzfpay.util.LogUtils.1
                    @Override // java.lang.Runnable
                    public void run() {
                        BufferedWriter bufferedWriter;
                        IOException e;
                        BufferedWriter bufferedWriter2 = null;
                        try {
                            try {
                                bufferedWriter = new BufferedWriter(new FileWriter(str3, true));
                                try {
                                    bufferedWriter.write(str4);
                                    b.a(bufferedWriter);
                                } catch (IOException e2) {
                                    e = e2;
                                    e.printStackTrace();
                                    b.a(bufferedWriter);
                                }
                            } catch (Throwable th) {
                                th = th;
                                bufferedWriter2 = bufferedWriter;
                                b.a(bufferedWriter2);
                                throw th;
                            }
                        } catch (IOException e3) {
                            e = e3;
                            bufferedWriter = null;
                        } catch (Throwable th2) {
                            th = th2;
                            b.a(bufferedWriter2);
                            throw th;
                        }
                    }
                }).start();
            }
        }
    }

    private static void printLog(String str, String str2, Throwable th, char c) {
        int i = 0;
        int length = str2.length();
        while (true) {
            int i2 = i;
            if (i2 * 4000 < length) {
                String substring = str2.substring(i2 * 4000, (i2 + 1) * 4000 < length ? (i2 + 1) * 4000 : length);
                switch (c) {
                    case 'd':
                        Log.d(str, substring, th);
                        break;
                    case c.Q /* 101 */:
                        Log.e(str, substring, th);
                        break;
                    case 'i':
                        Log.i(str, substring, th);
                        break;
                    case 'w':
                        Log.w(str, substring, th);
                        break;
                }
                i = i2 + 1;
            } else {
                return;
            }
        }
    }

    public static void v(Object obj) {
        log(tag, obj.toString(), null, 'i');
    }

    public static void v(String str, Object obj) {
        log(str, obj.toString(), null, 'i');
    }

    public static void v(String str, Object obj, Throwable th) {
        log(str, obj.toString(), th, 'v');
    }

    public static void w(Object obj) {
        log(tag, obj.toString(), null, 'w');
    }

    public static void w(String str, Object obj) {
        log(str, obj.toString(), null, 'w');
    }

    public static void w(String str, Object obj, Throwable th) {
        log(str, obj.toString(), th, 'w');
    }
}
