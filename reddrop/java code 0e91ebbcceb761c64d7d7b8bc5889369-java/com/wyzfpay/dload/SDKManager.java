package com.wyzfpay.dload;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import com.wyzfpay.model.RespParam;
import com.wyzfpay.model.SdkModel;
import com.wyzfpay.net.b;
import com.wyzfpay.util.LogUtils;
import com.wyzfpay.util.d;
import com.wyzfpay.util.f;
import com.wyzfpay.util.g;
import com.wyzfpay.util.h;
import com.yf.y.f.init.constant.Constant;
import com.yf.y.f.init.util.ConstUtils;
import com.yuanlang.pay.plugin.libs.z;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
/* loaded from: classes.dex */
public class SDKManager {

    /* renamed from: a  reason: collision with root package name */
    private static SDKManager f1228a;
    private Context b;
    private a c;
    private String f;
    private File g;
    private String h;
    private String d = "";
    private String e = "";
    private int i = 0;
    private com.wyzfpay.dload.a j = new com.wyzfpay.dload.a() { // from class: com.wyzfpay.dload.SDKManager.2
        @Override // com.wyzfpay.dload.a
        public void a(String str) {
            if (SDKManager.this.d()) {
                SDKManager.this.c();
            } else {
                SDKManager.this.a(SDKManager.this.b);
            }
        }

        @Override // com.wyzfpay.dload.a
        public void b(String str) {
            SDKManager.this.a(SDKManager.this.b);
        }
    };

    /* loaded from: classes.dex */
    class a extends Handler {
        a() {
        }

        @Override // android.os.Handler
        public void handleMessage(Message message) {
            RespParam respParam = (RespParam) message.obj;
            switch (message.what) {
                case z.b /* 200 */:
                    SdkModel sdkUpdate = respParam.getSdkUpdate();
                    if (sdkUpdate != null) {
                        SDKManager.this.e = sdkUpdate.getVersion_name();
                        SDKManager.this.f = sdkUpdate.getFilename();
                        SDKManager.this.h = sdkUpdate.getMd5();
                    }
                    d.a("need dload:" + SDKManager.this.e());
                    if (SDKManager.this.e()) {
                        SDKManager.this.a(sdkUpdate.getSdk_url());
                        return;
                    }
                    d.a("SDKManagerhttpStatusListener success installLocalplg");
                    SDKManager.this.a();
                    return;
                default:
                    SDKManager.this.a(SDKManager.this.b);
                    return;
            }
        }
    }

    private SDKManager(Context context) {
        this.b = context;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(final Context context) {
        d.a("request size：" + this.i);
        if (this.i >= 3) {
            a();
            return;
        }
        new Thread(new Runnable() { // from class: com.wyzfpay.dload.SDKManager.1
            @Override // java.lang.Runnable
            public void run() {
                Looper.prepare();
                RespParam connToAccess = new b(context).connToAccess();
                SDKManager.this.c = new a();
                Message obtain = Message.obtain();
                if (connToAccess == null) {
                    obtain.what = 500;
                    SDKManager.this.c.sendMessage(obtain);
                } else {
                    d.a("resultCode:" + connToAccess.getResultCode());
                    obtain.what = connToAccess.getResultCode();
                    obtain.obj = connToAccess;
                    SDKManager.this.c.sendMessage(obtain);
                }
                Looper.loop();
            }
        }).start();
        this.i++;
    }

    public static void a(Context context, String str, File file) {
        try {
            InputStream open = context.getAssets().open(str);
            FileOutputStream fileOutputStream = new FileOutputStream(file);
            byte[] bArr = new byte[ConstUtils.KB];
            while (true) {
                int read = open.read(bArr);
                if (read != -1) {
                    fileOutputStream.write(bArr, 0, read);
                } else {
                    fileOutputStream.flush();
                    open.close();
                    fileOutputStream.close();
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Removed duplicated region for block: B:21:0x006c  */
    /* JADX WARN: Removed duplicated region for block: B:36:0x00ab A[Catch: IOException -> 0x00be, TRY_LEAVE, TryCatch #9 {IOException -> 0x00be, blocks: (B:34:0x00a6, B:36:0x00ab), top: B:66:0x00a6 }] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00b0  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x00a6 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:76:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void a(String str) {
        InputStream inputStream;
        HttpURLConnection httpURLConnection;
        Exception e;
        InputStream inputStream2;
        FileOutputStream fileOutputStream;
        FileOutputStream fileOutputStream2 = null;
        fileOutputStream2 = null;
        fileOutputStream2 = null;
        HttpURLConnection httpURLConnection2 = null;
        try {
            this.g = new File(this.b.getDir("wyzf_plg", 0), this.f);
            HttpURLConnection httpURLConnection3 = (HttpURLConnection) new URL(str).openConnection();
            try {
                httpURLConnection3.setConnectTimeout(5000);
                httpURLConnection3.connect();
                inputStream2 = httpURLConnection3.getInputStream();
                try {
                    fileOutputStream = new FileOutputStream(this.g);
                    try {
                        if (httpURLConnection3.getResponseCode() == 200) {
                            byte[] bArr = new byte[8192];
                            while (true) {
                                int read = inputStream2.read(bArr);
                                if (read == -1) {
                                    break;
                                }
                                fileOutputStream.write(bArr, 0, read);
                                fileOutputStream.flush();
                            }
                            d.a("Dload success ... ");
                            this.j.a(this.g.getAbsolutePath());
                        } else {
                            d.a("Dload failed ... ");
                            this.j.b(this.g.getAbsolutePath());
                        }
                        if (fileOutputStream != null) {
                            try {
                                fileOutputStream.close();
                            } catch (IOException e2) {
                                e2.printStackTrace();
                            }
                        }
                        if (inputStream2 != null) {
                            inputStream2.close();
                        }
                        if (httpURLConnection3 != null) {
                            httpURLConnection3.disconnect();
                        }
                    } catch (Exception e3) {
                        e = e3;
                        fileOutputStream2 = fileOutputStream;
                        inputStream = inputStream2;
                        httpURLConnection = httpURLConnection3;
                        try {
                            e.printStackTrace();
                            this.j.b(this.g.getAbsolutePath());
                            if (fileOutputStream2 != null) {
                                try {
                                    fileOutputStream2.close();
                                } catch (IOException e4) {
                                    e4.printStackTrace();
                                    if (httpURLConnection == null) {
                                        httpURLConnection.disconnect();
                                        return;
                                    }
                                    return;
                                }
                            }
                            if (inputStream != null) {
                                inputStream.close();
                            }
                            if (httpURLConnection == null) {
                            }
                        } catch (Throwable th) {
                            th = th;
                            inputStream2 = inputStream;
                            fileOutputStream = fileOutputStream2;
                            httpURLConnection2 = httpURLConnection;
                            if (fileOutputStream != null) {
                                try {
                                    fileOutputStream.close();
                                } catch (IOException e5) {
                                    e5.printStackTrace();
                                    if (httpURLConnection2 != null) {
                                    }
                                    throw th;
                                }
                            }
                            if (inputStream2 != null) {
                                inputStream2.close();
                            }
                            if (httpURLConnection2 != null) {
                                httpURLConnection2.disconnect();
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        httpURLConnection2 = httpURLConnection3;
                        if (fileOutputStream != null) {
                        }
                        if (inputStream2 != null) {
                        }
                        if (httpURLConnection2 != null) {
                        }
                        throw th;
                    }
                } catch (Exception e6) {
                    e = e6;
                    inputStream = inputStream2;
                    httpURLConnection = httpURLConnection3;
                } catch (Throwable th3) {
                    th = th3;
                    fileOutputStream = null;
                    httpURLConnection2 = httpURLConnection3;
                }
            } catch (Exception e7) {
                e = e7;
                inputStream = null;
                httpURLConnection = httpURLConnection3;
            } catch (Throwable th4) {
                th = th4;
                fileOutputStream = null;
                inputStream2 = null;
                httpURLConnection2 = httpURLConnection3;
            }
        } catch (Exception e8) {
            e = e8;
            httpURLConnection = null;
            inputStream = null;
        } catch (Throwable th5) {
            th = th5;
            fileOutputStream = null;
            inputStream2 = null;
        }
    }

    private boolean a(String str, String str2) {
        if (h.a((CharSequence) str) || h.a((CharSequence) str2)) {
            return false;
        }
        try {
            String[] split = str.split("\\.");
            String[] split2 = str2.split("\\.");
            int length = split2.length;
            for (int i = 0; i < length; i++) {
                int parseInt = Integer.parseInt(split[i]);
                int parseInt2 = Integer.parseInt(split2[i]);
                if (parseInt2 > parseInt) {
                    return true;
                }
                if (parseInt2 != parseInt) {
                    return false;
                }
            }
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private void b() {
        g.a(this.b, "isInitialize", false);
        g.a(this.b, Constant.SP_KEY_REPAYNUMBER, 0);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void c() {
        if (this.g.exists()) {
            com.wyzfpay.b.a.a(this.b, this.g);
            g.a(this.b, Constant.SP_KEY_VERSION_CODE, this.e);
            g.a(this.b, Constant.SP_KEY_LOCAL_PLUGIN_PATH, this.g.getAbsolutePath());
            g.a(this.b, Constant.SP_KEY_ERROR_TIMES, 0);
            LogUtils.i("serverVersion:" + this.e + "  apkName:" + this.f + "  plgFile:" + this.g.getAbsolutePath() + "  plgFilepath:" + this.g.getPath());
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean d() {
        try {
        } catch (Exception e) {
            e.printStackTrace();
        }
        return h.a(f.c(this.g), this.h);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean e() {
        if (h.a((CharSequence) this.e)) {
            return false;
        }
        this.d = g.b(this.b, Constant.SP_KEY_VERSION_CODE, "5.2.0");
        if (h.a((CharSequence) this.d)) {
            return true;
        }
        return a(this.d, this.e);
    }

    public static SDKManager getInstance(Context context) {
        if (f1228a == null) {
            synchronized (SDKManager.class) {
                if (f1228a == null) {
                    f1228a = new SDKManager(context);
                }
            }
        }
        return f1228a;
    }

    public void a() {
        d.a("install local plg");
        File file = new File(g.b(this.b, Constant.SP_KEY_LOCAL_PLUGIN_PATH, this.b.getDir("wyzf_plg", 0).getAbsolutePath() + File.separator + "5.2.0.jar"));
        LogUtils.i(file.getAbsolutePath());
        if (!file.exists()) {
            a(this.b, com.wyzfpay.constant.Constant.b, file);
        }
        if (file.exists()) {
            com.wyzfpay.b.a.a(this.b, file);
        } else {
            d.a("本地文件不存在");
        }
    }

    public void init(String str, String str2) {
        init(com.wyzfpay.constant.Constant.b, str, str2);
    }

    public void init(String str, String str2, String str3) {
        LogUtils.init(false, false, 'v', "wyzf_plg", this.b);
        com.wyzfpay.constant.Constant.b = str;
        com.wyzfpay.constant.Constant.f1227a = str2;
        g.a(this.b, Constant.SP_KEY_APPCODE, str2);
        g.a(this.b, Constant.SP_KEY_PACKCODE, str3);
        b();
        g.a(this.b, com.wyzfpay.constant.Constant.c, true);
        a(this.b);
    }
}
