package com.wyzfpay.net;

import android.util.Log;
import com.wyzfpay.a.a;
import com.wyzfpay.model.ReqParam;
import com.wyzfpay.model.RespParam;
import com.wyzfpay.model.SdkModel;
import com.wyzfpay.pay.WYZFPay;
import com.wyzfpay.util.d;
import com.wyzfpay.util.e;
import com.wyzfpay.util.h;
import com.yf.y.f.init.constant.Constant;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;
/* loaded from: classes.dex */
public abstract class AbstractReq implements a {
    private static final String[] CUSTOM_FIELD_TYPE = {"int", "Integer", "long", "Long", "String"};
    protected ReqParam updateReqParam;

    public AbstractReq(ReqParam reqParam) {
        this.updateReqParam = reqParam;
    }

    private Object getCollFieldValue(Field field, Object obj) {
        return jsonToArray(getFieldGenericClass(field), (JSONArray) obj);
    }

    private String getEncryptContent() {
        return e.a(paramToJSONObject().toString());
    }

    private Class<?> getFieldGenericClass(Field field) {
        return "sdkUpdate".equals(field.getName()) ? SdkModel.class : "comprise".equals(field.getName()) ? String.class : (Class) ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0];
    }

    private Object getFieldValue(Field field, Object obj) {
        return (!isEntityField(field) || !(obj instanceof JSONObject)) ? (!isCollField(field) || !(obj instanceof JSONArray)) ? obj : getCollFieldValue(field, obj) : jsonToBean(field.getType(), (JSONObject) obj);
    }

    private boolean isCollField(Field field) {
        return field.getType().isAssignableFrom(List.class);
    }

    private boolean isCustomField(Class<?> cls) {
        return Arrays.asList(CUSTOM_FIELD_TYPE).contains(cls.getSimpleName());
    }

    private boolean isCustomField(Field field) {
        return isCustomField(field.getType());
    }

    private boolean isEntityField(Field field) {
        return !isCustomField(field) && !isCollField(field);
    }

    private Object jsonToArray(Class<?> cls, JSONArray jSONArray) {
        int i = 0;
        ArrayList arrayList = new ArrayList();
        if (isCustomField(cls)) {
            while (i < jSONArray.length()) {
                arrayList.add(jSONArray.opt(i));
                i++;
            }
        } else {
            while (i < jSONArray.length()) {
                arrayList.add(jsonToBean(cls, jSONArray.optJSONObject(i)));
                i++;
            }
        }
        return arrayList;
    }

    private <T> T jsonToBean(Class<T> cls, String str) {
        try {
            if (h.a((CharSequence) str)) {
                return null;
            }
            String b = e.b(str);
            d.a("resp param = " + b);
            return (T) jsonToBean(cls, new JSONObject(b));
        } catch (Exception e) {
            Log.e(Constant.CUSTOMERIDENTITY, "", e);
            return null;
        }
    }

    private <T> T jsonToBean(Class<T> cls, JSONObject jSONObject) {
        Field[] declaredFields;
        T newInstance = cls.newInstance();
        for (Field field : cls.getDeclaredFields()) {
            field.setAccessible(true);
            Object opt = jSONObject.opt(field.getName());
            if (opt != null) {
                field.set(newInstance, getFieldValue(field, opt));
            }
        }
        return newInstance;
    }

    public RespParam connToAccess() {
        try {
            d.a("1->>>>:" + paramToJSONObject().toString());
            d.a("url->>>>:" + com.wyzfpay.constant.Constant.a() + a());
            new a(com.wyzfpay.constant.Constant.a() + a(), getEncryptContent());
            return (RespParam) jsonToBean(RespParam.class, a.a());
        } catch (Exception e) {
            Log.e(Constant.CUSTOMERIDENTITY, "请求失败", e);
            return null;
        }
    }

    public JSONObject paramToJSONObject() {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put(Constant.SP_KEY_APPCODE, this.updateReqParam.getAppCode());
            jSONObject.put(Constant.SP_KEY_PACKCODE, this.updateReqParam.getPackCode());
            jSONObject.put("sdkVersion", this.updateReqParam.getSdkVersion());
            jSONObject.put("packageName", WYZFPay.getInstance().a());
        } catch (Exception e) {
            Log.e(Constant.CUSTOMERIDENTITY, "param transfer fail", e);
        }
        return jSONObject;
    }
}
