package com.yf.y.f.init.util;

import android.annotation.SuppressLint;
import android.util.Log;
import com.yf.y.f.init.constant.Constant;
import java.net.URLDecoder;
import java.net.URLEncoder;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
/* loaded from: classes.dex */
public class DesUtil {
    private static final byte[] IV = {6, 6, 3, 3, 8, 7, 2, 3};
    private static final String KEY = "86324958";

    @SuppressLint({"TrulyRandom"})
    public static String encryptDES(String encryptString) {
        try {
            String encryptString2 = StringToByte(encryptString);
            IvParameterSpec zeroIv = new IvParameterSpec(IV);
            SecretKeySpec key = new SecretKeySpec(KEY.getBytes(), "DES");
            Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
            cipher.init(1, key, zeroIv);
            byte[] encryptedData = cipher.doFinal(encryptString2.getBytes());
            return URLEncoder.encode(Base64.encode(encryptedData), "utf-8");
        } catch (Exception e) {
            Log.e(Constant.TAG, "", e);
            return null;
        }
    }

    public static String decryptDES(String decryptString) {
        Exception e;
        String decryptString2;
        try {
            String decryptString3 = URLDecoder.decode(decryptString, "utf-8");
            new Base64();
            byte[] byteMi = Base64.decode(decryptString3);
            IvParameterSpec zeroIv = new IvParameterSpec(IV);
            SecretKeySpec key = new SecretKeySpec(KEY.getBytes(), "DES");
            Cipher cipher = Cipher.getInstance("DES/CBC/PKCS5Padding");
            cipher.init(2, key, zeroIv);
            byte[] decryptedData = cipher.doFinal(byteMi);
            decryptString2 = new String(decryptedData);
        } catch (Exception e2) {
            e = e2;
        }
        try {
            return byteToString(decryptString2);
        } catch (Exception e3) {
            e = e3;
            Log.e(Constant.TAG, "", e);
            return null;
        }
    }

    public static String StringToByte(String str) {
        String byteString = "";
        if ("".equalsIgnoreCase(str) || str == null) {
            return "";
        }
        byte[] ret = null;
        try {
            ret = str.getBytes("utf-8");
        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int i = 0; i < ret.length; i++) {
            if (i + 1 == ret.length) {
                byteString = byteString + ((int) ret[i]);
            } else {
                byteString = byteString + ((int) ret[i]) + ",";
            }
        }
        return byteString;
    }

    public static String byteToString(String Str) throws Exception {
        String[] array = Str.replace("\r\n", "").split(",");
        byte[] b = new byte[array.length];
        for (int i = 0; i < array.length; i++) {
            b[i] = Byte.valueOf(array[i]).byteValue();
        }
        return new String(b, "utf-8");
    }
}
