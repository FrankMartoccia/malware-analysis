package com.yf.y.f.init.util;

import android.annotation.SuppressLint;
import com.umeng.analytics.pro.dm;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
/* loaded from: classes.dex */
public class ConvertUtils {
    private static final char[] hexDigits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

    private ConvertUtils() {
        throw new UnsupportedOperationException("u can't instantiate me...");
    }

    public static String bytes2HexString(byte[] bytes) {
        int len;
        if (bytes == null || (len = bytes.length) <= 0) {
            return null;
        }
        char[] ret = new char[len << 1];
        int j = 0;
        for (int i = 0; i < len; i++) {
            int j2 = j + 1;
            ret[j] = hexDigits[(bytes[i] >>> 4) & 15];
            j = j2 + 1;
            ret[j2] = hexDigits[bytes[i] & dm.m];
        }
        return new String(ret);
    }

    @SuppressLint({"DefaultLocale"})
    public static String byte2FitMemorySize(long byteNum) {
        if (byteNum < 0) {
            return "shouldn't be less than zero!";
        }
        if (byteNum < 1024) {
            return String.format("%.3fB", Double.valueOf(byteNum + 5.0E-4d));
        }
        if (byteNum < 1048576) {
            return String.format("%.3fKB", Double.valueOf((byteNum / 1024) + 5.0E-4d));
        }
        if (byteNum < 1073741824) {
            return String.format("%.3fMB", Double.valueOf((byteNum / 1048576) + 5.0E-4d));
        }
        return String.format("%.3fGB", Double.valueOf((byteNum / 1073741824) + 5.0E-4d));
    }

    public static ByteArrayOutputStream input2OutputStream(InputStream is) {
        try {
            if (is == null) {
                return null;
            }
            try {
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                byte[] b = new byte[ConstUtils.KB];
                while (true) {
                    int len = is.read(b, 0, ConstUtils.KB);
                    if (len != -1) {
                        os.write(b, 0, len);
                    } else {
                        CloseUtils.closeIO(is);
                        return os;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
                CloseUtils.closeIO(is);
                return null;
            }
        } catch (Throwable th) {
            CloseUtils.closeIO(is);
            throw th;
        }
    }

    public static byte[] inputStream2Bytes(InputStream is) {
        if (is == null) {
            return null;
        }
        return input2OutputStream(is).toByteArray();
    }
}
