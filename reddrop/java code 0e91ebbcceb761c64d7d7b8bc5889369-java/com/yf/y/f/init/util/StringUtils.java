package com.yf.y.f.init.util;
/* loaded from: classes.dex */
public class StringUtils {
    private StringUtils() {
        throw new UnsupportedOperationException("u can't instantiate me...");
    }

    public static boolean isEmpty(CharSequence s) {
        return s == null || s.length() == 0;
    }

    public static boolean isSpace(String s) {
        return s == null || s.trim().length() == 0;
    }

    public static boolean equals(CharSequence a2, CharSequence b) {
        int length;
        if (a2 == b) {
            return true;
        }
        if (a2 == null || b == null || (length = a2.length()) != b.length()) {
            return false;
        }
        if ((a2 instanceof String) && (b instanceof String)) {
            return a2.equals(b);
        }
        for (int i = 0; i < length; i++) {
            if (a2.charAt(i) != b.charAt(i)) {
                return false;
            }
        }
        return true;
    }

    public static boolean equalsIgnoreCase(String a2, String b) {
        return a2 == b || (b != null && a2.length() == b.length() && a2.regionMatches(true, 0, b, 0, b.length()));
    }

    public static String null2Length0(String s) {
        return s == null ? "" : s;
    }

    public static int length(CharSequence s) {
        if (s == null) {
            return 0;
        }
        return s.length();
    }

    public static String upperFirstLetter(String s) {
        if (isEmpty(s) || !Character.isLowerCase(s.charAt(0))) {
            return s;
        }
        return String.valueOf((char) (s.charAt(0) - ' ')) + s.substring(1);
    }

    public static String lowerFirstLetter(String s) {
        if (isEmpty(s) || !Character.isUpperCase(s.charAt(0))) {
            return s;
        }
        return String.valueOf((char) (s.charAt(0) + ' ')) + s.substring(1);
    }

    public static String reverse(String s) {
        int len = length(s);
        if (len <= 1) {
            return s;
        }
        int mid = len >> 1;
        char[] chars = s.toCharArray();
        for (int i = 0; i < mid; i++) {
            char c = chars[i];
            chars[i] = chars[(len - i) - 1];
            chars[(len - i) - 1] = c;
        }
        return new String(chars);
    }

    public static String toDBC(String s) {
        if (isEmpty(s)) {
            return s;
        }
        char[] chars = s.toCharArray();
        int len = chars.length;
        for (int i = 0; i < len; i++) {
            if (chars[i] == 12288) {
                chars[i] = ' ';
            } else if (65281 > chars[i] || chars[i] > 65374) {
                chars[i] = chars[i];
            } else {
                chars[i] = (char) (chars[i] - 65248);
            }
        }
        return new String(chars);
    }

    public static String toSBC(String s) {
        if (isEmpty(s)) {
            return s;
        }
        char[] chars = s.toCharArray();
        int len = chars.length;
        for (int i = 0; i < len; i++) {
            if (chars[i] == ' ') {
                chars[i] = 12288;
            } else if ('!' > chars[i] || chars[i] > '~') {
                chars[i] = chars[i];
            } else {
                chars[i] = (char) (chars[i] + 65248);
            }
        }
        return new String(chars);
    }

    public static boolean isDigital(String string) {
        if (isEmpty(string)) {
            return false;
        }
        try {
            Integer.parseInt(string);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public static String byteToString(byte[] paramByte) {
        if (paramByte == null || paramByte.length == 0) {
            return "";
        }
        try {
            StringBuilder sb = new StringBuilder();
            for (byte b : paramByte) {
                char c = (char) b;
                sb.append(c);
            }
            return sb.toString();
        } catch (Exception e) {
            return "";
        }
    }
}
