package com.cocos.util;

import android.content.Context;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.text.TextUtils;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/* loaded from: classes.dex */
public final class StorageUtil {
    private static final int JELLY_BEAN_MR2 = 18;
    public static Context context;
    private static String internalStorageDirectory;
    private static String otherExternalStorageDirectory = null;
    private static int kOtherExternalStorageStateUnknow = -1;
    private static int kOtherExternalStorageStateUnable = 0;
    private static int kOtherExternalStorageStateIdle = 1;
    private static int otherExternalStorageState = kOtherExternalStorageStateUnknow;

    public static void init(Context cxt) {
        context = cxt;
    }

    public static long getExternaltStorageAvailableSpace() {
        long blockSize;
        long availableBlocks;
        if (!Environment.getExternalStorageState().equals("mounted")) {
            return 0L;
        }
        File path = Environment.getExternalStorageDirectory();
        StatFs statfs = new StatFs(path.getPath());
        if (Build.VERSION.SDK_INT >= 18) {
            blockSize = statfs.getBlockSizeLong();
        } else {
            blockSize = statfs.getBlockSize();
        }
        if (Build.VERSION.SDK_INT >= 18) {
            availableBlocks = statfs.getAvailableBlocksLong();
        } else {
            availableBlocks = statfs.getAvailableBlocks();
        }
        return blockSize * availableBlocks;
    }

    public static final String getInternalStorageDirectory() {
        if (context != null && TextUtils.isEmpty(internalStorageDirectory)) {
            File file = context.getFilesDir();
            internalStorageDirectory = file.getAbsolutePath();
            if (!file.exists()) {
                file.mkdirs();
            }
            String shellScript = "chmod 705 " + internalStorageDirectory;
            runShellScriptForWait(shellScript);
        }
        return internalStorageDirectory;
    }

    public static long getInternalStorageAvailableSpace() {
        long blockSize;
        long availableBlocks;
        String path = getInternalStorageDirectory();
        if (TextUtils.isEmpty(path)) {
            return 0L;
        }
        StatFs stat = new StatFs(path);
        if (Build.VERSION.SDK_INT >= 18) {
            blockSize = stat.getBlockSizeLong();
        } else {
            blockSize = stat.getBlockSize();
        }
        if (Build.VERSION.SDK_INT >= 18) {
            availableBlocks = stat.getAvailableBlocksLong();
        } else {
            availableBlocks = stat.getAvailableBlocks();
        }
        return blockSize * availableBlocks;
    }

    public static final String getExternalStorageDirectory() {
        return Environment.getExternalStorageDirectory() + File.separator;
    }

    public static long getSdcard2StorageAvailableSpace() {
        long blockSize;
        long availableBlocks;
        if (!Environment.getExternalStorageState().equals("mounted")) {
            return 0L;
        }
        String path = getSdcard2StorageDirectory();
        File file = new File(path);
        if (!file.exists()) {
            return 0L;
        }
        StatFs statfs = new StatFs(path);
        if (Build.VERSION.SDK_INT >= 18) {
            blockSize = statfs.getBlockSizeLong();
        } else {
            blockSize = statfs.getBlockSize();
        }
        if (Build.VERSION.SDK_INT >= 18) {
            availableBlocks = statfs.getAvailableBlocksLong();
        } else {
            availableBlocks = statfs.getAvailableBlocks();
        }
        return blockSize * availableBlocks;
    }

    public static final String getSdcard2StorageDirectory() {
        return "/mnt/sdcard2/";
    }

    private static boolean runShellScriptForWait(String cmd) throws SecurityException {
        ShellThread thread = new ShellThread(cmd);
        thread.setDaemon(true);
        thread.start();
        int k = 0;
        while (true) {
            if (thread.isReturn()) {
                break;
            }
            int k2 = k + 1;
            if (k >= 20) {
                k = k2;
                break;
            }
            try {
                Thread.sleep(50L);
                k = k2;
            } catch (InterruptedException e) {
                e.printStackTrace();
                k = k2;
            }
        }
        if (k >= 20) {
            thread.interrupt();
        }
        return thread.isSuccess();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static class ShellThread extends Thread {
        private String cmd;
        private boolean isReturn;
        private boolean isSuccess;

        public boolean isReturn() {
            return this.isReturn;
        }

        public boolean isSuccess() {
            return this.isSuccess;
        }

        public ShellThread(String cmd) {
            this.cmd = cmd;
        }

        @Override // java.lang.Thread, java.lang.Runnable
        public void run() {
            boolean z;
            try {
                Runtime runtime = Runtime.getRuntime();
                try {
                    Process proc = runtime.exec(this.cmd);
                    if (proc.waitFor() == 0) {
                        z = true;
                    } else {
                        z = false;
                    }
                    this.isSuccess = z;
                } catch (IOException e) {
                    e.printStackTrace();
                }
                this.isSuccess = true;
            } catch (InterruptedException e2) {
            }
            this.isReturn = true;
        }
    }

    public static long getEmmcStorageAvailableSpace() {
        long blockSize;
        long availableBlocks;
        String path = getEmmcStorageDirectory();
        File file = new File(path);
        if (!file.exists()) {
            return 0L;
        }
        StatFs statfs = new StatFs(path);
        if (Build.VERSION.SDK_INT >= 18) {
            blockSize = statfs.getBlockSizeLong();
        } else {
            blockSize = statfs.getBlockSize();
        }
        if (Build.VERSION.SDK_INT >= 18) {
            availableBlocks = statfs.getAvailableBlocksLong();
        } else {
            availableBlocks = statfs.getAvailableBlocks();
        }
        return blockSize * availableBlocks;
    }

    public static final String getEmmcStorageDirectory() {
        return "/mnt/emmc/";
    }

    public static long getOtherExternaltStorageAvailableSpace() {
        long blockSize;
        long availableBlocks;
        if (!Environment.getExternalStorageState().equals("mounted") || otherExternalStorageState == kOtherExternalStorageStateUnable) {
            return 0L;
        }
        if (otherExternalStorageDirectory == null) {
            getOtherExternalStorageDirectory();
        }
        if (otherExternalStorageDirectory == null) {
            return 0L;
        }
        StatFs statfs = new StatFs(otherExternalStorageDirectory);
        if (Build.VERSION.SDK_INT >= 18) {
            blockSize = statfs.getBlockSizeLong();
        } else {
            blockSize = statfs.getBlockSize();
        }
        if (Build.VERSION.SDK_INT >= 18) {
            availableBlocks = statfs.getAvailableBlocksLong();
        } else {
            availableBlocks = statfs.getAvailableBlocks();
        }
        return blockSize * availableBlocks;
    }

    public static String getOtherExternalStorageDirectory() {
        if (otherExternalStorageState == kOtherExternalStorageStateUnable) {
            return null;
        }
        if (otherExternalStorageState == kOtherExternalStorageStateUnknow) {
            FstabReader fsReader = new FstabReader();
            if (fsReader.size() <= 0) {
                otherExternalStorageState = kOtherExternalStorageStateUnable;
                return null;
            }
            List<StorageInfo> storages = fsReader.getStorages();
            long availableSpace = 104857600;
            String path = null;
            for (int i = 0; i < storages.size(); i++) {
                StorageInfo info = storages.get(i);
                if (info.getAvailableSpace() > availableSpace) {
                    availableSpace = info.getAvailableSpace();
                    path = info.getPath();
                }
            }
            otherExternalStorageDirectory = path;
            if (otherExternalStorageDirectory != null) {
                otherExternalStorageState = kOtherExternalStorageStateIdle;
            } else {
                otherExternalStorageState = kOtherExternalStorageStateUnable;
            }
            if (!TextUtils.isEmpty(otherExternalStorageDirectory) && !otherExternalStorageDirectory.endsWith("/")) {
                otherExternalStorageDirectory = String.valueOf(otherExternalStorageDirectory) + "/";
            }
        }
        return otherExternalStorageDirectory;
    }

    /* loaded from: classes.dex */
    public static class FstabReader {
        final List<StorageInfo> storages = new ArrayList();

        public FstabReader() {
            init();
        }

        public int size() {
            if (this.storages == null) {
                return 0;
            }
            return this.storages.size();
        }

        public List<StorageInfo> getStorages() {
            return this.storages;
        }

        public void init() {
            Throwable th;
            Exception e;
            BufferedReader br;
            long blockSize;
            long totalBlocks;
            long availableBlocks;
            File file = new File("/system/etc/vold.fstab");
            if (file.exists()) {
                FileReader fr = null;
                BufferedReader br2 = null;
                try {
                    try {
                        FileReader fr2 = new FileReader(file);
                        if (fr2 != null) {
                            try {
                                br = new BufferedReader(fr2);
                            } catch (Exception e2) {
                                e = e2;
                                fr = fr2;
                            } catch (Throwable th2) {
                                th = th2;
                                fr = fr2;
                            }
                            try {
                                for (String s = br.readLine(); s != null; s = br.readLine()) {
                                    if (s.startsWith("dev_mount")) {
                                        String[] tokens = s.split("\\s");
                                        String path = tokens[2];
                                        StatFs stat = new StatFs(path);
                                        if (Build.VERSION.SDK_INT >= 18) {
                                            blockSize = stat.getBlockSizeLong();
                                        } else {
                                            blockSize = stat.getBlockSize();
                                        }
                                        if (Build.VERSION.SDK_INT >= 18) {
                                            totalBlocks = stat.getBlockCountLong();
                                        } else {
                                            totalBlocks = stat.getBlockCount();
                                        }
                                        if (Build.VERSION.SDK_INT >= 18) {
                                            availableBlocks = stat.getAvailableBlocksLong();
                                        } else {
                                            availableBlocks = stat.getAvailableBlocks();
                                        }
                                        if (stat != null && availableBlocks > 0) {
                                            long availableSpace = availableBlocks * blockSize;
                                            long totalSpace = totalBlocks * blockSize;
                                            StorageInfo storage = new StorageInfo(path, availableSpace, totalSpace);
                                            this.storages.add(storage);
                                        }
                                    }
                                }
                                br2 = br;
                            } catch (Exception e3) {
                                e = e3;
                                br2 = br;
                                fr = fr2;
                                e.printStackTrace();
                                if (fr != null) {
                                    try {
                                        fr.close();
                                    } catch (IOException e4) {
                                        e4.printStackTrace();
                                    }
                                }
                                if (br2 != null) {
                                    try {
                                        br2.close();
                                    } catch (IOException e5) {
                                        e5.printStackTrace();
                                    }
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                br2 = br;
                                fr = fr2;
                                if (fr != null) {
                                    try {
                                        fr.close();
                                    } catch (IOException e6) {
                                        e6.printStackTrace();
                                    }
                                }
                                if (br2 != null) {
                                    try {
                                        br2.close();
                                    } catch (IOException e7) {
                                        e7.printStackTrace();
                                    }
                                }
                                throw th;
                            }
                        }
                        if (fr2 != null) {
                            try {
                                fr2.close();
                            } catch (IOException e8) {
                                e8.printStackTrace();
                            }
                        }
                        if (br2 != null) {
                            try {
                                br2.close();
                            } catch (IOException e9) {
                                e9.printStackTrace();
                            }
                        }
                    } catch (Throwable th4) {
                        th = th4;
                    }
                } catch (Exception e10) {
                    e = e10;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static class StorageInfo implements Comparable<StorageInfo> {
        private long availableSpace;
        private String path;
        private long totalSpace;

        StorageInfo(String path, long availableSpace, long totalSpace) {
            this.path = path;
            this.availableSpace = availableSpace;
            this.totalSpace = totalSpace;
        }

        public int compareTo(StorageInfo another) {
            return (another != null && this.totalSpace - another.totalSpace <= 0) ? -1 : 1;
        }

        long getAvailableSpace() {
            return this.availableSpace;
        }

        long getTotalSpace() {
            return this.totalSpace;
        }

        String getPath() {
            return this.path;
        }
    }

    public static boolean isSDMounted() {
        String sdState = Environment.getExternalStorageState();
        return sdState.equals("mounted");
    }

    public static boolean isSDAvailable() {
        if (!isSDMounted()) {
            return false;
        }
        File file = Environment.getExternalStorageDirectory();
        if (!file.canRead() || !file.canWrite()) {
            return false;
        }
        return true;
    }
}
