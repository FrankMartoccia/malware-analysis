package com.cocos.util;

import android.content.Context;
import android.text.TextUtils;
import java.io.File;
/* loaded from: classes.dex */
public class FileUtil {
    private static final long MIN_STORAGE = 104857600;

    public static void deleteFile(File file) {
        if (file != null && file.exists()) {
            if (file.isFile()) {
                file.delete();
            } else if (file.isDirectory()) {
                File[] files = file.listFiles();
                if (files != null) {
                    for (File f : files) {
                        deleteFile(f);
                    }
                }
                file.delete();
            }
        }
    }

    public static void mkParentdir(File file) {
        File pfile = file.getParentFile();
        if (!pfile.exists() || !pfile.isDirectory()) {
            pfile.mkdirs();
        }
    }

    public static void mkdirs(String path) {
        File file = new File(path);
        if (!file.exists() || !file.isDirectory()) {
            file.mkdirs();
        }
    }

    public static boolean isFileExist(String path) {
        if (TextUtils.isEmpty(path)) {
            return false;
        }
        File file = new File(path);
        if (file.exists()) {
            return true;
        }
        return false;
    }

    public static String getSavePath() {
        return getSavePath(null, MIN_STORAGE);
    }

    public static String getSavePath(Context context) {
        return getSavePath(context, MIN_STORAGE);
    }

    public static String getSavePath(Context context, long saveSize) {
        StorageUtil.init(context);
        if (StorageUtil.getExternaltStorageAvailableSpace() > saveSize) {
            String savePath = StorageUtil.getExternalStorageDirectory();
            File saveFile = new File(savePath);
            if (!saveFile.exists()) {
                saveFile.mkdirs();
                return savePath;
            } else if (saveFile.isDirectory()) {
                return savePath;
            } else {
                saveFile.delete();
                saveFile.mkdirs();
                return savePath;
            }
        } else if (StorageUtil.getSdcard2StorageAvailableSpace() > saveSize) {
            String savePath2 = StorageUtil.getSdcard2StorageDirectory();
            File saveFile2 = new File(savePath2);
            if (!saveFile2.exists()) {
                saveFile2.mkdirs();
                return savePath2;
            } else if (saveFile2.isDirectory()) {
                return savePath2;
            } else {
                saveFile2.delete();
                saveFile2.mkdirs();
                return savePath2;
            }
        } else if (StorageUtil.getEmmcStorageAvailableSpace() > saveSize) {
            String savePath3 = StorageUtil.getEmmcStorageDirectory();
            File saveFile3 = new File(savePath3);
            if (!saveFile3.exists()) {
                saveFile3.mkdirs();
                return savePath3;
            } else if (saveFile3.isDirectory()) {
                return savePath3;
            } else {
                saveFile3.delete();
                saveFile3.mkdirs();
                return savePath3;
            }
        } else if (StorageUtil.getOtherExternaltStorageAvailableSpace() > saveSize) {
            String savePath4 = StorageUtil.getOtherExternalStorageDirectory();
            File saveFile4 = new File(savePath4);
            if (!saveFile4.exists()) {
                saveFile4.mkdirs();
                return savePath4;
            } else if (saveFile4.isDirectory()) {
                return savePath4;
            } else {
                saveFile4.delete();
                saveFile4.mkdirs();
                return savePath4;
            }
        } else if (StorageUtil.getInternalStorageAvailableSpace() > saveSize) {
            return String.valueOf(StorageUtil.getInternalStorageDirectory()) + File.separator;
        } else {
            return null;
        }
    }

    private static void makeDir(String path) {
        File file = new File(path);
        if (!file.exists()) {
            file.mkdirs();
        }
    }
}
