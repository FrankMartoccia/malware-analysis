package com.cocos.util;

import android.content.Context;
import android.content.res.Configuration;
import android.os.Environment;
import android.util.Log;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
/* loaded from: classes.dex */
public class Tools {
    private static final String SKY_CONFIG = "infos.cfg";
    private static final String tag = "Tools";
    private static String appId_Assets = null;
    private static String merChantId_Assets = null;
    private static String channelId_Assets = null;

    public static boolean isPortrait(Context context) {
        Configuration config = context.getResources().getConfiguration();
        return config.orientation != 2;
    }

    public static String getMerchantId(Context context) {
        String merchantid = null;
        if (SDcardUtil.isSDAvailable()) {
            String filename = Environment.getExternalStorageDirectory() + "/zhimeng123.evn";
            try {
                IniReader reader = new IniReader(filename);
                merchantid = reader.getValue("Usr", "merchantid");
            } catch (IOException e) {
                Log.w(tag, "getMerchantId error", e);
            }
        }
        if (merchantid != null || merChantId_Assets == null) {
            return merchantid;
        }
        return merChantId_Assets;
    }

    public static String getMerchantPwd() {
        String merchantpwd = null;
        if (SDcardUtil.isSDAvailable()) {
            String filename = Environment.getExternalStorageDirectory() + "/zhimeng123.evn";
            try {
                IniReader reader = new IniReader(filename);
                merchantpwd = reader.getValue("Usr", "merchantpwd");
            } catch (IOException e) {
            }
        }
        if (merchantpwd == null || merchantpwd.trim().equals("")) {
            return "zz$r0oiljy";
        }
        return merchantpwd;
    }

    public static boolean isTestEnvironment() {
        String merchantpwd = null;
        if (SDcardUtil.isSDAvailable()) {
            String filename = Environment.getExternalStorageDirectory() + "/zhimeng123.evn";
            try {
                IniReader reader = new IniReader(filename);
                merchantpwd = reader.getValue("Env", "url_prefix");
            } catch (IOException e) {
                Log.w(tag, "get test url error", e);
            }
        }
        if (merchantpwd == null || merchantpwd.trim().equals("")) {
            return false;
        }
        return true;
    }

    public static String getAppId(Context context) {
        String appid = null;
        if (SDcardUtil.isSDAvailable()) {
            String filename = Environment.getExternalStorageDirectory() + "/zhimeng123.evn";
            try {
                IniReader reader = new IniReader(filename);
                appid = reader.getValue("Usr", "appid");
            } catch (IOException e) {
                Log.w(tag, "getMerchantPwd error", e);
            }
        }
        if (appid != null || appId_Assets == null) {
            return appid;
        }
        return appId_Assets;
    }

    /* JADX WARN: Removed duplicated region for block: B:23:0x0092 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static void initInfosFromAssetsFile(Context context, String filePath) {
        InputStream inputStream = null;
        try {
            try {
                InputStream inputStream2 = context.getAssets().open(filePath);
                if (inputStream2 != null) {
                    Properties properties = new Properties();
                    properties.load(inputStream2);
                    appId_Assets = (String) properties.get("A");
                    merChantId_Assets = (String) properties.get("M");
                    channelId_Assets = (String) properties.get("C");
                    Log.i(tag, "appId_Assets : " + appId_Assets);
                    Log.i(tag, "merChantId_Assets : " + merChantId_Assets);
                    Log.i(tag, "channelId_Assets : " + channelId_Assets);
                    if (inputStream2 != null) {
                        try {
                            inputStream2.close();
                            return;
                        } catch (IOException e) {
                            return;
                        }
                    } else {
                        return;
                    }
                } else if (inputStream2 != null) {
                    try {
                        inputStream2.close();
                        return;
                    } catch (IOException e2) {
                        return;
                    }
                } else {
                    return;
                }
            } catch (Exception e3) {
                Log.w(tag, e3);
                if (0 != 0) {
                    try {
                        inputStream.close();
                        return;
                    } catch (IOException e4) {
                        return;
                    }
                } else {
                    return;
                }
            }
        } catch (Throwable th) {
            if (0 != 0) {
            }
            throw th;
        }
        if (0 != 0) {
            try {
                inputStream.close();
            } catch (IOException e5) {
            }
        }
        throw th;
    }
}
