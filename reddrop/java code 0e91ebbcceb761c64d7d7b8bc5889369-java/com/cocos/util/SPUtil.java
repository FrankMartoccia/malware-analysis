package com.cocos.util;

import android.content.Context;
import android.content.SharedPreferences;
import java.util.HashMap;
import java.util.Map;
/* loaded from: classes.dex */
public class SPUtil {
    private static SPUtil spUtil = null;
    private SharedPreferences sp = null;
    private Context mContext = null;

    public static SPUtil getInstance(Context context, String spName) {
        if (spUtil == null) {
            spUtil = new SPUtil();
            spUtil.mContext = context.getApplicationContext();
            spUtil.sp = context.getSharedPreferences(spName, 0);
        }
        return spUtil;
    }

    public void putString(String key, String value) {
        putString(key, value, true);
    }

    public void putString(String key, String value, boolean synData) {
        this.sp.edit().putString(key, value).commit();
    }

    public String getString(String key, String def) {
        return this.sp.getString(key, def);
    }

    public void putBoolean(String key, boolean value) {
        this.sp.edit().putBoolean(key, value).commit();
    }

    public boolean getBoolean(String key, boolean def) {
        return this.sp.getBoolean(key, def);
    }

    public void putLong(String key, long value) {
        this.sp.edit().putLong(key, value).commit();
    }

    public long getLong(String key, long def) {
        return this.sp.getLong(key, def);
    }

    public void putInt(String key, int value) {
        this.sp.edit().putInt(key, value).commit();
    }

    public int getInt(String key, int def) {
        return this.sp.getInt(key, def);
    }

    public void resetData(String key, boolean synData) {
        this.sp.edit().remove(key).commit();
    }

    public void put(String key, Object value) {
        SharedPreferences.Editor editor = this.sp.edit();
        if (value instanceof Integer) {
            editor.putInt(key, ((Integer) value).intValue());
        } else if (value instanceof Float) {
            editor.putFloat(key, ((Float) value).floatValue());
        } else if (value instanceof String) {
            editor.putString(key, (String) value);
        } else if (value instanceof Boolean) {
            editor.putBoolean(key, ((Boolean) value).booleanValue());
        } else if (value instanceof Long) {
            editor.putLong(key, ((Long) value).longValue());
        }
        editor.commit();
    }

    public void clearData() {
        clearData(new String[0]);
    }

    public void clearData(String... exceptKeys) {
        Map<String, Object> exceptMap = new HashMap<>();
        Map<String, ?> spMap = this.sp.getAll();
        for (String key : exceptKeys) {
            if (spMap.containsKey(key) && spMap.get(key) != null) {
                exceptMap.put(key, spMap.get(key));
            }
        }
        this.sp.edit().clear().commit();
        if (exceptMap.size() > 0) {
            for (String key2 : exceptMap.keySet()) {
                put(key2, exceptMap.get(key2));
            }
        }
    }
}
