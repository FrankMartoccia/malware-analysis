package com.cocos.util;

import android.content.Context;
import android.os.Environment;
import android.text.TextUtils;
import com.yf.y.f.init.util.ConstUtils;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
/* loaded from: classes.dex */
public class SDcardUtil {
    public static boolean isSDMounted() {
        String sdState = Environment.getExternalStorageState();
        return sdState.equals("mounted");
    }

    public static boolean isSDAvailable() {
        if (!isSDMounted()) {
            return false;
        }
        File file = Environment.getExternalStorageDirectory();
        if (!file.canRead() || !file.canWrite()) {
            return false;
        }
        return true;
    }

    /* JADX WARN: Removed duplicated region for block: B:60:0x009a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:74:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String copyAssertToSD(Context context, String fileName) {
        Throwable th;
        OutputStream os;
        String rootDir = FileUtil.getSavePath(context);
        if (TextUtils.isEmpty(rootDir)) {
            return null;
        }
        String fileOutDirPath = String.valueOf(rootDir) + "miniSdkDemo/assets";
        PLog.i("", "copyAssertToSD-fileOutDirPath:" + fileOutDirPath);
        String str = String.valueOf(fileOutDirPath) + File.separator + fileName;
        InputStream is = null;
        OutputStream os2 = null;
        try {
            try {
                File folder = new File(fileOutDirPath);
                if (!folder.exists()) {
                    folder.mkdirs();
                }
                File file = new File(folder, fileName);
                PLog.i("", "copyAssertToSD-file exists:" + file.exists());
                is = context.getAssets().open(fileName);
                os = new FileOutputStream(file);
            } catch (Exception e) {
                e = e;
            }
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            byte[] buffer = new byte[ConstUtils.KB];
            while (true) {
                int len = is.read(buffer);
                if (len <= 0) {
                    break;
                }
                os.write(buffer, 0, len);
            }
            if (os != null) {
                try {
                    os.flush();
                    os.close();
                } catch (IOException e2) {
                    PLog.e("", "copyAssertToSD-finally-Exception：", e2);
                }
                if (is != null) {
                    return str;
                }
                try {
                    is.close();
                    return str;
                } catch (IOException e3) {
                    e3.printStackTrace();
                    return str;
                }
            }
            if (is != null) {
            }
        } catch (Exception e4) {
            e = e4;
            os2 = os;
            PLog.e("", "FileUtil--->copyAssertToSD-Exception：", e);
            if (os2 != null) {
                try {
                    os2.flush();
                    os2.close();
                } catch (IOException e5) {
                    PLog.e("", "copyAssertToSD-finally-Exception：", e5);
                }
            }
            if (is == null) {
                return null;
            }
            try {
                is.close();
                return null;
            } catch (IOException e6) {
                e6.printStackTrace();
                return null;
            }
        } catch (Throwable th3) {
            th = th3;
            os2 = os;
            if (os2 != null) {
                try {
                    os2.flush();
                    os2.close();
                } catch (IOException e7) {
                    PLog.e("", "copyAssertToSD-finally-Exception：", e7);
                }
            }
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e8) {
                    e8.printStackTrace();
                }
            }
            throw th;
        }
    }
}
