package com.cocos.util;

import android.os.Environment;
import android.util.Log;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Date;
/* loaded from: classes.dex */
public class PLog {
    public static final String TAG = "miniSDK";
    private static final boolean isWriteLog2File = false;
    public static boolean bEnableLog = true;
    private static int LOG_MAXLENGTH = 2000;

    public static String getRunInfo() {
        StringBuffer toStringBuffer = null;
        try {
            StackTraceElement traceElement = new Exception().getStackTrace()[3];
            StackTraceElement traceElement2 = new Exception().getStackTrace()[4];
            toStringBuffer = new StringBuffer(new StringBuilder().append(Thread.currentThread().getId()).toString()).append(" | ").append(traceElement.getFileName()).append(" | ").append(traceElement.getLineNumber()).append(" | ").append(traceElement2.getMethodName()).append(" -> ").append(traceElement.getMethodName()).append("()");
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (toStringBuffer != null) {
            return toStringBuffer.toString();
        }
        return null;
    }

    public static String wrapLog(String msg) {
        return "[" + getRunInfo() + "] " + msg;
    }

    public static void i(String tag, String msg, boolean isTooLong) {
        if (bEnableLog) {
            if (isTooLong) {
                int strLength = msg.length();
                int start = 0;
                int end = LOG_MAXLENGTH;
                for (int i = 0; i < 100; i++) {
                    if (strLength > end) {
                        Log.i(TAG, wrapLog(msg.substring(start, end)));
                        start = end;
                        end += LOG_MAXLENGTH;
                    } else {
                        Log.i(TAG, wrapLog(msg.substring(start, strLength)));
                        return;
                    }
                }
                return;
            }
            wrapLog(msg);
        }
    }

    public static void i(String msg) {
        i(TAG, msg);
    }

    public static void i(String tag, String msg) {
        if (bEnableLog) {
            Log.i(tag, wrapLog(msg));
        }
    }

    public static void e(String msg) {
        e(TAG, msg);
    }

    public static void e(String tag, String msg) {
        if (bEnableLog) {
            Log.e(TAG, wrapLog(msg));
        }
    }

    public static void e(String msg, Throwable tr) {
        e(TAG, msg, tr);
    }

    public static void e(String tag, String msg, Throwable tr) {
        if (bEnableLog) {
            Log.e(TAG, wrapLog(msg), tr);
        }
    }

    public static void w(String msg) {
        w(TAG, msg);
    }

    public static void w(String tag, String msg) {
        if (bEnableLog) {
            Log.w(TAG, wrapLog(msg));
        }
    }

    public static void w(String msg, Throwable tr) {
        w(TAG, msg, tr);
    }

    public static void w(String tag, String msg, Throwable tr) {
        if (bEnableLog) {
            Log.w(TAG, wrapLog(msg), tr);
        }
    }

    private static void writeLog2File(String log) {
        Throwable th;
        FileOutputStream fos;
        if (Environment.getExternalStorageState().equals("mounted")) {
            String path = Environment.getExternalStorageDirectory() + "/NewSDK.log";
            File file = new File(path);
            FileOutputStream fos2 = null;
            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("MM-dd HH:mm:ss");
            try {
                try {
                    fos = new FileOutputStream(file, true);
                } catch (Exception e) {
                }
            } catch (Throwable th2) {
                th = th2;
            }
            try {
                fos.write((String.valueOf(sdf.format(date)) + " " + log + '\n').getBytes());
                if (fos != null) {
                    try {
                        fos.close();
                    } catch (IOException e2) {
                    }
                }
            } catch (Exception e3) {
                fos2 = fos;
                Log.w(TAG, "writeLog2File日志写入错误");
                if (fos2 != null) {
                    try {
                        fos2.close();
                    } catch (IOException e4) {
                    }
                }
            } catch (Throwable th3) {
                th = th3;
                fos2 = fos;
                if (fos2 != null) {
                    try {
                        fos2.close();
                    } catch (IOException e5) {
                    }
                }
                throw th;
            }
        }
    }

    private static String getThrowableStr(Throwable ex) {
        Writer writer = new StringWriter();
        PrintWriter printWriter = new PrintWriter(writer);
        ex.printStackTrace(printWriter);
        for (Throwable cause = ex.getCause(); cause != null; cause = cause.getCause()) {
            cause.printStackTrace(printWriter);
        }
        printWriter.close();
        return writer.toString();
    }
}
