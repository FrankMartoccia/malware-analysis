package com.yuanlang.pay.plugin.libs;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.URL;
import java.nio.channels.FileLock;
import java.util.Enumeration;
import java.util.Map;
import java.util.UUID;
/* loaded from: classes.dex */
public final class y {

    /* renamed from: a  reason: collision with root package name */
    private static final String f1271a = "HttpConnUtil";
    private static final int b = 1000;
    private static final int c = 10000;
    private static final int d = 10000;
    private static final int e = 8192;
    private static final int f = 1024;

    private static String a() {
        try {
            Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
            while (networkInterfaces.hasMoreElements()) {
                Enumeration<InetAddress> inetAddresses = networkInterfaces.nextElement().getInetAddresses();
                while (inetAddresses.hasMoreElements()) {
                    InetAddress nextElement = inetAddresses.nextElement();
                    if (!nextElement.isLoopbackAddress()) {
                        return nextElement.getHostAddress().toString();
                    }
                }
            }
        } catch (SocketException e2) {
        }
        return null;
    }

    private static String a(String str) {
        InputStreamReader inputStreamReader;
        HttpURLConnection httpURLConnection;
        HttpURLConnection httpURLConnection2;
        Throwable th;
        InputStreamReader inputStreamReader2;
        InputStreamReader inputStreamReader3 = null;
        StringBuffer stringBuffer = new StringBuffer();
        try {
            HttpURLConnection httpURLConnection3 = (HttpURLConnection) new URL(str).openConnection();
            try {
                httpURLConnection3.setConnectTimeout(10000);
                httpURLConnection3.setReadTimeout(10000);
                httpURLConnection3.setDoInput(true);
                if (200 == httpURLConnection3.getResponseCode()) {
                    inputStreamReader2 = new InputStreamReader(httpURLConnection3.getInputStream());
                    try {
                        BufferedReader bufferedReader = new BufferedReader(inputStreamReader2, e);
                        while (true) {
                            String readLine = bufferedReader.readLine();
                            if (readLine == null) {
                                break;
                            }
                            stringBuffer.append(readLine);
                        }
                        bufferedReader.close();
                    } catch (Exception e2) {
                        httpURLConnection = httpURLConnection3;
                        inputStreamReader = inputStreamReader2;
                        if (inputStreamReader != null) {
                            try {
                                inputStreamReader.close();
                            } catch (IOException e3) {
                            }
                        }
                        if (httpURLConnection != null) {
                            httpURLConnection.disconnect();
                        }
                        return null;
                    } catch (Throwable th2) {
                        th = th2;
                        inputStreamReader3 = inputStreamReader2;
                        httpURLConnection2 = httpURLConnection3;
                        if (inputStreamReader3 != null) {
                            try {
                                inputStreamReader3.close();
                            } catch (IOException e4) {
                            }
                        }
                        if (httpURLConnection2 != null) {
                            httpURLConnection2.disconnect();
                        }
                        throw th;
                    }
                } else {
                    inputStreamReader2 = null;
                }
                if (inputStreamReader2 != null) {
                    try {
                        inputStreamReader2.close();
                    } catch (IOException e5) {
                    }
                }
                if (httpURLConnection3 != null) {
                    httpURLConnection3.disconnect();
                }
                return stringBuffer.toString();
            } catch (Exception e6) {
                httpURLConnection = httpURLConnection3;
                inputStreamReader = null;
            } catch (Throwable th3) {
                th = th3;
                httpURLConnection2 = httpURLConnection3;
            }
        } catch (Exception e7) {
            inputStreamReader = null;
            httpURLConnection = null;
        } catch (Throwable th4) {
            th = th4;
            httpURLConnection2 = null;
        }
    }

    private static String a(String str, InputStream inputStream, String str2) {
        DataOutputStream dataOutputStream;
        DataOutputStream dataOutputStream2;
        StringBuffer stringBuffer = new StringBuffer();
        try {
            String uuid = UUID.randomUUID().toString();
            HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
            httpURLConnection.setReadTimeout(10000);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestMethod("POST");
            httpURLConnection.setRequestProperty("connection", "keep-alive");
            httpURLConnection.setRequestProperty("Charsert", "UTF-8");
            httpURLConnection.setRequestProperty(Cint.b, "multipart/form-data;boundary=" + uuid);
            dataOutputStream2 = new DataOutputStream(httpURLConnection.getOutputStream());
            try {
                StringBuilder sb = new StringBuilder();
                sb.append("--");
                sb.append(uuid);
                sb.append("\r\n");
                sb.append("Content-Disposition: form-data; name=\"file\"; filename=\"" + str2 + "\"\r\n");
                sb.append("Content-Type: application/octet-stream; charset=UTF-8\r\n");
                sb.append("\r\n");
                dataOutputStream2.write(sb.toString().getBytes());
                if (inputStream != null) {
                    byte[] bArr = new byte[1024];
                    while (true) {
                        int read = inputStream.read(bArr, 0, 1024);
                        if (read == -1) {
                            break;
                        }
                        dataOutputStream2.write(bArr, 0, read);
                    }
                    inputStream.close();
                }
                dataOutputStream2.write("\r\n".getBytes());
                dataOutputStream2.write(("--" + uuid + "--\r\n").getBytes());
                dataOutputStream2.flush();
                if (200 == httpURLConnection.getResponseCode()) {
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()), e);
                    while (true) {
                        String readLine = bufferedReader.readLine();
                        if (readLine == null) {
                            break;
                        }
                        stringBuffer.append(readLine);
                    }
                    bufferedReader.close();
                }
                try {
                    dataOutputStream2.close();
                } catch (IOException e2) {
                }
            } catch (IOException e3) {
                dataOutputStream = dataOutputStream2;
                if (dataOutputStream != null) {
                    try {
                        dataOutputStream.close();
                    } catch (IOException e4) {
                    }
                }
                return stringBuffer.toString();
            } catch (Throwable th) {
                th = th;
                if (dataOutputStream2 != null) {
                    try {
                        dataOutputStream2.close();
                    } catch (IOException e5) {
                    }
                }
                throw th;
            }
        } catch (IOException e6) {
            dataOutputStream = null;
        } catch (Throwable th2) {
            th = th2;
            dataOutputStream2 = null;
        }
        return stringBuffer.toString();
    }

    public static String a(String str, Map<String, Object> map) {
        StringBuffer stringBuffer = new StringBuffer(str);
        if (map != null) {
            boolean z = true;
            for (String str2 : map.keySet()) {
                if (z) {
                    stringBuffer.append("?" + str2 + "=" + map.get(str2));
                    z = false;
                } else {
                    stringBuffer.append("&" + str2 + "=" + map.get(str2));
                }
            }
        }
        stringBuffer.toString().trim();
        return a(stringBuffer.toString());
    }

    private static String a(String str, Map<String, Object> map, InputStream inputStream, String str2) {
        DataOutputStream dataOutputStream;
        DataOutputStream dataOutputStream2;
        String uuid;
        HttpURLConnection httpURLConnection;
        StringBuffer stringBuffer = new StringBuffer();
        try {
            uuid = UUID.randomUUID().toString();
            httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
            httpURLConnection.setReadTimeout(10000);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestMethod("POST");
            httpURLConnection.setRequestProperty("connection", "keep-alive");
            httpURLConnection.setRequestProperty("Charsert", "UTF-8");
            httpURLConnection.setRequestProperty(Cint.b, "multipart/form-data;boundary=" + uuid);
            dataOutputStream2 = new DataOutputStream(httpURLConnection.getOutputStream());
        } catch (IOException e2) {
            dataOutputStream = null;
        } catch (Throwable th) {
            th = th;
            dataOutputStream2 = null;
        }
        try {
            StringBuilder sb = new StringBuilder();
            sb.append("--");
            sb.append(uuid);
            sb.append("\r\n");
            sb.append("Content-Disposition: form-data; name=\"file\"; filename=\"" + str2 + "\"\r\n");
            sb.append("Content-Type: application/octet-stream; charset=UTF-8\r\n");
            sb.append("\r\n");
            dataOutputStream2.write(sb.toString().getBytes());
            if (inputStream != null) {
                byte[] bArr = new byte[1024];
                while (true) {
                    int read = inputStream.read(bArr, 0, 1024);
                    if (read == -1) {
                        break;
                    }
                    dataOutputStream2.write(bArr, 0, read);
                }
                inputStream.close();
            }
            dataOutputStream2.write("\r\n".getBytes());
            if (map != null) {
                for (String str3 : map.keySet()) {
                    dataOutputStream2.write(("&" + str3 + "=" + map.get(str3)).getBytes());
                }
            }
            dataOutputStream2.write(("--" + uuid + "--\r\n").getBytes());
            dataOutputStream2.flush();
            if (200 == httpURLConnection.getResponseCode()) {
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()), e);
                while (true) {
                    String readLine = bufferedReader.readLine();
                    if (readLine == null) {
                        break;
                    }
                    stringBuffer.append(readLine);
                }
                bufferedReader.close();
            }
            try {
                dataOutputStream2.close();
            } catch (IOException e3) {
            }
        } catch (IOException e4) {
            dataOutputStream = dataOutputStream2;
            if (dataOutputStream != null) {
                try {
                    dataOutputStream.close();
                } catch (IOException e5) {
                }
            }
            return stringBuffer.toString();
        } catch (Throwable th2) {
            th = th2;
            if (dataOutputStream2 != null) {
                try {
                    dataOutputStream2.close();
                } catch (IOException e6) {
                }
            }
            throw th;
        }
        return stringBuffer.toString();
    }

    private static void a(String str, File file, long j) {
        long length;
        int i = 0;
        HttpURLConnection httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
        httpURLConnection.setConnectTimeout(10000);
        httpURLConnection.setReadTimeout(10000);
        long contentLength = httpURLConnection.getContentLength();
        httpURLConnection.setRequestProperty("Range", "bytes=" + j + "-");
        DataInputStream dataInputStream = new DataInputStream(httpURLConnection.getInputStream());
        RandomAccessFile randomAccessFile = new RandomAccessFile(file, "rw");
        try {
            byte[] bArr = new byte[1024];
            randomAccessFile.seek(j);
            randomAccessFile.setLength(j);
            while (true) {
                if (j >= contentLength) {
                    randomAccessFile.setLength(contentLength);
                    length = contentLength;
                } else {
                    randomAccessFile.write(bArr, 0, i);
                    length = file.length();
                }
                int read = dataInputStream.read(bArr);
                if (1 != read) {
                    j = length;
                    i = read;
                } else {
                    return;
                }
            }
        } finally {
            randomAccessFile.close();
            dataInputStream.close();
        }
    }

    private static void a(String str, String str2, long j) {
        a(str, new File(str2), j);
    }

    private static void a(String str, String str2, boolean z) {
        File file = new File(str2);
        if (z) {
            a(str, file, file.length());
        } else {
            a(str, file, 0L);
        }
    }

    private static boolean a(Context context) {
        NetworkInfo[] allNetworkInfo;
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService("connectivity");
        if (!(connectivityManager == null || (allNetworkInfo = connectivityManager.getAllNetworkInfo()) == null)) {
            for (NetworkInfo networkInfo : allNetworkInfo) {
                if (networkInfo.getState() == NetworkInfo.State.CONNECTED) {
                    return true;
                }
            }
        }
        return false;
    }

    /* JADX WARN: Can't wrap try/catch for region: R(13:85|4|94|5|6|92|7|(3:9|10|(3:(1:13)|14|15))(2:17|(1:19))|20|96|21|22|(5:(1:25)|86|26|27|15)(6:(4:33|34|(2:36|(2:37|(1:39)(1:98)))(0)|47)|48|49|(5:(1:52)|88|53|54|15)(5:(1:58)|90|59|46|15)|30|31)) */
    /* JADX WARN: Code restructure failed: missing block: B:41:0x00ac, code lost:
        r3 = r0;
        r0 = r4;
     */
    /* JADX WARN: Code restructure failed: missing block: B:42:0x00ae, code lost:
        if (r3 != null) goto L43;
     */
    /* JADX WARN: Code restructure failed: missing block: B:43:0x00b0, code lost:
        r3.disconnect();
     */
    /* JADX WARN: Code restructure failed: missing block: B:44:0x00b3, code lost:
        if (r0 != null) goto L83;
     */
    /* JADX WARN: Code restructure failed: missing block: B:45:0x00b5, code lost:
        r0.close();
     */
    /* JADX WARN: Code restructure failed: missing block: B:62:0x00e3, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:63:0x00e4, code lost:
        r0.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:66:0x00ea, code lost:
        if (r1 != null) goto L67;
     */
    /* JADX WARN: Code restructure failed: missing block: B:67:0x00ec, code lost:
        r1.disconnect();
     */
    /* JADX WARN: Code restructure failed: missing block: B:68:0x00ef, code lost:
        if (r3 != null) goto L81;
     */
    /* JADX WARN: Code restructure failed: missing block: B:69:0x00f1, code lost:
        r3.close();
     */
    /* JADX WARN: Code restructure failed: missing block: B:70:0x00f4, code lost:
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:71:0x00f5, code lost:
        r1 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:72:0x00f6, code lost:
        r1.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:75:0x00ff, code lost:
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:76:0x0100, code lost:
        r3 = r4;
        r1 = r0;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static synchronized boolean a(String str, String str2) {
        RandomAccessFile randomAccessFile;
        HttpURLConnection httpURLConnection;
        Throwable th;
        File file;
        HttpURLConnection httpURLConnection2;
        HttpURLConnection httpURLConnection3 = null;
        r3 = null;
        RandomAccessFile randomAccessFile2 = null;
        boolean z = false;
        synchronized (y.class) {
            new StringBuilder("intUrl:").append(str).append("outUrl:").append(str2);
            try {
                file = new File(str2);
                httpURLConnection2 = (HttpURLConnection) new URL(str).openConnection();
                try {
                    httpURLConnection2.setConnectTimeout(10000);
                    httpURLConnection2.setDoInput(true);
                } catch (IOException e2) {
                    httpURLConnection3 = httpURLConnection2;
                    randomAccessFile = null;
                } catch (Throwable th2) {
                    th = th2;
                    httpURLConnection = httpURLConnection2;
                }
            } catch (IOException e3) {
                randomAccessFile = null;
            } catch (Throwable th3) {
                th = th3;
                httpURLConnection = null;
            }
            if (file.exists()) {
                if (file.length() == httpURLConnection2.getContentLength()) {
                    if (httpURLConnection2 != null) {
                        httpURLConnection2.disconnect();
                    }
                    z = true;
                }
            } else {
                File parentFile = file.getParentFile();
                if (!parentFile.exists()) {
                    parentFile.mkdirs();
                }
            }
            RandomAccessFile randomAccessFile3 = new RandomAccessFile(file, "rw");
            FileLock lock = randomAccessFile3.getChannel().lock();
            long contentLength = httpURLConnection2.getContentLength();
            if (file.length() == contentLength) {
                if (httpURLConnection2 != null) {
                    httpURLConnection2.disconnect();
                }
                try {
                    randomAccessFile3.close();
                } catch (IOException e4) {
                    e4.printStackTrace();
                }
                z = true;
            } else {
                if (lock != null) {
                    randomAccessFile3.seek(0L);
                    if (200 == httpURLConnection2.getResponseCode()) {
                        InputStream inputStream = httpURLConnection2.getInputStream();
                        byte[] bArr = new byte[1024];
                        while (true) {
                            int read = inputStream.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            randomAccessFile3.write(bArr, 0, read);
                        }
                    }
                    lock.release();
                }
                if (file.length() == contentLength) {
                    if (httpURLConnection2 != null) {
                        httpURLConnection2.disconnect();
                    }
                    try {
                        randomAccessFile3.close();
                    } catch (IOException e5) {
                        e5.printStackTrace();
                    }
                    z = true;
                } else {
                    if (httpURLConnection2 != null) {
                        httpURLConnection2.disconnect();
                    }
                    try {
                        randomAccessFile3.close();
                    } catch (IOException e6) {
                        e6.printStackTrace();
                    }
                }
            }
        }
        return z;
    }

    private static String b(String str) {
        InputStreamReader inputStreamReader;
        HttpURLConnection httpURLConnection;
        HttpURLConnection httpURLConnection2;
        Throwable th;
        InputStreamReader inputStreamReader2;
        InputStreamReader inputStreamReader3 = null;
        StringBuffer stringBuffer = new StringBuffer();
        try {
            HttpURLConnection httpURLConnection3 = (HttpURLConnection) new URL(str).openConnection();
            try {
                httpURLConnection3.setConnectTimeout(10000);
                httpURLConnection3.setReadTimeout(10000);
                httpURLConnection3.setDoOutput(true);
                httpURLConnection3.setDoInput(true);
                httpURLConnection3.setRequestProperty("accept", "text/html");
                httpURLConnection3.setRequestProperty("connection", "Keep-Alive");
                httpURLConnection3.setRequestProperty("user-agent", "Mozilla/5.0 (Windows NT 6.1; rv:2.0b11) Gecko/20100101 Firefox/4.0b11");
                if (200 == httpURLConnection3.getResponseCode()) {
                    inputStreamReader2 = new InputStreamReader(httpURLConnection3.getInputStream());
                    try {
                        BufferedReader bufferedReader = new BufferedReader(inputStreamReader2, e);
                        while (true) {
                            String readLine = bufferedReader.readLine();
                            if (readLine == null) {
                                break;
                            }
                            stringBuffer.append(readLine);
                        }
                        bufferedReader.close();
                    } catch (Exception e2) {
                        httpURLConnection = httpURLConnection3;
                        inputStreamReader = inputStreamReader2;
                        if (inputStreamReader != null) {
                            try {
                                inputStreamReader.close();
                            } catch (IOException e3) {
                                e3.printStackTrace();
                            }
                        }
                        if (httpURLConnection != null) {
                            httpURLConnection.disconnect();
                        }
                        return null;
                    } catch (Throwable th2) {
                        th = th2;
                        inputStreamReader3 = inputStreamReader2;
                        httpURLConnection2 = httpURLConnection3;
                        if (inputStreamReader3 != null) {
                            try {
                                inputStreamReader3.close();
                            } catch (IOException e4) {
                                e4.printStackTrace();
                            }
                        }
                        if (httpURLConnection2 != null) {
                            httpURLConnection2.disconnect();
                        }
                        throw th;
                    }
                } else {
                    inputStreamReader2 = null;
                }
                if (inputStreamReader2 != null) {
                    try {
                        inputStreamReader2.close();
                    } catch (IOException e5) {
                        e5.printStackTrace();
                    }
                }
                if (httpURLConnection3 != null) {
                    httpURLConnection3.disconnect();
                }
                return stringBuffer.toString();
            } catch (Exception e6) {
                httpURLConnection = httpURLConnection3;
                inputStreamReader = null;
            } catch (Throwable th3) {
                th = th3;
                httpURLConnection2 = httpURLConnection3;
            }
        } catch (Exception e7) {
            inputStreamReader = null;
            httpURLConnection = null;
        } catch (Throwable th4) {
            th = th4;
            httpURLConnection2 = null;
        }
    }

    private static String b(String str, Map<String, Object> map) {
        StringBuffer stringBuffer = new StringBuffer(str);
        if (map != null) {
            boolean z = true;
            for (String str2 : map.keySet()) {
                if (z) {
                    stringBuffer.append("?" + str2 + "=" + map.get(str2));
                    z = false;
                } else {
                    stringBuffer.append("&" + str2 + "=" + map.get(str2));
                }
            }
        }
        return stringBuffer.toString();
    }

    private static boolean b(String str, String str2) {
        HttpURLConnection httpURLConnection;
        Throwable th;
        File file;
        new StringBuilder("intUrl:").append(str).append("outUrl:").append(str2);
        HttpURLConnection httpURLConnection2 = null;
        try {
            file = new File(str2);
            httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
            try {
                httpURLConnection.setConnectTimeout(10000);
                httpURLConnection.setDoInput(true);
                if (file.exists()) {
                    if (file.length() == httpURLConnection.getContentLength()) {
                        if (httpURLConnection != null) {
                            httpURLConnection.disconnect();
                        }
                        return true;
                    }
                } else {
                    File parentFile = file.getParentFile();
                    if (!parentFile.exists()) {
                        parentFile.mkdirs();
                    }
                }
                file.createNewFile();
                FileOutputStream fileOutputStream = new FileOutputStream(file);
                if (200 == httpURLConnection.getResponseCode()) {
                    InputStream inputStream = httpURLConnection.getInputStream();
                    byte[] bArr = new byte[1024];
                    while (true) {
                        int read = inputStream.read(bArr);
                        if (read <= 0) {
                            break;
                        }
                        fileOutputStream.write(bArr, 0, read);
                    }
                }
                fileOutputStream.close();
            } catch (IOException e2) {
                if (httpURLConnection != null) {
                    httpURLConnection.disconnect();
                }
                return false;
            } catch (Throwable th2) {
                th = th2;
                httpURLConnection2 = httpURLConnection;
                if (httpURLConnection2 != null) {
                    httpURLConnection2.disconnect();
                }
                throw th;
            }
        } catch (IOException e3) {
            httpURLConnection = null;
        } catch (Throwable th3) {
            th = th3;
        }
        if (file.length() == httpURLConnection.getContentLength()) {
            if (httpURLConnection != null) {
                httpURLConnection.disconnect();
            }
            return true;
        }
        if (httpURLConnection != null) {
            httpURLConnection.disconnect();
        }
        return false;
    }

    /* JADX WARN: Removed duplicated region for block: B:18:0x007c  */
    /* JADX WARN: Removed duplicated region for block: B:45:0x00d4  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x00cf A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x00ca A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0077 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:74:0x0072 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private static String c(String str, Map<String, Object> map) {
        OutputStream outputStream;
        InputStreamReader inputStreamReader;
        HttpURLConnection httpURLConnection;
        OutputStream outputStream2;
        HttpURLConnection httpURLConnection2;
        Throwable th;
        InputStreamReader inputStreamReader2 = null;
        StringBuffer stringBuffer = new StringBuffer();
        try {
            HttpURLConnection httpURLConnection3 = (HttpURLConnection) new URL(str).openConnection();
            try {
                httpURLConnection3.setConnectTimeout(10000);
                httpURLConnection3.setReadTimeout(10000);
                httpURLConnection3.setDoInput(true);
                httpURLConnection3.setDoOutput(true);
                httpURLConnection3.setRequestMethod("POST");
                httpURLConnection3.setUseCaches(false);
                outputStream2 = httpURLConnection3.getOutputStream();
                if (map != null) {
                    try {
                        for (String str2 : map.keySet()) {
                            outputStream2.write(("&" + str2 + "=" + map.get(str2)).getBytes());
                        }
                    } catch (Exception e2) {
                        inputStreamReader = null;
                        httpURLConnection = httpURLConnection3;
                        outputStream = outputStream2;
                        if (inputStreamReader != null) {
                            try {
                                inputStreamReader.close();
                            } catch (IOException e3) {
                            }
                        }
                        if (outputStream != null) {
                            try {
                                outputStream.close();
                            } catch (IOException e4) {
                            }
                        }
                        if (httpURLConnection != null) {
                            httpURLConnection.disconnect();
                        }
                        return null;
                    } catch (Throwable th2) {
                        th = th2;
                        httpURLConnection2 = httpURLConnection3;
                        if (inputStreamReader2 != null) {
                            try {
                                inputStreamReader2.close();
                            } catch (IOException e5) {
                            }
                        }
                        if (outputStream2 != null) {
                            try {
                                outputStream2.close();
                            } catch (IOException e6) {
                            }
                        }
                        if (httpURLConnection2 != null) {
                            httpURLConnection2.disconnect();
                        }
                        throw th;
                    }
                }
                outputStream2.flush();
                httpURLConnection3.getResponseCode();
                if (200 == httpURLConnection3.getResponseCode()) {
                    inputStreamReader = new InputStreamReader(httpURLConnection3.getInputStream());
                    try {
                        BufferedReader bufferedReader = new BufferedReader(inputStreamReader, e);
                        while (true) {
                            String readLine = bufferedReader.readLine();
                            if (readLine == null) {
                                break;
                            }
                            stringBuffer.append(readLine);
                        }
                        bufferedReader.close();
                    } catch (Exception e7) {
                        httpURLConnection = httpURLConnection3;
                        outputStream = outputStream2;
                        if (inputStreamReader != null) {
                        }
                        if (outputStream != null) {
                        }
                        if (httpURLConnection != null) {
                        }
                        return null;
                    } catch (Throwable th3) {
                        th = th3;
                        inputStreamReader2 = inputStreamReader;
                        httpURLConnection2 = httpURLConnection3;
                        if (inputStreamReader2 != null) {
                        }
                        if (outputStream2 != null) {
                        }
                        if (httpURLConnection2 != null) {
                        }
                        throw th;
                    }
                } else {
                    inputStreamReader = null;
                }
                if (inputStreamReader != null) {
                    try {
                        inputStreamReader.close();
                    } catch (IOException e8) {
                    }
                }
                if (outputStream2 != null) {
                    try {
                        outputStream2.close();
                    } catch (IOException e9) {
                    }
                }
                if (httpURLConnection3 != null) {
                    httpURLConnection3.disconnect();
                }
                return stringBuffer.toString();
            } catch (Exception e10) {
                inputStreamReader = null;
                httpURLConnection = httpURLConnection3;
                outputStream = null;
            } catch (Throwable th4) {
                th = th4;
                outputStream2 = null;
                httpURLConnection2 = httpURLConnection3;
            }
        } catch (Exception e11) {
            outputStream = null;
            inputStreamReader = null;
            httpURLConnection = null;
        } catch (Throwable th5) {
            th = th5;
            outputStream2 = null;
            httpURLConnection2 = null;
        }
    }

    private static void c(String str, String str2) {
        a(str, new File(str2), 0L);
    }
}
