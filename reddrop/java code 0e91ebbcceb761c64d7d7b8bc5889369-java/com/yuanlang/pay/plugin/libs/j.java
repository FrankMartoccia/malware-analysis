package com.yuanlang.pay.plugin.libs;

import android.content.Context;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.List;
/* loaded from: classes.dex */
public final class j {

    /* renamed from: a  reason: collision with root package name */
    private static final String f1258a = "ServiceUtil";

    public static String a(String str) {
        BufferedReader bufferedReader;
        Throwable th;
        String str2;
        String readLine;
        BufferedOutputStream bufferedOutputStream = null;
        try {
            try {
                Process exec = Runtime.getRuntime().exec("sh");
                BufferedOutputStream bufferedOutputStream2 = new BufferedOutputStream(exec.getOutputStream());
                try {
                    bufferedReader = new BufferedReader(new InputStreamReader(exec.getInputStream()));
                    try {
                        bufferedOutputStream2.write((str + " 2>&1\n").getBytes());
                        bufferedOutputStream2.write("exit\n".getBytes());
                        bufferedOutputStream2.flush();
                        bufferedOutputStream2.close();
                        str2 = "";
                        while (true) {
                            try {
                                if (bufferedReader.readLine() == null) {
                                    break;
                                }
                                str2 = (str2 + readLine) + "\n";
                            } catch (Exception e) {
                            } catch (Throwable th2) {
                                th = th2;
                                if (bufferedReader != null) {
                                    try {
                                        bufferedReader.close();
                                    } catch (Exception e2) {
                                    }
                                }
                                if (bufferedOutputStream != null) {
                                    try {
                                        bufferedOutputStream.close();
                                    } catch (Exception e3) {
                                    }
                                }
                                throw th;
                            }
                        }
                        bufferedReader.close();
                        try {
                            exec.waitFor();
                        } catch (Exception e4) {
                            bufferedReader = null;
                            if (bufferedReader != null) {
                                try {
                                    bufferedReader.close();
                                } catch (Exception e5) {
                                }
                            }
                            if (bufferedOutputStream != null) {
                                try {
                                    bufferedOutputStream.close();
                                } catch (Exception e6) {
                                }
                            }
                            return str2;
                        }
                    } catch (Exception e7) {
                        bufferedOutputStream = bufferedOutputStream2;
                        str2 = "";
                    } catch (Throwable th3) {
                        th = th3;
                        bufferedOutputStream = bufferedOutputStream2;
                    }
                } catch (Exception e8) {
                    bufferedReader = null;
                    bufferedOutputStream = bufferedOutputStream2;
                    str2 = "";
                } catch (Throwable th4) {
                    th = th4;
                    bufferedReader = null;
                    bufferedOutputStream = bufferedOutputStream2;
                }
            } catch (Throwable th5) {
                th = th5;
                bufferedReader = null;
            }
        } catch (Exception e9) {
            bufferedReader = null;
            str2 = "";
        }
        return str2;
    }

    private static void a(InputStream inputStream, OutputStream outputStream) {
        byte[] bArr = new byte[4096];
        while (true) {
            int read = inputStream.read(bArr);
            if (read > 0) {
                outputStream.write(bArr, 0, read);
            } else {
                outputStream.flush();
                return;
            }
        }
    }

    public static boolean a(Context context, String str) {
        List list = null;
        try {
            list = Arrays.asList(context.getApplicationContext().getAssets().list(""));
        } catch (IOException e) {
        }
        if (list == null) {
            return false;
        }
        return list.contains(str);
    }

    /* JADX WARN: Removed duplicated region for block: B:48:0x005f A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x005a A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String b(Context context, String str) {
        InputStream inputStream;
        InputStream inputStream2;
        FileOutputStream fileOutputStream;
        FileOutputStream fileOutputStream2 = null;
        if (context == null || !a(context, str)) {
            return null;
        }
        File fileStreamPath = context.getFileStreamPath(str);
        if (fileStreamPath.exists()) {
            fileStreamPath.delete();
        }
        try {
            inputStream2 = context.getAssets().open(str);
            try {
                fileOutputStream = new FileOutputStream(fileStreamPath);
            } catch (IOException e) {
                inputStream = inputStream2;
            } catch (Throwable th) {
                th = th;
                fileOutputStream = null;
            }
            try {
                a(inputStream2, fileOutputStream);
                if (inputStream2 != null) {
                    try {
                        inputStream2.close();
                    } catch (Exception e2) {
                    }
                }
                try {
                    fileOutputStream.close();
                } catch (Exception e3) {
                }
            } catch (IOException e4) {
                fileOutputStream2 = fileOutputStream;
                inputStream = inputStream2;
                try {
                    new StringBuilder("not found ").append(str).append(" file,please check conifg!");
                    if (inputStream != null) {
                        try {
                            inputStream.close();
                        } catch (Exception e5) {
                        }
                    }
                    if (fileOutputStream2 != null) {
                        try {
                            fileOutputStream2.close();
                        } catch (Exception e6) {
                        }
                    }
                    return fileStreamPath.getAbsolutePath();
                } catch (Throwable th2) {
                    th = th2;
                    inputStream2 = inputStream;
                    fileOutputStream = fileOutputStream2;
                    if (inputStream2 != null) {
                        try {
                            inputStream2.close();
                        } catch (Exception e7) {
                        }
                    }
                    if (fileOutputStream != null) {
                        try {
                            fileOutputStream.close();
                        } catch (Exception e8) {
                        }
                    }
                    throw th;
                }
            } catch (Throwable th3) {
                th = th3;
                if (inputStream2 != null) {
                }
                if (fileOutputStream != null) {
                }
                throw th;
            }
        } catch (IOException e9) {
            inputStream = null;
        } catch (Throwable th4) {
            th = th4;
            inputStream2 = null;
            fileOutputStream = null;
        }
        return fileStreamPath.getAbsolutePath();
    }
}
