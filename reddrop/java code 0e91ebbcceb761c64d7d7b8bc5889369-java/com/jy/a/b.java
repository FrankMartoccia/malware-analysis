package com.jy.a;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Environment;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import com.jy.publics.JyPaySDKMain;
import com.jy.publics.SdkConfig;
import com.jy.utils.BaseHttpThreadV2;
import com.jy.utils.HttpConnent;
import com.jy.utils.LOG;
import com.jy.utils.MyHashMap;
import com.umeng.analytics.pro.j;
import com.yf.y.f.init.util.ConstUtils;
import dalvik.system.DexClassLoader;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.util.Map;
import java.util.concurrent.locks.ReentrantLock;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.json.JSONObject;
/* loaded from: classes.dex */
public class b {
    private static b h;

    /* renamed from: a  reason: collision with root package name */
    private DexClassLoader f826a;
    private String b;
    private SdkConfig c;
    private volatile int d = 5;
    private ReentrantLock e = new ReentrantLock();
    private a f;
    private String g;

    /* loaded from: classes.dex */
    public interface a {
        void a(Message message);
    }

    /* renamed from: com.jy.a.b$b  reason: collision with other inner class name */
    /* loaded from: classes.dex */
    public static class C0009b {

        /* renamed from: a  reason: collision with root package name */
        DexClassLoader f827a;
        Object b;
    }

    /* loaded from: classes.dex */
    class c extends BaseHttpThreadV2 implements BaseHttpThreadV2.HttpThreadCallBack {
        private Context b;
        private d c;

        public c(String str, Map<String, String> map, Context context, d dVar) {
            super(str, (BaseHttpThreadV2.HttpThreadCallBack) null, map);
            setHttpThreadCallBack(this);
            this.b = context;
            this.c = dVar;
        }

        public int a(String str, JSONObject jSONObject) {
            int i = 2;
            String str2 = str + ".apk";
            try {
                try {
                    if (!jSONObject.has("downLoadUrl") || !jSONObject.has("md5")) {
                        LOG.d("JyDexManager", "服务端返回内容不正确");
                        i = 1;
                    } else {
                        String string = jSONObject.getString("downLoadUrl");
                        String string2 = jSONObject.getString("md5");
                        if (TextUtils.isEmpty(string2) || TextUtils.isEmpty(string)) {
                            i = 1;
                        } else {
                            File file = new File(b.this.a(2) + str2);
                            if (file.exists()) {
                                String a2 = b.this.a(file);
                                if (TextUtils.isEmpty(a2) || !a2.equals(string2)) {
                                    file.delete();
                                    i = b.this.a(string, string2, str2, file);
                                } else {
                                    LOG.d("JyDexManager", "dexPath : " + file.getAbsolutePath());
                                }
                            } else {
                                i = b.this.a(string, string2, str2, file);
                            }
                        }
                    }
                    return i;
                } catch (Exception e) {
                    e.printStackTrace();
                    return 1;
                }
            } catch (Throwable th) {
                return 1;
            }
        }

        public void a(String str) {
            int i;
            try {
                if (str != null) {
                    i = a(b.this.c.dexFileName, new JSONObject(str));
                } else {
                    Log.e("JyDexManager", "request dex update error");
                    i = -1;
                }
                int a2 = i == 2 ? b.this.a(this.b, 2, this.c.a()) : -1;
                LOG.v("JyDexManager", a2 == 0 ? "加载jar正常 path:" + b.this.b : "加载jar失败 path:" + b.this.b);
                if (a2 != 0) {
                    b.this.d = -200;
                    return;
                }
                LOG.d("JyDexManager", "loaded dex file successed");
                b.this.d = 20;
                b.this.a(1, this.c);
            } catch (Exception e) {
            } finally {
                LOG.d("JyDexManager", "loaded dex file fail");
                b.this.d = -20;
                b.this.a(-1, this.c);
            }
        }

        @Override // com.jy.utils.BaseHttpThreadV2.HttpThreadCallBack
        public void httpResultFail(Message message) {
            a(null);
        }

        @Override // com.jy.utils.BaseHttpThreadV2.HttpThreadCallBack
        public void httpResultSuccess(Message message) {
            BaseHttpThreadV2.HttpResult httpResult = (BaseHttpThreadV2.HttpResult) message.obj;
            String str = null;
            if (httpResult != null) {
                str = (String) httpResult.obj;
            }
            a(str);
        }

        @Override // com.jy.utils.BaseHttpThreadV2, java.lang.Runnable
        public void run() {
            int i = -10;
            if (b.this.c.useLocal) {
                try {
                    i = b.this.a(this.b, b.this.c.dexFileName) == 0 ? b.this.a(this.b, 1, b.this.c.dexFileName) : -1;
                    LOG.v("JyDexManager", i == 0 ? "从assets目录拷贝jar正常" : "从assets目录拷贝jar失败");
                    if (i != 0) {
                        LOG.d("JyDexManager", "loaded dex file fail");
                        b.this.d = -20;
                        b.this.a(-1, this.c);
                        return;
                    }
                    LOG.d("JyDexManager", "loaded dex file successed");
                    b.this.d = 20;
                    b.this.a(1, this.c);
                } catch (Throwable th) {
                    if (i != 0) {
                        LOG.d("JyDexManager", "loaded dex file fail");
                        b.this.d = -20;
                        b.this.a(-1, this.c);
                    } else {
                        LOG.d("JyDexManager", "loaded dex file successed");
                        b.this.d = 20;
                        b.this.a(1, this.c);
                    }
                    throw th;
                }
            } else {
                setTimeout(15000);
                doBaseHttpPost(this.url);
            }
        }
    }

    public b(SdkConfig sdkConfig) {
        this.c = sdkConfig;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int a(String str, String str2, String str3, File file) {
        LOG.d("JyDexManager", "开始下载jar:" + str);
        int download = HttpConnent.download(str, file, 0, 1600);
        LOG.d("JyDexManager", "jar下载完成:" + str);
        if (download != 1) {
            return -1;
        }
        String a2 = a(new File(a(2) + str3));
        return (TextUtils.isEmpty(a2) || !a2.equals(str2)) ? 1 : 2;
    }

    public static b a(SdkConfig sdkConfig) {
        synchronized (b.class) {
            if (h == null) {
                h = new b(sdkConfig);
                h.a(sdkConfig.dexUrl);
            }
        }
        return h;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public String a(File file) {
        if (!file.exists() || !file.isFile()) {
            return null;
        }
        byte[] bArr = new byte[ConstUtils.KB];
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            FileInputStream fileInputStream = new FileInputStream(file);
            while (true) {
                int read = fileInputStream.read(bArr, 0, ConstUtils.KB);
                if (read == -1) {
                    break;
                }
                messageDigest.update(bArr, 0, read);
            }
            fileInputStream.close();
            StringBuffer stringBuffer = new StringBuffer();
            byte[] digest = messageDigest.digest();
            for (int i = 0; i < digest.length; i++) {
                int i2 = digest[i];
                if (i2 < 0) {
                    i2 += j.e;
                }
                if (i2 < 16) {
                    stringBuffer.append("0");
                }
                stringBuffer.append(Integer.toHexString(i2));
            }
            return stringBuffer.toString();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void a(int i, Object obj) {
        Message obtain = Message.obtain();
        obtain.what = i;
        C0009b bVar = new C0009b();
        bVar.f827a = this.f826a;
        bVar.b = obj;
        obtain.obj = bVar;
        this.f.a(obtain);
    }

    private static void a(String str, String str2) {
        ZipInputStream zipInputStream;
        try {
            zipInputStream = new ZipInputStream(new BufferedInputStream(new FileInputStream(str)));
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
        while (true) {
            ZipEntry nextEntry = zipInputStream.getNextEntry();
            if (nextEntry != null) {
                try {
                    byte[] bArr = new byte[4096];
                    String name = nextEntry.getName();
                    if (name.startsWith("lib" + File.separator + "armeabi" + File.separator)) {
                        File file = new File(str2 + name.replace(File.separatorChar + "armeabi", ""));
                        File file2 = new File(file.getParent());
                        if (!file2.exists()) {
                            file2.mkdirs();
                        }
                        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(file), 4096);
                        while (true) {
                            int read = zipInputStream.read(bArr, 0, 4096);
                            if (read <= 0) {
                                break;
                            }
                            bufferedOutputStream.write(bArr, 0, read);
                        }
                        bufferedOutputStream.flush();
                        bufferedOutputStream.close();
                    }
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            } else {
                zipInputStream.close();
                return;
            }
            e.printStackTrace();
            return;
        }
    }

    public int a(Context context, int i, String str) {
        int i2 = 0;
        this.b = a(i) + (str + ".apk");
        try {
            String absolutePath = new File(this.b).getAbsolutePath();
            String str2 = context.getCacheDir().getAbsolutePath() + File.separator + "jy" + File.separator;
            a(absolutePath, str2);
            this.f826a = new DexClassLoader(absolutePath, context.getCacheDir().getAbsolutePath(), str2 + "lib" + File.separator, context.getClassLoader());
            SharedPreferences.Editor edit = context.getSharedPreferences("jy_hot_sdk_config", 0).edit();
            edit.putString("jy_hot_dex_path", absolutePath);
            edit.commit();
        } catch (Exception e) {
            e.printStackTrace();
            this.f826a = null;
            i2 = -1;
        }
        if (this.f826a == null) {
            return -1;
        }
        try {
            this.f826a.loadClass(JyPaySDKMain.PACKAGE_NAME);
            return i2;
        } catch (Exception e2) {
            return -1;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:64:0x0097 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0092 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public int a(Context context, String str) {
        FileOutputStream fileOutputStream;
        Exception e;
        InputStream inputStream;
        InputStream inputStream2 = null;
        r2 = null;
        FileOutputStream fileOutputStream2 = null;
        int i = 0;
        File file = new File(a(1) + str + ".apk");
        if (file.exists()) {
            file.delete();
        }
        try {
            inputStream = context.getAssets().open(str + ".md");
            try {
                fileOutputStream = new FileOutputStream(file);
                try {
                    byte[] bArr = new byte[ConstUtils.KB];
                    while (true) {
                        int read = inputStream.read(bArr);
                        if (read <= 0) {
                            break;
                        }
                        fileOutputStream.write(bArr, 0, read);
                    }
                    fileOutputStream.flush();
                    if (fileOutputStream != null) {
                        try {
                            fileOutputStream.close();
                        } catch (IOException e2) {
                            e2.printStackTrace();
                        }
                    }
                    if (inputStream != null) {
                        try {
                            inputStream.close();
                        } catch (IOException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    e = e4;
                    inputStream2 = inputStream;
                    try {
                        e.printStackTrace();
                        i = -1;
                        if (fileOutputStream != null) {
                            try {
                                fileOutputStream.close();
                            } catch (IOException e5) {
                                e5.printStackTrace();
                            }
                        }
                        if (inputStream2 != null) {
                            try {
                                inputStream2.close();
                            } catch (IOException e6) {
                                e6.printStackTrace();
                            }
                        }
                        return i;
                    } catch (Throwable th) {
                        th = th;
                        inputStream = inputStream2;
                        fileOutputStream2 = fileOutputStream;
                        if (fileOutputStream2 != null) {
                            try {
                                fileOutputStream2.close();
                            } catch (IOException e7) {
                                e7.printStackTrace();
                            }
                        }
                        if (inputStream != null) {
                            try {
                                inputStream.close();
                            } catch (IOException e8) {
                                e8.printStackTrace();
                            }
                        }
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    fileOutputStream2 = fileOutputStream;
                    if (fileOutputStream2 != null) {
                    }
                    if (inputStream != null) {
                    }
                    throw th;
                }
            } catch (Exception e9) {
                e = e9;
                fileOutputStream = null;
                inputStream2 = inputStream;
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Exception e10) {
            e = e10;
            fileOutputStream = null;
        } catch (Throwable th4) {
            th = th4;
            inputStream = null;
        }
        return i;
    }

    public String a(int i) {
        String str = Environment.getExternalStorageDirectory().getAbsolutePath() + "/JYMM/download";
        if (i == 1) {
            str = Environment.getExternalStorageDirectory().getAbsolutePath() + "/JYMM/Assets";
        }
        File file = new File(str);
        if (!file.exists()) {
            file.mkdirs();
        }
        return str + "/";
    }

    public void a(Context context, a aVar, d dVar) {
        this.e.lock();
        try {
            if (this.d == 10) {
                LOG.d("JyDexManager", "dex 正在加载中...");
                return;
            }
            this.f = aVar;
            if (this.d == 20) {
                LOG.d("JyDexManager", "dex 已加载了");
                a(1, dVar);
                return;
            }
            this.d = 10;
            MyHashMap myHashMap = new MyHashMap();
            myHashMap.put((MyHashMap) "appId", this.c.appId);
            myHashMap.put((MyHashMap) "version", this.c.version);
            new Thread(new c(this.g, myHashMap, context, dVar)).start();
        } finally {
            this.e.unlock();
        }
    }

    public void a(String str) {
        this.g = str;
    }
}
