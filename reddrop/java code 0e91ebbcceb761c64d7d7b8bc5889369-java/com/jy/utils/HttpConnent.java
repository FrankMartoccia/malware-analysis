package com.jy.utils;

import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.yf.y.f.init.util.ConstUtils;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.net.ConnectException;
import java.net.UnknownHostException;
import java.util.List;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLHandshakeException;
import org.apache.http.HttpEntityEnclosingRequest;
import org.apache.http.HttpHost;
import org.apache.http.HttpRequest;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.NoHttpResponseException;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;
/* loaded from: classes.dex */
public class HttpConnent {
    public static final int MAX_REHTTPTIME = 2;
    public static final int TIMEOUT_VALUE = 6000;

    public static String doHttpDLGet(String str, String str2, int i, int i2, int i3) {
        int i4;
        String str3 = null;
        try {
            DefaultHttpClient httpClient = getHttpClient(i3);
            HttpGet httpGet = new HttpGet(str);
            httpGet.setHeader("Charset", "UTF-8");
            httpGet.setHeader(Cint.b, "application/x-www-form-urlencoded");
            httpClient.getParams().setParameter("http.route.default-proxy", new HttpHost(str2, i));
            HttpResponse execute = httpClient.execute(httpGet);
            if (execute.getStatusLine().getStatusCode() == 200) {
                str3 = EntityUtils.toString(execute.getEntity(), "UTF-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return (str3 != null || (i4 = i2 + 1) >= 2) ? str3 : doHttpDLGet(str, str2, i, i4, i3);
    }

    public static String doHttpGet(String str, int i, int i2) {
        int i3;
        String str2 = null;
        try {
            DefaultHttpClient httpClient = getHttpClient(i2);
            HttpGet httpGet = new HttpGet(str);
            httpGet.setHeader("Charset", "UTF-8");
            httpGet.setHeader(Cint.b, "application/x-www-form-urlencoded");
            HttpResponse execute = httpClient.execute(httpGet);
            if (execute.getStatusLine().getStatusCode() == 200) {
                str2 = EntityUtils.toString(execute.getEntity(), "UTF-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return (str2 != null || (i3 = i + 1) >= 2) ? str2 : doHttpGet(str, i3, i2);
    }

    public static String doHttpGet(String str, String str2, int i, int i2) {
        int i3;
        String str3 = null;
        try {
            DefaultHttpClient httpClient = getHttpClient(i2);
            HttpGet httpGet = new HttpGet(str);
            httpGet.setHeader("Charset", "UTF-8");
            if (TextUtil.notNull(str2)) {
                httpGet.setHeader(Cint.h, str2);
            }
            httpGet.setHeader(Cint.b, "application/x-www-form-urlencoded");
            HttpResponse execute = httpClient.execute(httpGet);
            if (execute.getStatusLine().getStatusCode() == 200) {
                str3 = EntityUtils.toString(execute.getEntity(), "UTF-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return (str3 != null || (i3 = i + 1) >= 2) ? str3 : doHttpGet(str, str2, i3, i2);
    }

    public static String doHttpPost(String str, int i, int i2) {
        int i3;
        String str2 = null;
        try {
            DefaultHttpClient httpClient = getHttpClient(i2);
            HttpPost httpPost = new HttpPost(str);
            httpPost.setHeader("Charset", "UTF-8");
            httpPost.setHeader(Cint.b, "application/x-www-form-urlencoded");
            HttpResponse execute = httpClient.execute(httpPost);
            if (execute.getStatusLine().getStatusCode() == 200) {
                str2 = EntityUtils.toString(execute.getEntity(), "UTF-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return (str2 != null || (i3 = i + 1) >= 2) ? str2 : doHttpPost(str, i3, i2);
    }

    public static String doHttpPost(String str, String str2, int i, int i2) {
        int i3;
        String str3 = null;
        try {
            DefaultHttpClient httpClient = getHttpClient(i2);
            HttpPost httpPost = new HttpPost(str);
            httpPost.setHeader("Charset", "UTF-8");
            if (TextUtil.notNull(str2)) {
                httpPost.setHeader(Cint.h, str2);
            }
            httpPost.setHeader(Cint.b, "application/x-www-form-urlencoded");
            HttpResponse execute = httpClient.execute(httpPost);
            if (execute.getStatusLine().getStatusCode() == 200) {
                str3 = EntityUtils.toString(execute.getEntity(), "UTF-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return (str3 != null || (i3 = i + 1) >= 2) ? str3 : doHttpPost(str, str2, i3, i2);
    }

    public static String doHttpPost(String str, List<NameValuePair> list, int i, int i2) {
        int i3;
        String str2 = null;
        try {
            DefaultHttpClient httpClient = getHttpClient(i2);
            HttpPost httpPost = new HttpPost(str);
            httpPost.setHeader("Charset", "UTF-8");
            httpPost.setHeader(Cint.b, "application/x-www-form-urlencoded");
            httpPost.setHeader(Cint.g, "DuoNiu");
            if (list != null) {
                httpPost.setEntity(new UrlEncodedFormEntity(list, "UTF-8"));
            }
            HttpResponse execute = httpClient.execute(httpPost);
            if (execute.getStatusLine().getStatusCode() == 200) {
                str2 = EntityUtils.toString(execute.getEntity(), "UTF-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return (str2 != null || (i3 = i + 1) >= 2) ? str2 : doHttpPost(str, list, i3, i2);
    }

    public static String doHttpPostString(String str, String str2, int i, int i2) {
        int i3;
        String str3 = null;
        try {
            DefaultHttpClient httpClient = getHttpClient(i2);
            HttpPost httpPost = new HttpPost(str);
            httpPost.setHeader("Charset", "UTF-8");
            httpPost.setHeader(Cint.g, "DuoNiu");
            httpPost.setHeader(Cint.b, "text/xml");
            httpPost.setEntity(new StringEntity(str2));
            HttpResponse execute = httpClient.execute(httpPost);
            if (execute.getStatusLine().getStatusCode() == 200) {
                str3 = EntityUtils.toString(execute.getEntity(), "UTF-8");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return (str3 != null || (i3 = i + 1) >= 2) ? str3 : doHttpPostString(str, str2, i3, i2);
    }

    /* JADX WARN: Removed duplicated region for block: B:70:0x008d A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0088 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static int download(String str, File file, int i, int i2) {
        InputStream inputStream;
        Exception e;
        InputStream inputStream2;
        FileOutputStream fileOutputStream;
        int i3;
        FileOutputStream fileOutputStream2 = null;
        int i4 = -1;
        try {
            HttpResponse execute = getHttpClient(i2).execute(new HttpGet(str));
            if (execute.getStatusLine().getStatusCode() == 200) {
                inputStream2 = execute.getEntity().getContent();
                try {
                    if (inputStream2 == null) {
                        throw new RuntimeException("stream is null");
                    }
                    fileOutputStream = new FileOutputStream(file);
                    try {
                        byte[] bArr = new byte[ConstUtils.KB];
                        while (true) {
                            int read = inputStream2.read(bArr);
                            if (read <= 0) {
                                break;
                            }
                            fileOutputStream.write(bArr, 0, read);
                        }
                        inputStream2.close();
                        i3 = 1;
                    } catch (Exception e2) {
                        e = e2;
                        fileOutputStream2 = fileOutputStream;
                        inputStream = inputStream2;
                        try {
                            e.printStackTrace();
                            if (inputStream != null) {
                                try {
                                    inputStream.close();
                                } catch (IOException e3) {
                                    e3.printStackTrace();
                                }
                            }
                            if (fileOutputStream2 != null) {
                                try {
                                    fileOutputStream2.close();
                                } catch (IOException e4) {
                                    e4.printStackTrace();
                                }
                            }
                            if (i4 != 1) {
                                download(str, file, i + 1, i2);
                            }
                            return i4;
                        } catch (Throwable th) {
                            th = th;
                            inputStream2 = inputStream;
                            if (inputStream2 != null) {
                                try {
                                    inputStream2.close();
                                } catch (IOException e5) {
                                    e5.printStackTrace();
                                }
                            }
                            if (fileOutputStream2 != null) {
                                try {
                                    fileOutputStream2.close();
                                } catch (IOException e6) {
                                    e6.printStackTrace();
                                }
                            }
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        fileOutputStream2 = fileOutputStream;
                        if (inputStream2 != null) {
                        }
                        if (fileOutputStream2 != null) {
                        }
                        throw th;
                    }
                } catch (Exception e7) {
                    e = e7;
                    inputStream = inputStream2;
                } catch (Throwable th3) {
                    th = th3;
                }
            } else {
                fileOutputStream = null;
                inputStream2 = null;
                i3 = -1;
            }
            if (inputStream2 != null) {
                try {
                    inputStream2.close();
                } catch (IOException e8) {
                    e8.printStackTrace();
                    i3 = -1;
                }
            }
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                    i4 = i3;
                } catch (IOException e9) {
                    e9.printStackTrace();
                }
            } else {
                i4 = i3;
            }
        } catch (Exception e10) {
            e = e10;
            inputStream = null;
        } catch (Throwable th4) {
            th = th4;
            inputStream2 = null;
        }
        if (i4 != 1 && i < 1) {
            download(str, file, i + 1, i2);
        }
        return i4;
    }

    public static DefaultHttpClient getHttpClient(int i) {
        if (i <= 2000) {
            i = TIMEOUT_VALUE;
        }
        BasicHttpParams basicHttpParams = new BasicHttpParams();
        HttpConnectionParams.setConnectionTimeout(basicHttpParams, i);
        HttpConnectionParams.setSoTimeout(basicHttpParams, i);
        return new DefaultHttpClient(basicHttpParams);
    }

    public static List<Cookie> getHttpCookie(String str, int i) {
        try {
            DefaultHttpClient httpClient = getHttpClient(i);
            HttpPost httpPost = new HttpPost(str);
            httpPost.setHeader("Charset", "UTF-8");
            httpPost.setHeader(Cint.b, "application/x-www-form-urlencoded");
            BasicHttpContext basicHttpContext = new BasicHttpContext();
            BasicCookieStore basicCookieStore = new BasicCookieStore();
            basicHttpContext.setAttribute("http.cookie-store", basicCookieStore);
            HttpResponse execute = httpClient.execute(httpPost, basicHttpContext);
            if (execute.getStatusLine().getStatusCode() != 200) {
                return null;
            }
            EntityUtils.toString(execute.getEntity(), "UTF-8");
            return basicCookieStore.getCookies();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static long getHttpFileSize(String str) {
        try {
            return new DefaultHttpClient().execute(new HttpGet(str)).getEntity().getContentLength();
        } catch (Exception e) {
            e.printStackTrace();
            return -1L;
        }
    }

    public static byte[] readInputStream(InputStream inputStream) {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] bArr = new byte[ConstUtils.KB];
        while (true) {
            int read = inputStream.read(bArr);
            if (read != -1) {
                byteArrayOutputStream.write(bArr, 0, read);
            } else {
                inputStream.close();
                return byteArrayOutputStream.toByteArray();
            }
        }
    }

    public static void setHttpRequestRetryHandler(DefaultHttpClient defaultHttpClient) {
        defaultHttpClient.setHttpRequestRetryHandler(new HttpRequestRetryHandler() { // from class: com.jy.utils.HttpConnent.1
            public boolean retryRequest(IOException iOException, int i, HttpContext httpContext) {
                if (i >= 2) {
                    return false;
                }
                if (iOException instanceof NoHttpResponseException) {
                    return true;
                }
                if (!(iOException instanceof SSLHandshakeException) && !(iOException instanceof ConnectException) && !(iOException instanceof SSLException)) {
                    if (iOException instanceof InterruptedIOException) {
                        return true;
                    }
                    if (!(iOException instanceof UnknownHostException) && !(((HttpRequest) httpContext.getAttribute("http.request")) instanceof HttpEntityEnclosingRequest)) {
                        return true;
                    }
                    return false;
                }
                return false;
            }
        });
    }
}
