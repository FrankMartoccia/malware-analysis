package com.jy.utils;

import android.content.Context;
import android.util.Log;
import com.jy.publics.SdkConfig;
import com.umeng.analytics.pro.j;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.Properties;
/* loaded from: classes.dex */
public class InitConfigPro extends Thread {
    public static final String TAG = "InitConfigPro";
    Runnable afterTask;
    private WeakReference<Context> contextWeakReference;
    private SdkConfig sdkConfig;

    public InitConfigPro(Context context) {
        this.contextWeakReference = new WeakReference<>(context);
    }

    private void initConfig() {
        boolean z = false;
        try {
            Context context = this.contextWeakReference.get();
            if (context == null) {
                LOG.e(TAG, "context is null");
                return;
            }
            InputStream open = context.getResources().getAssets().open("j_config.properties");
            Properties properties = new Properties();
            properties.load(open);
            String property = properties.getProperty("isDebugger");
            if (property != null) {
                z = Boolean.parseBoolean(property);
            }
            boolean parseBoolean = Boolean.parseBoolean(properties.getProperty("isRH"));
            boolean parseBoolean2 = Boolean.parseBoolean(properties.getProperty("testUrl"));
            boolean parseBoolean3 = Boolean.parseBoolean(properties.getProperty("isOpenWriter"));
            String property2 = properties.getProperty("dexFileName");
            SdkConfig sdkConfig = new SdkConfig();
            sdkConfig.isDebugger = z;
            sdkConfig.isRH = parseBoolean;
            sdkConfig.testUrl = parseBoolean2;
            sdkConfig.isOpenWriter = parseBoolean3;
            sdkConfig.dexFileName = property2;
            sdkConfig.useLocal = Boolean.parseBoolean(properties.getProperty("useLocal"));
            sdkConfig.version = properties.getProperty("version");
            sdkConfig.businessId = properties.getProperty("businessId");
            sdkConfig.passageId = properties.getProperty("passageId");
            sdkConfig.appId = context.getPackageManager().getApplicationInfo(context.getPackageName(), j.h).metaData.getInt("CY_APP_ID", 0) + "";
            sdkConfig.dexUrl = sdkConfig.isRH ? sdkConfig.isDebugger ? "http://xixi.dj111.top:20006/SmsPayServer/sdkUpdate/fuseSdkTest?" : "http://xixi.dj111.top:20006/SmsPayServer/sdkUpdate/fuseSdkIndex?" : "http://xixi.dj111.top:20006/SmsPayServer/sdkUpdate/new_index?";
            this.sdkConfig = sdkConfig;
            LOG.setIsOpenWriter(this.sdkConfig.isOpenWriter, context);
            LOG.setShowLog(z);
            LOG.d(TAG, "init sdk config ok " + this.sdkConfig.toString());
        } catch (Exception e) {
            Log.e(TAG, "init sdk config fail");
            e.printStackTrace();
        }
    }

    public SdkConfig getSdkConfig() {
        return this.sdkConfig;
    }

    @Override // java.lang.Thread, java.lang.Runnable
    public void run() {
        synchronized (SdkConfig.class) {
            initConfig();
        }
        if (this.afterTask != null) {
            this.afterTask.run();
        }
    }

    public void setAfterTask(Runnable runnable) {
        this.afterTask = runnable;
    }
}
