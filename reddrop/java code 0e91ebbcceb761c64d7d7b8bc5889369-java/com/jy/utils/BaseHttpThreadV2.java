package com.jy.utils;

import android.content.Context;
import android.os.Message;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
/* loaded from: classes.dex */
public class BaseHttpThreadV2 implements Runnable {
    public static final int ParseFail = -2;
    public static final int PostFail = -1;
    public static final int PostSuccess = 1;
    public static final long SYNC_SLEEP_TIME = 10;
    protected HttpThreadCallBack httpThreadCallBack;
    protected Map<String, String> maps;
    protected String url;
    protected Message msg = new Message();
    protected String value = null;
    private int timeout = 6800;

    /* loaded from: classes.dex */
    public static class HttpResult {
        public long UseTime;
        public Exception e;
        public long endTime;
        public Object obj;
        public String params;
        public long startTime;
        public String url;
    }

    /* loaded from: classes.dex */
    public interface HttpThreadCallBack {
        void httpResultFail(Message message);

        void httpResultSuccess(Message message);
    }

    public BaseHttpThreadV2(Context context, HttpThreadCallBack httpThreadCallBack, Map<String, String> map) {
        this.httpThreadCallBack = httpThreadCallBack;
        this.maps = map == null ? new MyHashMap<>() : map;
    }

    public BaseHttpThreadV2(HttpThreadCallBack httpThreadCallBack, Map<String, String> map) {
        this.httpThreadCallBack = httpThreadCallBack;
        this.maps = map == null ? new MyHashMap<>() : map;
    }

    public BaseHttpThreadV2(HttpThreadCallBack httpThreadCallBack, Map<String, String> map, Object obj) {
        this.httpThreadCallBack = httpThreadCallBack;
        this.maps = map == null ? new MyHashMap<>() : map;
    }

    public BaseHttpThreadV2(String str, HttpThreadCallBack httpThreadCallBack, Map<String, String> map) {
        this.url = str;
        this.httpThreadCallBack = httpThreadCallBack;
        this.maps = map == null ? new MyHashMap<>() : map;
    }

    public static String getFullUrl(String str, Map<String, String> map) {
        if (!str.endsWith("?")) {
            str = str + "?";
        }
        StringBuilder sb = new StringBuilder(str);
        if (map != null) {
            for (Map.Entry<String, String> entry : map.entrySet()) {
                String key = entry.getKey();
                String value = entry.getValue();
                if (value == null) {
                    value = "";
                }
                sb.append(key + "=" + value + "&");
            }
        }
        return sb.toString();
    }

    public static List<NameValuePair> getPostParams(Map<String, String> map) {
        ArrayList arrayList = new ArrayList();
        if (map != null) {
            for (Map.Entry<String, String> entry : map.entrySet()) {
                String key = entry.getKey();
                String value = entry.getValue();
                if (value == null) {
                    value = "";
                }
                arrayList.add(new BasicNameValuePair(key, value));
            }
        }
        return arrayList;
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public String doBaseHttpPost(String str) {
        HttpResult httpResult = new HttpResult();
        httpResult.startTime = System.currentTimeMillis();
        httpResult.url = str;
        this.value = HttpConnent.doHttpPost(str, getPostParams(this.maps), 0, this.timeout);
        httpResult.obj = this.value;
        httpResult.endTime = System.currentTimeMillis();
        if (this.httpThreadCallBack != null) {
            if (this.value == null) {
                this.msg.obj = httpResult;
                this.httpThreadCallBack.httpResultFail(this.msg);
            } else {
                this.msg.what = 1;
                this.msg.obj = httpResult;
                this.httpThreadCallBack.httpResultSuccess(this.msg);
            }
        }
        return this.value;
    }

    public int getTimeout() {
        return this.timeout;
    }

    @Override // java.lang.Runnable
    public void run() {
    }

    public void setHttpThreadCallBack(HttpThreadCallBack httpThreadCallBack) {
        this.httpThreadCallBack = httpThreadCallBack;
    }

    public void setTimeout(int i) {
        this.timeout = i;
    }
}
