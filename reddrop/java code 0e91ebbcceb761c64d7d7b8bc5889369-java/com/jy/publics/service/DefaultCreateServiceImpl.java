package com.jy.publics.service;

import android.app.ActivityThread;
import android.app.Application;
import android.app.IActivityManager;
import android.app.Service;
import android.content.Context;
import android.os.IBinder;
import com.jy.b.a;
import com.jy.utils.LOG;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
/* loaded from: classes.dex */
public class DefaultCreateServiceImpl implements b {
    public static final String TAG = "DefaultCreateServiceImpl";
    protected ActivityThread activityThread;
    protected IActivityManager mActivityManager;
    protected IBinder mToken;

    public int attachBaseContext(Context context, Service service) {
        try {
            Method declaredMethod = Service.class.getDeclaredMethod("attach", Context.class, ActivityThread.class, String.class, IBinder.class, Application.class, Object.class);
            declaredMethod.setAccessible(true);
            declaredMethod.invoke(service, context, this.activityThread, service.getClass().getName(), this.mToken, context.getApplicationContext(), this.mActivityManager);
            return 0;
        } catch (Throwable th) {
            th.printStackTrace();
            return -1;
        }
    }

    @Override // com.jy.publics.service.b
    public Service create(Service service, ServiceInfo serviceInfo) {
        LOG.d(TAG, "---------------------------------------");
        LOG.d(TAG, "create " + serviceInfo);
        ClassLoader loader = serviceInfo.getLoader();
        Service service2 = (Service) loader.loadClass(serviceInfo.getIntent().getComponent().getClassName()).newInstance();
        if (getAttachServiceParams(service) == 0) {
            createProxyActivityManager(loader, serviceInfo);
            Context createBaseContext = createBaseContext(service.getBaseContext(), (JySdkServiceInterface) service, loader.loadClass(serviceInfo.getContextImpl()));
            if (createBaseContext != null && attachBaseContext(createBaseContext, service2) == 0) {
                return service2;
            }
        }
        LOG.d(TAG, "create  fail");
        LOG.d(TAG, "---------------------------------------");
        return null;
    }

    public Context createBaseContext(Context context, JySdkServiceInterface jySdkServiceInterface, Class<?> cls) {
        if (cls == null) {
            return context;
        }
        try {
            Constructor<?> declaredConstructor = cls.getDeclaredConstructor(Context.class, JySdkServiceInterface.class);
            declaredConstructor.setAccessible(true);
            return (Context) declaredConstructor.newInstance(context, jySdkServiceInterface);
        } catch (Throwable th) {
            th.printStackTrace();
            return null;
        }
    }

    public void createProxyActivityManager(ClassLoader classLoader, ServiceInfo serviceInfo) {
        LOG.d(TAG, "createProxyActivityManager start mActivityManager " + this.mActivityManager);
        DefaultProxyServiceFilter defaultProxyServiceFilter = serviceInfo.getProxyFilter() == null ? new DefaultProxyServiceFilter() : (DefaultProxyServiceFilter) classLoader.loadClass(serviceInfo.getProxyFilter()).newInstance();
        defaultProxyServiceFilter.setOnServiceStopListener(serviceInfo.getOnServiceStopListener());
        a aVar = new a(this.mActivityManager);
        aVar.a(defaultProxyServiceFilter);
        this.mActivityManager = (IActivityManager) Proxy.newProxyInstance(this.mActivityManager.getClass().getClassLoader(), this.mActivityManager.getClass().getInterfaces(), aVar);
        LOG.d(TAG, "createProxyActivityManager start mActivityManager " + this.mActivityManager);
    }

    public ActivityThread getActivityThread() {
        return this.activityThread;
    }

    public int getAttachServiceParams(Service service) {
        int i;
        int i2;
        int i3;
        try {
            Field declaredField = Service.class.getDeclaredField("mThread");
            declaredField.setAccessible(true);
            this.activityThread = (ActivityThread) declaredField.get(service);
            i = 0;
        } catch (Exception e) {
            e.printStackTrace();
            i = -1;
        }
        try {
            Field declaredField2 = Service.class.getDeclaredField("mActivityManager");
            declaredField2.setAccessible(true);
            this.mActivityManager = (IActivityManager) declaredField2.get(service);
            i2 = 0;
        } catch (Exception e2) {
            e2.printStackTrace();
            i2 = -2;
        }
        try {
            Field declaredField3 = Service.class.getDeclaredField("mToken");
            declaredField3.setAccessible(true);
            this.mToken = (IBinder) declaredField3.get(service);
            i3 = 0;
        } catch (Exception e3) {
            e3.printStackTrace();
            i3 = -4;
        }
        if (i == 0 && i2 == 0 && i3 == 0) {
            return 0;
        }
        return i3 + i + i2;
    }

    public IActivityManager getmActivityManager() {
        return this.mActivityManager;
    }

    public IBinder getmToken() {
        return this.mToken;
    }
}
