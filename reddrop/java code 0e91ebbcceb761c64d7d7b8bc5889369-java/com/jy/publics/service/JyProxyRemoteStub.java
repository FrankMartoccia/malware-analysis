package com.jy.publics.service;

import android.os.Binder;
import android.os.Bundle;
import android.os.IBinder;
import android.os.IInterface;
import android.os.Parcel;
/* loaded from: classes.dex */
public interface JyProxyRemoteStub extends IInterface {

    /* loaded from: classes.dex */
    public static abstract class Stub extends Binder implements JyProxyRemoteStub {
        private static final String DESCRIPTOR = "com.jy.publics.service.JyProxyRemoteStub";
        static final int TRANSACTION_bindService = 2;
        static final int TRANSACTION_check = 7;
        static final int TRANSACTION_closeLog = 9;
        static final int TRANSACTION_initPay = 5;
        static final int TRANSACTION_openLog = 8;
        static final int TRANSACTION_startPay = 6;
        static final int TRANSACTION_startService = 1;
        static final int TRANSACTION_stopService = 3;
        static final int TRANSACTION_unregisterPay = 4;

        /* loaded from: classes.dex */
        private static class Proxy implements JyProxyRemoteStub {
            private IBinder mRemote;

            Proxy(IBinder iBinder) {
                this.mRemote = iBinder;
            }

            @Override // android.os.IInterface
            public IBinder asBinder() {
                return this.mRemote;
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public IBinder bindService(ServiceInfo serviceInfo) {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    if (serviceInfo != null) {
                        obtain.writeInt(1);
                        serviceInfo.writeToParcel(obtain, 0);
                    } else {
                        obtain.writeInt(0);
                    }
                    this.mRemote.transact(2, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readStrongBinder();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int check(int i) {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    obtain.writeInt(i);
                    this.mRemote.transact(7, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int closeLog() {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    this.mRemote.transact(9, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            public String getInterfaceDescriptor() {
                return Stub.DESCRIPTOR;
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int initPay(Bundle bundle) {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    if (bundle != null) {
                        obtain.writeInt(1);
                        bundle.writeToParcel(obtain, 0);
                    } else {
                        obtain.writeInt(0);
                    }
                    this.mRemote.transact(5, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int openLog() {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    this.mRemote.transact(8, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int startPay(Bundle bundle) {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    if (bundle != null) {
                        obtain.writeInt(1);
                        bundle.writeToParcel(obtain, 0);
                    } else {
                        obtain.writeInt(0);
                    }
                    this.mRemote.transact(6, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int startService(ServiceInfo serviceInfo) {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    if (serviceInfo != null) {
                        obtain.writeInt(1);
                        serviceInfo.writeToParcel(obtain, 0);
                    } else {
                        obtain.writeInt(0);
                    }
                    this.mRemote.transact(1, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int stopService(String str) {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    obtain.writeString(str);
                    this.mRemote.transact(3, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }

            @Override // com.jy.publics.service.JyProxyRemoteStub
            public int unregisterPay() {
                Parcel obtain = Parcel.obtain();
                Parcel obtain2 = Parcel.obtain();
                try {
                    obtain.writeInterfaceToken(Stub.DESCRIPTOR);
                    this.mRemote.transact(4, obtain, obtain2, 0);
                    obtain2.readException();
                    return obtain2.readInt();
                } finally {
                    obtain2.recycle();
                    obtain.recycle();
                }
            }
        }

        public Stub() {
            attachInterface(this, DESCRIPTOR);
        }

        public static JyProxyRemoteStub asInterface(IBinder iBinder) {
            if (iBinder == null) {
                return null;
            }
            IInterface queryLocalInterface = iBinder.queryLocalInterface(DESCRIPTOR);
            return (queryLocalInterface == null || !(queryLocalInterface instanceof JyProxyRemoteStub)) ? new Proxy(iBinder) : (JyProxyRemoteStub) queryLocalInterface;
        }

        @Override // android.os.IInterface
        public IBinder asBinder() {
            return this;
        }

        @Override // android.os.Binder
        public boolean onTransact(int i, Parcel parcel, Parcel parcel2, int i2) {
            Bundle bundle = null;
            ServiceInfo serviceInfo = null;
            ServiceInfo serviceInfo2 = null;
            Bundle bundle2 = null;
            switch (i) {
                case 1:
                    parcel.enforceInterface(DESCRIPTOR);
                    if (parcel.readInt() != 0) {
                        serviceInfo = ServiceInfo.CREATOR.createFromParcel(parcel);
                    }
                    int startService = startService(serviceInfo);
                    parcel2.writeNoException();
                    parcel2.writeInt(startService);
                    return true;
                case 2:
                    parcel.enforceInterface(DESCRIPTOR);
                    if (parcel.readInt() != 0) {
                        serviceInfo2 = ServiceInfo.CREATOR.createFromParcel(parcel);
                    }
                    IBinder bindService = bindService(serviceInfo2);
                    parcel2.writeNoException();
                    parcel2.writeStrongBinder(bindService);
                    return true;
                case 3:
                    parcel.enforceInterface(DESCRIPTOR);
                    int stopService = stopService(parcel.readString());
                    parcel2.writeNoException();
                    parcel2.writeInt(stopService);
                    return true;
                case 4:
                    parcel.enforceInterface(DESCRIPTOR);
                    int unregisterPay = unregisterPay();
                    parcel2.writeNoException();
                    parcel2.writeInt(unregisterPay);
                    return true;
                case 5:
                    parcel.enforceInterface(DESCRIPTOR);
                    if (parcel.readInt() != 0) {
                        bundle2 = (Bundle) Bundle.CREATOR.createFromParcel(parcel);
                    }
                    int initPay = initPay(bundle2);
                    parcel2.writeNoException();
                    parcel2.writeInt(initPay);
                    return true;
                case 6:
                    parcel.enforceInterface(DESCRIPTOR);
                    if (parcel.readInt() != 0) {
                        bundle = (Bundle) Bundle.CREATOR.createFromParcel(parcel);
                    }
                    int startPay = startPay(bundle);
                    parcel2.writeNoException();
                    parcel2.writeInt(startPay);
                    return true;
                case 7:
                    parcel.enforceInterface(DESCRIPTOR);
                    int check = check(parcel.readInt());
                    parcel2.writeNoException();
                    parcel2.writeInt(check);
                    return true;
                case 8:
                    parcel.enforceInterface(DESCRIPTOR);
                    int openLog = openLog();
                    parcel2.writeNoException();
                    parcel2.writeInt(openLog);
                    return true;
                case 9:
                    parcel.enforceInterface(DESCRIPTOR);
                    int closeLog = closeLog();
                    parcel2.writeNoException();
                    parcel2.writeInt(closeLog);
                    return true;
                case 1598968902:
                    parcel2.writeString(DESCRIPTOR);
                    return true;
                default:
                    return super.onTransact(i, parcel, parcel2, i2);
            }
        }
    }

    IBinder bindService(ServiceInfo serviceInfo);

    int check(int i);

    int closeLog();

    int initPay(Bundle bundle);

    int openLog();

    int startPay(Bundle bundle);

    int startService(ServiceInfo serviceInfo);

    int stopService(String str);

    int unregisterPay();
}
