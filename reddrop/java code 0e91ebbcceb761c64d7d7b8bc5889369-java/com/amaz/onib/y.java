package com.amaz.onib;

import bn.sdk.szwcsss.common.az.code.b.Cint;
import com.amaz.onib.r;
import com.yf.y.f.init.util.ConstUtils;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
/* loaded from: classes.dex */
public class y implements r {

    /* renamed from: a  reason: collision with root package name */
    private r.d f748a = new c();
    private r.e b = new d();

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static abstract class a<T extends r.a> implements r.a<T> {

        /* renamed from: a  reason: collision with root package name */
        URL f749a;
        r.c b;
        Map<String, String> c;
        Map<String, String> d;

        private a() {
            this.c = new LinkedHashMap();
            this.d = new LinkedHashMap();
        }

        private String e(String str) {
            Map.Entry<String, String> f;
            ab.a((Object) str, "Header name must not be null");
            String str2 = this.c.get(str);
            if (str2 == null) {
                str2 = this.c.get(str.toLowerCase());
            }
            return (str2 != null || (f = f(str)) == null) ? str2 : f.getValue();
        }

        private Map.Entry<String, String> f(String str) {
            String lowerCase = str.toLowerCase();
            for (Map.Entry<String, String> entry : this.c.entrySet()) {
                if (entry.getKey().toLowerCase().equals(lowerCase)) {
                    return entry;
                }
            }
            return null;
        }

        @Override // com.amaz.onib.r.a
        public T a(r.c cVar) {
            ab.a(cVar, "Method must not be null");
            this.b = cVar;
            return this;
        }

        @Override // com.amaz.onib.r.a
        public T a(String str, String str2) {
            ab.a(str, "Header name must not be empty");
            ab.a((Object) str2, "Header value must not be null");
            c(str);
            this.c.put(str, str2);
            return this;
        }

        @Override // com.amaz.onib.r.a
        public T a(URL url) {
            ab.a(url, "URL must not be null");
            this.f749a = url;
            return this;
        }

        public String a(String str) {
            ab.a((Object) str, "Header name must not be null");
            return e(str);
        }

        @Override // com.amaz.onib.r.a
        public URL a() {
            return this.f749a;
        }

        @Override // com.amaz.onib.r.a
        public T b(String str, String str2) {
            ab.a(str, "Cookie name must not be empty");
            ab.a((Object) str2, "Cookie value must not be null");
            this.d.put(str, str2);
            return this;
        }

        @Override // com.amaz.onib.r.a
        public r.c b() {
            return this.b;
        }

        public boolean b(String str) {
            ab.a(str, "Header name must not be empty");
            return e(str) != null;
        }

        public T c(String str) {
            ab.a(str, "Header name must not be empty");
            Map.Entry<String, String> f = f(str);
            if (f != null) {
                this.c.remove(f.getKey());
            }
            return this;
        }

        @Override // com.amaz.onib.r.a
        public Map<String, String> c() {
            return this.c;
        }

        public boolean c(String str, String str2) {
            return b(str) && a(str).equalsIgnoreCase(str2);
        }

        @Override // com.amaz.onib.r.a
        public Map<String, String> d() {
            return this.d;
        }

        public boolean d(String str) {
            ab.a(str, "Cookie name must not be empty");
            return this.d.containsKey(str);
        }
    }

    /* loaded from: classes.dex */
    public static class b implements r.b {

        /* renamed from: a  reason: collision with root package name */
        private String f750a;
        private String b;
        private InputStream c;

        private b() {
        }

        public static b a(String str, String str2) {
            return new b().a(str).b(str2);
        }

        public b a(String str) {
            ab.a(str, "Data key must not be empty");
            this.f750a = str;
            return this;
        }

        @Override // com.amaz.onib.r.b
        public String a() {
            return this.f750a;
        }

        public b b(String str) {
            ab.a((Object) str, "Data value must not be null");
            this.b = str;
            return this;
        }

        @Override // com.amaz.onib.r.b
        public String b() {
            return this.b;
        }

        @Override // com.amaz.onib.r.b
        public InputStream c() {
            return this.c;
        }

        @Override // com.amaz.onib.r.b
        public boolean d() {
            return this.c != null;
        }

        public String toString() {
            return this.f750a + "=" + this.b;
        }
    }

    /* loaded from: classes.dex */
    public static class c extends a<r.d> implements r.d {
        private Proxy e;
        private int f;
        private int g;
        private boolean h;
        private Collection<r.b> i;
        private String j;
        private boolean k;
        private boolean l;
        private boolean m;
        private boolean n;
        private String o;

        private c() {
            super();
            this.j = null;
            this.k = false;
            this.l = false;
            this.m = false;
            this.n = true;
            this.o = "UTF-8";
            this.f = 3000;
            this.g = ConstUtils.MB;
            this.h = true;
            this.i = new ArrayList();
            this.b = r.c.GET;
            this.c.put(Cint.f, "gzip");
        }

        @Override // com.amaz.onib.r.d
        public r.d a(boolean z) {
            this.k = z;
            return this;
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ String a(String str) {
            return super.a(str);
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ URL a() {
            return super.a();
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ r.c b() {
            return super.b();
        }

        @Override // com.amaz.onib.r.d
        public r.d b(boolean z) {
            this.l = z;
            return this;
        }

        /* renamed from: b */
        public c a(int i) {
            ab.a(i >= 0, "Timeout milliseconds must be 0 (infinite) or greater");
            this.f = i;
            return this;
        }

        /* renamed from: b */
        public c a(r.b bVar) {
            ab.a(bVar, "Key val must not be null");
            this.i.add(bVar);
            return this;
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ boolean b(String str) {
            return super.b(str);
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ Map c() {
            return super.c();
        }

        @Override // com.amaz.onib.r.d
        public void c(boolean z) {
            this.n = z;
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ boolean c(String str, String str2) {
            return super.c(str, str2);
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ Map d() {
            return super.d();
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ boolean d(String str) {
            return super.d(str);
        }

        @Override // com.amaz.onib.r.d
        public Proxy e() {
            return this.e;
        }

        @Override // com.amaz.onib.r.d
        public int f() {
            return this.f;
        }

        @Override // com.amaz.onib.r.d
        public int g() {
            return this.g;
        }

        @Override // com.amaz.onib.r.d
        public boolean h() {
            return this.h;
        }

        @Override // com.amaz.onib.r.d
        public boolean i() {
            return this.k;
        }

        @Override // com.amaz.onib.r.d
        public boolean j() {
            return this.l;
        }

        @Override // com.amaz.onib.r.d
        public boolean k() {
            return this.n;
        }

        @Override // com.amaz.onib.r.d
        public Collection<r.b> l() {
            return this.i;
        }

        @Override // com.amaz.onib.r.d
        public String m() {
            return this.j;
        }

        @Override // com.amaz.onib.r.d
        public String n() {
            return this.o;
        }
    }

    /* loaded from: classes.dex */
    public static class d extends a<r.e> implements r.e {
        private static SSLSocketFactory e;
        private static final Pattern n = Pattern.compile("(application|text)/\\w*\\+?xml.*");
        private int f;
        private String g;
        private ByteBuffer h;
        private String i;
        private String j;
        private boolean k;
        private int l;
        private r.d m;

        d() {
            super();
            this.k = false;
            this.l = 0;
        }

        private d(d dVar) {
            super();
            this.k = false;
            this.l = 0;
            if (dVar != null) {
                this.l = dVar.l + 1;
                if (this.l >= 20) {
                    throw new IOException(String.format("Too many redirects occurred trying to load URL %s", dVar.a()));
                }
            }
        }

        static d a(r.d dVar) {
            return a(dVar, (d) null);
        }

        static d a(r.d dVar, d dVar2) {
            String c;
            ab.a(dVar, "Request must not be null");
            String protocol = dVar.a().getProtocol();
            if (protocol.equals("http") || protocol.equals("https")) {
                boolean a2 = dVar.b().a();
                boolean z = dVar.m() != null;
                if (!a2) {
                    ab.b(z, "Cannot set a request body for HTTP method " + dVar.b());
                }
                if (dVar.l().size() <= 0 || (a2 && !z)) {
                    c = a2 ? c(dVar) : null;
                } else {
                    e(dVar);
                    c = null;
                }
                HttpURLConnection b = b(dVar);
                try {
                    b.connect();
                    if (b.getDoOutput()) {
                        a(dVar, b.getOutputStream(), c);
                    }
                    int responseCode = b.getResponseCode();
                    d dVar3 = new d(dVar2);
                    dVar3.a(b, dVar2);
                    dVar3.m = dVar;
                    if (dVar3.b(Cint.l) && dVar.h()) {
                        if (responseCode != 307) {
                            dVar.a(r.c.GET);
                            dVar.l().clear();
                        }
                        String a3 = dVar3.a(Cint.l);
                        if (!(a3 == null || !a3.startsWith("http:/") || a3.charAt(6) == '/')) {
                            a3 = a3.substring(6);
                        }
                        dVar.a(z.a(dVar.a(), y.e(a3)));
                        for (Map.Entry<String, String> entry : dVar3.d.entrySet()) {
                            dVar.b(entry.getKey(), entry.getValue());
                        }
                        return a(dVar, dVar3);
                    } else if ((responseCode < 200 || responseCode >= 400) && !dVar.i()) {
                        throw new s("HTTP error fetching URL", responseCode, dVar.a().toString());
                    } else {
                        String h = dVar3.h();
                        if (h == null || dVar.j() || h.startsWith("text/") || n.matcher(h).matches()) {
                            if (h == null || !n.matcher(h).matches() || !(dVar instanceof c) || !((c) dVar).m) {
                            }
                            dVar3.i = v.a(dVar3.j);
                            if (b.getContentLength() == 0 || dVar.b() == r.c.HEAD) {
                                dVar3.h = v.a();
                            } else {
                                InputStream errorStream = b.getErrorStream() != null ? b.getErrorStream() : b.getInputStream();
                                if (dVar3.c("Content-Encoding", "gzip")) {
                                    errorStream = new GZIPInputStream(errorStream);
                                }
                                dVar3.h = v.a(errorStream, dVar.g());
                                if (errorStream != null) {
                                    errorStream.close();
                                }
                            }
                            b.disconnect();
                            dVar3.k = true;
                            return dVar3;
                        }
                        throw new u("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", h, dVar.a().toString());
                    }
                } finally {
                    b.disconnect();
                }
            } else {
                throw new MalformedURLException("Only http & https protocols supported");
            }
        }

        private static LinkedHashMap<String, List<String>> a(HttpURLConnection httpURLConnection) {
            LinkedHashMap<String, List<String>> linkedHashMap = new LinkedHashMap<>();
            int i = 0;
            while (true) {
                String headerFieldKey = httpURLConnection.getHeaderFieldKey(i);
                String headerField = httpURLConnection.getHeaderField(i);
                if (headerFieldKey == null && headerField == null) {
                    return linkedHashMap;
                }
                int i2 = i + 1;
                if (headerFieldKey == null) {
                    i = i2;
                } else if (headerField == null) {
                    i = i2;
                } else {
                    if (linkedHashMap.containsKey(headerFieldKey)) {
                        linkedHashMap.get(headerFieldKey).add(headerField);
                    } else {
                        ArrayList arrayList = new ArrayList();
                        arrayList.add(headerField);
                        linkedHashMap.put(headerFieldKey, arrayList);
                    }
                    i = i2;
                }
            }
        }

        private static void a(r.d dVar, OutputStream outputStream, String str) {
            Collection<r.b> l = dVar.l();
            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, dVar.n()));
            if (str != null) {
                for (r.b bVar : l) {
                    bufferedWriter.write("--");
                    bufferedWriter.write(str);
                    bufferedWriter.write("\r\n");
                    bufferedWriter.write("Content-Disposition: form-data; name=\"");
                    bufferedWriter.write(y.f(bVar.a()));
                    bufferedWriter.write("\"");
                    if (bVar.d()) {
                        bufferedWriter.write("; filename=\"");
                        bufferedWriter.write(y.f(bVar.b()));
                        bufferedWriter.write("\"\r\nContent-Type: application/octet-stream\r\n\r\n");
                        bufferedWriter.flush();
                        v.a(bVar.c(), outputStream);
                        outputStream.flush();
                    } else {
                        bufferedWriter.write("\r\n\r\n");
                        bufferedWriter.write(bVar.b());
                    }
                    bufferedWriter.write("\r\n");
                }
                bufferedWriter.write("--");
                bufferedWriter.write(str);
                bufferedWriter.write("--");
            } else if (dVar.m() != null) {
                bufferedWriter.write(dVar.m());
            } else {
                boolean z = true;
                for (r.b bVar2 : l) {
                    if (!z) {
                        bufferedWriter.append('&');
                    } else {
                        z = false;
                    }
                    bufferedWriter.write(URLEncoder.encode(bVar2.a(), dVar.n()));
                    bufferedWriter.write(61);
                    bufferedWriter.write(URLEncoder.encode(bVar2.b(), dVar.n()));
                }
            }
            bufferedWriter.close();
        }

        private void a(HttpURLConnection httpURLConnection, r.e eVar) {
            this.b = r.c.valueOf(httpURLConnection.getRequestMethod());
            this.f749a = httpURLConnection.getURL();
            this.f = httpURLConnection.getResponseCode();
            this.g = httpURLConnection.getResponseMessage();
            this.j = httpURLConnection.getContentType();
            a(a(httpURLConnection));
            if (eVar != null) {
                for (Map.Entry<String, String> entry : eVar.d().entrySet()) {
                    if (!d(entry.getKey())) {
                        b(entry.getKey(), entry.getValue());
                    }
                }
            }
        }

        private static HttpURLConnection b(r.d dVar) {
            HttpURLConnection httpURLConnection = (HttpURLConnection) (dVar.e() == null ? dVar.a().openConnection() : dVar.a().openConnection(dVar.e()));
            httpURLConnection.setRequestMethod(dVar.b().name());
            httpURLConnection.setInstanceFollowRedirects(false);
            httpURLConnection.setConnectTimeout(dVar.f());
            httpURLConnection.setReadTimeout(dVar.f());
            if ((httpURLConnection instanceof HttpsURLConnection) && !dVar.k()) {
                j();
                ((HttpsURLConnection) httpURLConnection).setSSLSocketFactory(e);
                ((HttpsURLConnection) httpURLConnection).setHostnameVerifier(i());
            }
            if (dVar.b().a()) {
                httpURLConnection.setDoOutput(true);
            }
            if (dVar.d().size() > 0) {
                httpURLConnection.addRequestProperty(Cint.h, d(dVar));
            }
            for (Map.Entry<String, String> entry : dVar.c().entrySet()) {
                httpURLConnection.addRequestProperty(entry.getKey(), entry.getValue());
            }
            return httpURLConnection;
        }

        private static String c(r.d dVar) {
            if (y.b(dVar)) {
                String b = v.b();
                dVar.a(Cint.b, "multipart/form-data; boundary=" + b);
                return b;
            }
            dVar.a(Cint.b, "application/x-www-form-urlencoded; charset=" + dVar.n());
            return null;
        }

        private static String d(r.d dVar) {
            boolean z;
            StringBuilder sb = new StringBuilder();
            boolean z2 = true;
            for (Map.Entry<String, String> entry : dVar.d().entrySet()) {
                if (!z2) {
                    sb.append("; ");
                    z = z2;
                } else {
                    z = false;
                }
                sb.append(entry.getKey()).append('=').append(entry.getValue());
                z2 = z;
            }
            return sb.toString();
        }

        private static void e(r.d dVar) {
            URL a2 = dVar.a();
            StringBuilder sb = new StringBuilder();
            boolean z = true;
            sb.append(a2.getProtocol()).append("://").append(a2.getAuthority()).append(a2.getPath()).append("?");
            if (a2.getQuery() != null) {
                sb.append(a2.getQuery());
                z = false;
            }
            boolean z2 = z;
            for (r.b bVar : dVar.l()) {
                ab.b(bVar.d(), "InputStream data not supported in URL query string.");
                if (!z2) {
                    sb.append('&');
                } else {
                    z2 = false;
                }
                sb.append(URLEncoder.encode(bVar.a(), "UTF-8")).append('=').append(URLEncoder.encode(bVar.b(), "UTF-8"));
            }
            dVar.a(new URL(sb.toString()));
            dVar.l().clear();
        }

        private static HostnameVerifier i() {
            return new HostnameVerifier() { // from class: com.amaz.onib.y.d.1
                @Override // javax.net.ssl.HostnameVerifier
                public boolean verify(String str, SSLSession sSLSession) {
                    return true;
                }
            };
        }

        private static synchronized void j() {
            synchronized (d.class) {
                if (e == null) {
                    TrustManager[] trustManagerArr = {new X509TrustManager() { // from class: com.amaz.onib.y.d.2
                        @Override // javax.net.ssl.X509TrustManager
                        public void checkClientTrusted(X509Certificate[] x509CertificateArr, String str) {
                        }

                        @Override // javax.net.ssl.X509TrustManager
                        public void checkServerTrusted(X509Certificate[] x509CertificateArr, String str) {
                        }

                        @Override // javax.net.ssl.X509TrustManager
                        public X509Certificate[] getAcceptedIssuers() {
                            return null;
                        }
                    }};
                    try {
                        try {
                            SSLContext sSLContext = SSLContext.getInstance("SSL");
                            sSLContext.init(null, trustManagerArr, new SecureRandom());
                            e = sSLContext.getSocketFactory();
                        } catch (NoSuchAlgorithmException e2) {
                            throw new IOException("Can't create unsecure trust manager");
                        }
                    } catch (KeyManagementException e3) {
                        throw new IOException("Can't create unsecure trust manager");
                    }
                }
            }
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ String a(String str) {
            return super.a(str);
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ URL a() {
            return super.a();
        }

        void a(Map<String, List<String>> map) {
            for (Map.Entry<String, List<String>> entry : map.entrySet()) {
                String key = entry.getKey();
                if (key != null) {
                    List<String> value = entry.getValue();
                    if (key.equalsIgnoreCase(Cint.i)) {
                        for (String str : value) {
                            if (str != null) {
                                aa aaVar = new aa(str);
                                String trim = aaVar.d("=").trim();
                                String trim2 = aaVar.c(";").trim();
                                if (trim.length() > 0) {
                                    b(trim, trim2);
                                }
                            }
                        }
                    } else if (value.size() == 1) {
                        a(key, value.get(0));
                    } else if (value.size() > 1) {
                        StringBuilder sb = new StringBuilder();
                        for (int i = 0; i < value.size(); i++) {
                            String str2 = value.get(i);
                            if (i != 0) {
                                sb.append(", ");
                            }
                            sb.append(str2);
                        }
                        a(key, sb.toString());
                    }
                }
            }
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ r.c b() {
            return super.b();
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ boolean b(String str) {
            return super.b(str);
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ Map c() {
            return super.c();
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ boolean c(String str, String str2) {
            return super.c(str, str2);
        }

        @Override // com.amaz.onib.y.a, com.amaz.onib.r.a
        public /* bridge */ /* synthetic */ Map d() {
            return super.d();
        }

        @Override // com.amaz.onib.y.a
        public /* bridge */ /* synthetic */ boolean d(String str) {
            return super.d(str);
        }

        @Override // com.amaz.onib.r.e
        public int e() {
            return this.f;
        }

        @Override // com.amaz.onib.r.e
        public String f() {
            ab.a(this.k, "Request must be executed (with .execute(), .get(), or .post() before getting response body");
            String charBuffer = this.i == null ? Charset.forName("UTF-8").decode(this.h).toString() : Charset.forName(this.i).decode(this.h).toString();
            this.h.rewind();
            return charBuffer;
        }

        @Override // com.amaz.onib.r.e
        public byte[] g() {
            ab.a(this.k, "Request must be executed (with .execute(), .get(), or .post() before getting response body");
            return this.h.array();
        }

        public String h() {
            return this.j;
        }
    }

    private y() {
    }

    public static r b(String str) {
        y yVar = new y();
        yVar.a(str);
        return yVar;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static boolean b(r.d dVar) {
        for (r.b bVar : dVar.l()) {
            if (bVar.d()) {
                return true;
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static String e(String str) {
        if (str == null) {
            return null;
        }
        return str.replaceAll(" ", "%20");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static String f(String str) {
        if (str == null) {
            return null;
        }
        return str.replaceAll("\"", "%22");
    }

    @Override // com.amaz.onib.r
    public r a(int i) {
        this.f748a.a(i);
        return this;
    }

    @Override // com.amaz.onib.r
    public r a(r.c cVar) {
        this.f748a.a(cVar);
        return this;
    }

    @Override // com.amaz.onib.r
    public r a(String str) {
        ab.a(str, "Must supply a valid URL");
        try {
            this.f748a.a(new URL(e(str)));
            return this;
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException("Malformed URL: " + str, e);
        }
    }

    @Override // com.amaz.onib.r
    public r a(String str, String str2) {
        this.f748a.a(b.a(str, str2));
        return this;
    }

    @Override // com.amaz.onib.r
    public r a(Map<String, String> map) {
        ab.a(map, "Data map must not be null");
        for (Map.Entry<String, String> entry : map.entrySet()) {
            this.f748a.a(b.a(entry.getKey(), entry.getValue()));
        }
        return this;
    }

    @Override // com.amaz.onib.r
    public r a(boolean z) {
        this.f748a.a(z);
        return this;
    }

    @Override // com.amaz.onib.r
    public String a() {
        this.f748a.a(r.c.GET);
        c();
        return this.b.f();
    }

    @Override // com.amaz.onib.r
    public r b(String str, String str2) {
        this.f748a.a(str, str2);
        return this;
    }

    @Override // com.amaz.onib.r
    public r b(Map<String, String> map) {
        ab.a(map, "Cookie map must not be null");
        for (Map.Entry<String, String> entry : map.entrySet()) {
            this.f748a.b(entry.getKey(), entry.getValue());
        }
        return this;
    }

    @Override // com.amaz.onib.r
    public r b(boolean z) {
        this.f748a.b(z);
        return this;
    }

    @Override // com.amaz.onib.r
    public String b() {
        this.f748a.a(r.c.POST);
        c();
        return this.b.f();
    }

    @Override // com.amaz.onib.r
    public r.e c() {
        this.b = d.a(this.f748a);
        return this.b;
    }

    @Override // com.amaz.onib.r
    public r c(String str, String str2) {
        this.f748a.b(str, str2);
        return this;
    }

    @Override // com.amaz.onib.r
    public r c(boolean z) {
        this.f748a.c(z);
        return this;
    }

    @Override // com.amaz.onib.r
    public r.e d() {
        return this.b;
    }
}
