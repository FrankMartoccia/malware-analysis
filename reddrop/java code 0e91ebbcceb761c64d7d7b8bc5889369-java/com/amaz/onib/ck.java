package com.amaz.onib;

import com.umeng.analytics.pro.dm;
import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
/* loaded from: classes.dex */
public class ck {

    /* renamed from: a  reason: collision with root package name */
    private static final char[] f707a = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    private static final byte[] b = {48, 48, 48, 48, 48, 48, 48, 48};

    public static String a(String str) {
        MessageDigest messageDigest = null;
        try {
            messageDigest = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            messageDigest.update(str.getBytes("GBK"));
        } catch (UnsupportedEncodingException e2) {
            e2.printStackTrace();
        }
        return new String(a(messageDigest.digest()));
    }

    public static String a(String str, String str2) {
        return a(str, str2, "UTF-8");
    }

    public static String a(String str, String str2, String str3) {
        byte[] bytes;
        try {
            int length = str.length() % 8;
            if (length != 0) {
                int i = 8 - length;
                StringBuffer stringBuffer = new StringBuffer(str);
                for (int i2 = 0; i2 < i; i2++) {
                    stringBuffer.append(' ');
                }
                bytes = new String(stringBuffer).getBytes(str3);
            } else {
                bytes = str.getBytes(str3);
            }
            return cj.a(a(bytes, str2)).replaceAll("[\\n\\r]", "");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] a(String str, int i, byte[] bArr, byte[] bArr2) {
        SecretKey b2 = b(str);
        IvParameterSpec b3 = bArr == null ? b(b) : b(bArr);
        try {
            Cipher cipher = Cipher.getInstance("DESede/CBC/NoPadding");
            cipher.init(i, b2, b3);
            return cipher.doFinal(bArr2);
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
            return null;
        } catch (InvalidKeyException e2) {
            e2.printStackTrace();
            return null;
        } catch (NoSuchAlgorithmException e3) {
            e3.printStackTrace();
            return null;
        } catch (BadPaddingException e4) {
            e4.printStackTrace();
            return null;
        } catch (IllegalBlockSizeException e5) {
            e5.printStackTrace();
            return null;
        } catch (NoSuchPaddingException e6) {
            e6.printStackTrace();
            return null;
        }
    }

    public static byte[] a(byte[] bArr, String str) {
        return a(str, 1, null, bArr);
    }

    public static char[] a(byte[] bArr) {
        int i = 0;
        int length = bArr.length;
        char[] cArr = new char[length << 1];
        for (int i2 = 0; i2 < length; i2++) {
            int i3 = i + 1;
            cArr[i] = f707a[(bArr[i2] & 240) >>> 4];
            i = i3 + 1;
            cArr[i3] = f707a[bArr[i2] & dm.m];
        }
        return cArr;
    }

    private static SecretKey b(String str) {
        byte[] bArr = null;
        try {
            bArr = a(str).substring(0, 24).getBytes("GBK");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return new SecretKeySpec(bArr, "DESede");
    }

    private static IvParameterSpec b(byte[] bArr) {
        return new IvParameterSpec(bArr);
    }
}
