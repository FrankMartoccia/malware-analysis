package com.amaz.onib;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
/* loaded from: classes.dex */
public class h implements Serializable, Cloneable {
    public int A;
    public String B;
    public int C;

    /* renamed from: a  reason: collision with root package name */
    public long f732a;
    public String b;
    public int f;
    public int g;
    public int h;
    public String q;
    public String r;
    public String s;
    public String t;
    public String[] w;
    public String[] x;
    public String c = "";
    public String d = "";
    public String e = "";
    public String i = "";
    public String[] j = null;
    public String[] k = null;
    public int l = 0;
    public String m = "";
    public String n = "";
    public String o = "";
    public String p = "";
    public String u = "0";
    public String v = "";
    public int y = 0;
    public String z = "";
    public String D = "";
    public String E = "";
    public String F = "";
    public String G = "";

    public static List<Data> a(List<h> list) {
        ArrayList arrayList = new ArrayList();
        if (list != null) {
            for (h hVar : list) {
                if (hVar.f != 0) {
                    arrayList.add(new Data(hVar.b, hVar.f, hVar.h, hVar.q));
                }
            }
        }
        return arrayList;
    }

    public boolean a() {
        return this.r != null && this.r.contains("bsid=");
    }

    public boolean b() {
        return this.r != null && this.r.contains("cid=");
    }

    public String[] c() {
        if (!(a() || b())) {
            return null;
        }
        String[] split = this.r.split("&");
        if (split != null && split.length >= 2) {
            for (int i = 0; i < split.length; i++) {
                String str = split[i];
                if (!(str == null || str.indexOf("=") == -1)) {
                    split[i] = str.substring(str.indexOf("=") + 1);
                }
            }
        }
        return split;
    }

    public Object clone() {
        try {
            return (h) super.clone();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj != null && getClass() == obj.getClass()) {
            h hVar = (h) obj;
            if (this.b == null) {
                if (hVar.b != null) {
                    return false;
                }
            } else if (!this.b.equals(hVar.b)) {
                return false;
            }
            return this.z == null ? hVar.z == null : this.z.equals(hVar.z);
        }
        return false;
    }

    public int hashCode() {
        int i = 0;
        int hashCode = ((this.b == null ? 0 : this.b.hashCode()) + 31) * 31;
        if (this.z != null) {
            i = this.z.hashCode();
        }
        return hashCode + i;
    }
}
