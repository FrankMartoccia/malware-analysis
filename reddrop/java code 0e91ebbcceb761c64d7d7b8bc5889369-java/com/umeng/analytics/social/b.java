package com.umeng.analytics.social;

import android.os.Build;
import android.text.TextUtils;
import com.payment.plus.sk.abcdef.jczdf.intf.StatService;
import com.umeng.analytics.pro.by;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Random;
import java.util.zip.GZIPInputStream;
import java.util.zip.InflaterInputStream;
/* compiled from: UMNetwork.java */
/* loaded from: classes.dex */
public abstract class b {
    /* JADX INFO: Access modifiers changed from: protected */
    public static String a(String str) {
        HttpURLConnection httpURLConnection;
        Throwable th;
        String str2;
        InputStream inputStream;
        HttpURLConnection httpURLConnection2 = null;
        int nextInt = new Random().nextInt(1000);
        try {
            String property = System.getProperty("line.separator");
            if (str.length() <= 1) {
                by.e(nextInt + ":  Invalid baseUrl.");
                if (0 != 0) {
                    httpURLConnection2.disconnect();
                }
                str2 = null;
            } else {
                httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
                try {
                    httpURLConnection.setConnectTimeout(10000);
                    httpURLConnection.setReadTimeout(StatService.SDKVersion);
                    httpURLConnection.setRequestMethod("GET");
                    if (Integer.parseInt(Build.VERSION.SDK) < 8) {
                        System.setProperty("http.keepAlive", "false");
                    }
                    by.c(nextInt + ": GET_URL: " + str);
                    if (httpURLConnection.getResponseCode() == 200) {
                        InputStream inputStream2 = httpURLConnection.getInputStream();
                        String headerField = httpURLConnection.getHeaderField("Content-Encoding");
                        if (!TextUtils.isEmpty(headerField) && headerField.equalsIgnoreCase("gzip")) {
                            by.c(nextInt + "  Use GZIPInputStream get data....");
                            inputStream = new GZIPInputStream(inputStream2);
                        } else if (TextUtils.isEmpty(headerField) || !headerField.equalsIgnoreCase("deflate")) {
                            inputStream = inputStream2;
                        } else {
                            by.c(nextInt + "  Use InflaterInputStream get data....");
                            inputStream = new InflaterInputStream(inputStream2);
                        }
                        String a2 = a(inputStream);
                        by.c(nextInt + ":  response: " + property + a2);
                        if (a2 == null) {
                            if (httpURLConnection != null) {
                                httpURLConnection.disconnect();
                            }
                            str2 = null;
                        } else {
                            if (httpURLConnection != null) {
                                httpURLConnection.disconnect();
                            }
                            str2 = a2;
                        }
                    } else {
                        by.c(nextInt + ":  Failed to get message." + str);
                        if (httpURLConnection != null) {
                            httpURLConnection.disconnect();
                        }
                        str2 = null;
                    }
                } catch (Exception e) {
                    if (httpURLConnection != null) {
                        httpURLConnection.disconnect();
                    }
                    return null;
                } catch (Throwable th2) {
                    httpURLConnection2 = httpURLConnection;
                    th = th2;
                    if (httpURLConnection2 != null) {
                        httpURLConnection2.disconnect();
                    }
                    throw th;
                }
            }
            return str2;
        } catch (Exception e2) {
            httpURLConnection = null;
        } catch (Throwable th3) {
            th = th3;
        }
    }

    private static String a(InputStream inputStream) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream), 8192);
        StringBuilder sb = new StringBuilder();
        while (true) {
            try {
                String readLine = bufferedReader.readLine();
                if (readLine != null) {
                    sb.append(readLine + "\n");
                } else {
                    try {
                        inputStream.close();
                        return sb.toString();
                    } catch (IOException e) {
                        return null;
                    }
                }
            } catch (IOException e2) {
                try {
                    inputStream.close();
                    return null;
                } catch (IOException e3) {
                    return null;
                }
            } catch (Throwable th) {
                try {
                    inputStream.close();
                    throw th;
                } catch (IOException e4) {
                    return null;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public static String a(String str, String str2) {
        Throwable th;
        HttpURLConnection httpURLConnection;
        String property;
        HttpURLConnection httpURLConnection2 = null;
        int nextInt = new Random().nextInt(1000);
        try {
            property = System.getProperty("line.separator");
            httpURLConnection = (HttpURLConnection) new URL(str).openConnection();
        } catch (Exception e) {
            httpURLConnection = null;
        } catch (Throwable th2) {
            th = th2;
        }
        try {
            httpURLConnection.setConnectTimeout(10000);
            httpURLConnection.setReadTimeout(StatService.SDKVersion);
            httpURLConnection.setDoOutput(true);
            httpURLConnection.setDoInput(true);
            httpURLConnection.setUseCaches(false);
            httpURLConnection.setRequestMethod("POST");
            by.c(nextInt + ": POST_URL: " + str);
            if (Integer.parseInt(Build.VERSION.SDK) < 8) {
                System.setProperty("http.keepAlive", "false");
            }
            if (!TextUtils.isEmpty(str2)) {
                by.c(nextInt + ": POST_BODY: " + str2);
                ArrayList arrayList = new ArrayList();
                arrayList.add("data=" + str2);
                OutputStream outputStream = httpURLConnection.getOutputStream();
                outputStream.write(URLEncoder.encode(arrayList.toString()).getBytes());
                outputStream.flush();
                outputStream.close();
            }
            if (httpURLConnection.getResponseCode() == 200) {
                InputStream inputStream = httpURLConnection.getInputStream();
                String headerField = httpURLConnection.getHeaderField("Content-Encoding");
                String a2 = a((TextUtils.isEmpty(headerField) || !headerField.equalsIgnoreCase("gzip")) ? inputStream : new InflaterInputStream(inputStream));
                by.c(nextInt + ":  response: " + property + a2);
                if (a2 == null) {
                    if (httpURLConnection != null) {
                        httpURLConnection.disconnect();
                    }
                    return null;
                }
                if (httpURLConnection != null) {
                    httpURLConnection.disconnect();
                }
                return a2;
            }
            by.e(nextInt + ":  Failed to send message." + str);
            if (httpURLConnection != null) {
                httpURLConnection.disconnect();
            }
            return null;
        } catch (Exception e2) {
            if (httpURLConnection != null) {
                httpURLConnection.disconnect();
            }
            return null;
        } catch (Throwable th3) {
            httpURLConnection2 = httpURLConnection;
            th = th3;
            if (httpURLConnection2 != null) {
                httpURLConnection2.disconnect();
            }
            throw th;
        }
    }
}
