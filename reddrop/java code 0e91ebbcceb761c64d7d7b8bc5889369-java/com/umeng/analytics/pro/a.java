package com.umeng.analytics.pro;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import com.umeng.analytics.pro.d;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.json.JSONArray;
import org.json.JSONObject;
/* compiled from: CCSQLManager.java */
/* loaded from: classes.dex */
public class a {
    public static boolean a(SQLiteDatabase sQLiteDatabase, String str) {
        try {
            sQLiteDatabase.execSQL("drop table if exists " + str);
            return true;
        } catch (SQLException e) {
            by.e("delete table faild!");
            e.printStackTrace();
            return false;
        }
    }

    public static boolean b(SQLiteDatabase sQLiteDatabase, String str) {
        try {
            if (c(sQLiteDatabase, str) >= 0) {
                sQLiteDatabase.execSQL("delete from " + str);
            }
            return true;
        } catch (SQLException e) {
            by.e("cleanTableData faild!" + e.toString());
            return false;
        }
    }

    public static int c(SQLiteDatabase sQLiteDatabase, String str) {
        Cursor cursor = null;
        int i = 0;
        try {
            try {
                cursor = sQLiteDatabase.rawQuery("select * from " + str, null);
                i = cursor.getCount();
            } catch (Exception e) {
                by.e("count error " + e.toString());
                if (cursor != null) {
                    cursor.close();
                }
            }
            return i;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    public static boolean a(SQLiteDatabase sQLiteDatabase, Collection<i> collection) {
        try {
            try {
                sQLiteDatabase.beginTransaction();
                if (c(sQLiteDatabase, d.a.b) > 0) {
                    b(sQLiteDatabase, d.a.b);
                }
                for (i iVar : collection) {
                    sQLiteDatabase.insert(d.a.b, null, a(iVar));
                }
                sQLiteDatabase.setTransactionSuccessful();
                sQLiteDatabase.endTransaction();
                return true;
            } catch (SQLException e) {
                by.e("insert to Aggregated cache table faild!");
                sQLiteDatabase.endTransaction();
                return false;
            }
        } catch (Throwable th) {
            sQLiteDatabase.endTransaction();
            throw th;
        }
    }

    public static boolean a(f fVar, SQLiteDatabase sQLiteDatabase, Collection<i> collection) {
        try {
            try {
                sQLiteDatabase.beginTransaction();
                for (i iVar : collection) {
                    sQLiteDatabase.insert(d.a.f1144a, null, a(iVar));
                }
                sQLiteDatabase.setTransactionSuccessful();
                b(sQLiteDatabase, d.a.b);
                fVar.a("success", false);
                sQLiteDatabase.endTransaction();
                return true;
            } catch (SQLException e) {
                by.e("insert to Aggregated cache table faild!");
                sQLiteDatabase.endTransaction();
                return false;
            }
        } catch (Throwable th) {
            sQLiteDatabase.endTransaction();
            throw th;
        }
    }

    public static boolean a(SQLiteDatabase sQLiteDatabase, f fVar) {
        boolean z = false;
        try {
            sQLiteDatabase.beginTransaction();
            if (c(sQLiteDatabase, d.a.b) <= 0) {
                fVar.a("faild", false);
            } else {
                sQLiteDatabase.execSQL("insert into aggregated(key, count, value, totalTimestamp, timeWindowNum, label) select key, count, value, totalTimestamp, timeWindowNum, label from aggregated_cache");
                sQLiteDatabase.setTransactionSuccessful();
                b(sQLiteDatabase, d.a.b);
                fVar.a("success", false);
                sQLiteDatabase.endTransaction();
                z = true;
            }
        } catch (SQLException e) {
            fVar.a(false, false);
            by.e("cacheToAggregatedTable happen " + e.toString());
        } finally {
            sQLiteDatabase.endTransaction();
        }
        return z;
    }

    private static ContentValues a(i iVar) {
        ContentValues contentValues = new ContentValues();
        contentValues.put("key", iVar.a());
        contentValues.put("label", iVar.c());
        contentValues.put("count", Long.valueOf(iVar.g()));
        contentValues.put("value", Long.valueOf(iVar.f()));
        contentValues.put(d.a.C0015a.b, Long.valueOf(iVar.e()));
        contentValues.put(d.a.C0015a.f, iVar.h());
        return contentValues;
    }

    public static boolean b(SQLiteDatabase sQLiteDatabase, f fVar) {
        Cursor cursor = null;
        try {
            try {
                HashMap hashMap = new HashMap();
                Cursor rawQuery = sQLiteDatabase.rawQuery("select * from aggregated_cache", null);
                while (rawQuery.moveToNext()) {
                    i iVar = new i();
                    iVar.a(d.b(rawQuery.getString(rawQuery.getColumnIndex("key"))));
                    iVar.b(d.b(rawQuery.getString(rawQuery.getColumnIndex("label"))));
                    iVar.c(rawQuery.getInt(rawQuery.getColumnIndex("count")));
                    iVar.b(rawQuery.getInt(rawQuery.getColumnIndex("value")));
                    iVar.b(rawQuery.getString(rawQuery.getColumnIndex(d.a.C0015a.f)));
                    iVar.a(Long.parseLong(rawQuery.getString(rawQuery.getColumnIndex(d.a.C0015a.b))));
                    hashMap.put(d.b(rawQuery.getString(rawQuery.getColumnIndex("key"))), iVar);
                }
                if (hashMap.size() > 0) {
                    fVar.a(hashMap, false);
                } else {
                    fVar.a("faild", false);
                }
                if (rawQuery != null) {
                    rawQuery.close();
                }
            } catch (SQLException e) {
                fVar.a(false, false);
                by.e("cacheToMemory happen " + e.toString());
                if (0 != 0) {
                    cursor.close();
                }
            }
            return false;
        } catch (Throwable th) {
            if (0 != 0) {
                cursor.close();
            }
            throw th;
        }
    }

    public static void a(SQLiteDatabase sQLiteDatabase, boolean z, f fVar) {
        b(sQLiteDatabase, d.c.f1150a);
        b(sQLiteDatabase, d.a.f1144a);
        if (!z) {
            b(sQLiteDatabase, d.b.f1147a);
            fVar.a("success", false);
        }
    }

    public static void a(SQLiteDatabase sQLiteDatabase, String str, long j, long j2) {
        try {
            int c = c(sQLiteDatabase, d.c.f1150a);
            int c2 = n.a().c();
            if (c < c2) {
                ContentValues contentValues = new ContentValues();
                contentValues.put("key", str);
                contentValues.put(d.c.a.b, Long.valueOf(j2));
                contentValues.put("count", Long.valueOf(j));
                sQLiteDatabase.insert(d.c.f1150a, null, contentValues);
            } else if (c == c2) {
                ContentValues contentValues2 = new ContentValues();
                contentValues2.put("key", com.umeng.analytics.a.x);
                contentValues2.put(d.c.a.b, Long.valueOf(System.currentTimeMillis()));
                contentValues2.put("count", (Integer) 1);
                sQLiteDatabase.insert(d.c.f1150a, null, contentValues2);
            } else {
                d(sQLiteDatabase, com.umeng.analytics.a.x);
            }
        } catch (SQLException e) {
        }
    }

    private static void d(SQLiteDatabase sQLiteDatabase, String str) {
        try {
            sQLiteDatabase.beginTransaction();
            sQLiteDatabase.execSQL("update system set count=count+1 where key like '" + str + "'");
            sQLiteDatabase.setTransactionSuccessful();
            if (sQLiteDatabase != null) {
                sQLiteDatabase.endTransaction();
            }
        } catch (SQLException e) {
            if (sQLiteDatabase != null) {
                sQLiteDatabase.endTransaction();
            }
        } catch (Throwable th) {
            if (sQLiteDatabase != null) {
                sQLiteDatabase.endTransaction();
            }
            throw th;
        }
    }

    public static void a(f fVar, SQLiteDatabase sQLiteDatabase, List<String> list) {
        try {
            sQLiteDatabase.beginTransaction();
            if (c(sQLiteDatabase, d.b.f1147a) > 0) {
                b(sQLiteDatabase, d.b.f1147a);
            }
            for (String str : list) {
                ContentValues contentValues = new ContentValues();
                contentValues.put(d.b.a.f1148a, str);
                sQLiteDatabase.insert(d.b.f1147a, null, contentValues);
            }
            sQLiteDatabase.setTransactionSuccessful();
            fVar.a("success", false);
        } catch (SQLException e) {
            by.e("insertToLimitCKTable error " + e.toString());
        } finally {
            sQLiteDatabase.endTransaction();
        }
    }

    public static void a(SQLiteDatabase sQLiteDatabase, Map<String, k> map, f fVar) {
        int i = 0;
        Cursor cursor = null;
        try {
            try {
                k kVar = map.get(com.umeng.analytics.a.u);
                if (kVar != null) {
                    cursor = sQLiteDatabase.rawQuery("select * from system where key=\"__ag_of\"", null);
                    cursor.moveToFirst();
                    long j = 0;
                    while (!cursor.isAfterLast()) {
                        if (cursor.getCount() > 0) {
                            i = cursor.getInt(cursor.getColumnIndex("count"));
                            j = cursor.getLong(cursor.getColumnIndex(d.c.a.b));
                            sQLiteDatabase.execSQL("delete from system where key=\"__ag_of\"");
                        }
                        cursor.moveToNext();
                    }
                    ContentValues contentValues = new ContentValues();
                    contentValues.put("key", kVar.c());
                    contentValues.put("count", Long.valueOf(i == 0 ? kVar.e() : i + kVar.e()));
                    if (j == 0) {
                        j = kVar.d();
                    }
                    contentValues.put(d.c.a.b, Long.valueOf(j));
                    sQLiteDatabase.insert(d.c.f1150a, null, contentValues);
                    fVar.a("success", false);
                    if (cursor != null) {
                        cursor.close();
                    }
                } else if (0 != 0) {
                    cursor.close();
                }
            } catch (SQLException e) {
                by.e("save to system table error " + e.toString());
                if (cursor != null) {
                    cursor.close();
                }
            }
        } catch (Throwable th) {
            if (cursor != null) {
                cursor.close();
            }
            throw th;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:27:0x0069  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static String a(SQLiteDatabase sQLiteDatabase) {
        Cursor cursor;
        SQLException e;
        String str;
        Cursor cursor2 = null;
        try {
            try {
                sQLiteDatabase.beginTransaction();
                if (c(sQLiteDatabase, d.a.b) <= 0) {
                    str = String.valueOf(0);
                    if (0 != 0) {
                        cursor2.close();
                    }
                    sQLiteDatabase.endTransaction();
                } else {
                    cursor = sQLiteDatabase.rawQuery("select * from aggregated_cache", null);
                    try {
                        if (cursor.moveToLast()) {
                            str = cursor.getString(cursor.getColumnIndex(d.a.C0015a.f));
                        } else {
                            str = null;
                        }
                        try {
                            sQLiteDatabase.setTransactionSuccessful();
                            if (cursor != null) {
                                cursor.close();
                            }
                            sQLiteDatabase.endTransaction();
                        } catch (SQLException e2) {
                            e = e2;
                            by.e("queryLastTimeWindowNumFromCache error " + e.toString());
                            if (cursor != null) {
                                cursor.close();
                            }
                            sQLiteDatabase.endTransaction();
                            return str;
                        }
                    } catch (SQLException e3) {
                        str = null;
                        e = e3;
                    }
                }
            } catch (Throwable th) {
                th = th;
                if (0 != 0) {
                    cursor2.close();
                }
                sQLiteDatabase.endTransaction();
                throw th;
            }
        } catch (SQLException e4) {
            cursor = null;
            str = null;
            e = e4;
        } catch (Throwable th2) {
            th = th2;
            if (0 != 0) {
            }
            sQLiteDatabase.endTransaction();
            throw th;
        }
        return str;
    }

    /* JADX WARN: Removed duplicated region for block: B:29:0x00cb  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static JSONObject b(SQLiteDatabase sQLiteDatabase) {
        Cursor cursor;
        JSONArray jSONArray;
        Cursor cursor2 = null;
        try {
        } catch (SQLException e) {
            e = e;
            cursor = null;
        } catch (Throwable th) {
            th = th;
            cursor = null;
            if (cursor != null) {
            }
            throw th;
        }
        if (c(sQLiteDatabase, d.a.f1144a) > 0) {
            cursor = sQLiteDatabase.rawQuery("select * from aggregated", null);
            try {
                try {
                    JSONObject jSONObject = new JSONObject();
                    while (cursor.moveToNext()) {
                        try {
                            String string = cursor.getString(cursor.getColumnIndex("key"));
                            if (jSONObject.has(string)) {
                                jSONArray = jSONObject.getJSONArray(string);
                                jSONObject.remove(string);
                            } else {
                                jSONArray = new JSONArray();
                            }
                            JSONObject jSONObject2 = new JSONObject();
                            jSONObject2.put(x.aw, cursor.getLong(cursor.getColumnIndex("value")));
                            jSONObject2.put(x.ax, cursor.getLong(cursor.getColumnIndex(d.a.C0015a.b)));
                            jSONObject2.put(x.ay, Integer.parseInt(cursor.getString(cursor.getColumnIndex(d.a.C0015a.f))));
                            jSONObject2.put("count", cursor.getInt(cursor.getColumnIndex("count")));
                            jSONObject2.put(x.aA, d.a(cursor.getString(cursor.getColumnIndex("label"))));
                            jSONArray.put(jSONObject2);
                            jSONObject.put(string, jSONArray);
                        } catch (Exception e2) {
                        }
                    }
                    if (cursor == null) {
                        return jSONObject;
                    }
                    cursor.close();
                    return jSONObject;
                } catch (SQLException e3) {
                    e = e3;
                    by.e("readAllAggregatedDataForUpload error " + e.toString());
                    if (cursor != null) {
                        cursor.close();
                    }
                    return null;
                }
            } catch (Throwable th2) {
                th = th2;
                if (cursor != null) {
                    cursor.close();
                }
                throw th;
            }
        } else {
            if (0 != 0) {
                cursor2.close();
            }
            return null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:28:0x009a  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static JSONObject a(f fVar, SQLiteDatabase sQLiteDatabase) {
        Cursor cursor;
        SQLException e;
        Cursor cursor2;
        JSONArray jSONArray;
        try {
            JSONObject jSONObject = new JSONObject();
            if (c(sQLiteDatabase, d.c.f1150a) > 0) {
                cursor2 = sQLiteDatabase.rawQuery("select * from system", null);
                while (cursor2.moveToNext()) {
                    try {
                        try {
                            try {
                                String string = cursor2.getString(cursor2.getColumnIndex("key"));
                                if (jSONObject.has(string)) {
                                    jSONArray = jSONObject.getJSONArray(string);
                                    jSONObject.remove(string);
                                } else {
                                    jSONArray = new JSONArray();
                                }
                                JSONObject jSONObject2 = new JSONObject();
                                jSONObject2.put("value", cursor2.getInt(cursor2.getColumnIndex("count")));
                                jSONObject2.put("ts", cursor2.getLong(cursor2.getColumnIndex(d.c.a.b)));
                                jSONArray.put(jSONObject2);
                                jSONObject.put(string, jSONArray);
                            } catch (Exception e2) {
                            }
                        } catch (SQLException e3) {
                            cursor = cursor2;
                            e = e3;
                            try {
                                fVar.a("faild", false);
                                by.e("readAllSystemDataForUpload error " + e.toString());
                                if (cursor == null) {
                                    return null;
                                }
                                cursor.close();
                                return null;
                            } catch (Throwable th) {
                                th = th;
                                if (cursor != null) {
                                    cursor.close();
                                }
                                throw th;
                            }
                        }
                    } catch (Throwable th2) {
                        cursor = cursor2;
                        th = th2;
                        if (cursor != null) {
                        }
                        throw th;
                    }
                }
            } else {
                cursor2 = null;
            }
            if (cursor2 != null) {
                cursor2.close();
            }
            return jSONObject;
        } catch (SQLException e4) {
            e = e4;
            cursor = null;
        } catch (Throwable th3) {
            th = th3;
            cursor = null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:23:0x005b  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static List<String> c(SQLiteDatabase sQLiteDatabase) {
        Cursor cursor;
        Cursor cursor2 = null;
        try {
        } catch (SQLException e) {
            e = e;
            cursor = null;
        } catch (Throwable th) {
            th = th;
            cursor = null;
            if (cursor != null) {
            }
            throw th;
        }
        if (c(sQLiteDatabase, d.b.f1147a) > 0) {
            cursor = sQLiteDatabase.rawQuery("select * from limitedck", null);
            try {
                try {
                    ArrayList arrayList = new ArrayList();
                    while (cursor.moveToNext()) {
                        arrayList.add(cursor.getString(cursor.getColumnIndex(d.b.a.f1148a)));
                    }
                    if (cursor == null) {
                        return arrayList;
                    }
                    cursor.close();
                    return arrayList;
                } catch (SQLException e2) {
                    e = e2;
                    by.e("loadLimitCKFromDB error " + e.toString());
                    if (cursor != null) {
                        cursor.close();
                    }
                    return null;
                }
            } catch (Throwable th2) {
                th = th2;
                if (cursor != null) {
                    cursor.close();
                }
                throw th;
            }
        } else {
            if (0 != 0) {
                cursor2.close();
            }
            return null;
        }
    }
}
