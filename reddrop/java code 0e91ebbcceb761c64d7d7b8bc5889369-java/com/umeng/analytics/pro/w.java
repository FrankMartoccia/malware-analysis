package com.umeng.analytics.pro;

import android.content.ContentValues;
import android.content.Context;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabaseCorruptException;
import android.text.TextUtils;
import android.util.Base64;
import com.umeng.analytics.pro.s;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONObject;
/* compiled from: UMStoreManager.java */
/* loaded from: classes.dex */
public class w {

    /* renamed from: a  reason: collision with root package name */
    public static final int f1210a = 2049;
    public static final int b = 2050;
    private static Context c = null;
    private static String d = null;
    private static final String e = "umeng+";
    private static final String f = "ek__id";
    private static final String g = "ek_key";
    private List<String> h;

    /* compiled from: UMStoreManager.java */
    /* loaded from: classes.dex */
    public enum a {
        AUTOPAGE,
        PAGE,
        BEGIN,
        END,
        NEWSESSION
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* compiled from: UMStoreManager.java */
    /* loaded from: classes.dex */
    public static class b {

        /* renamed from: a  reason: collision with root package name */
        private static final w f1212a = new w();

        private b() {
        }
    }

    private w() {
        this.h = new ArrayList();
        if (c != null) {
            b();
            this.h.clear();
        }
    }

    public static final w a(Context context) {
        c = context;
        return b.f1212a;
    }

    /* JADX WARN: Removed duplicated region for block: B:52:0x00b4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void a(JSONArray jSONArray) {
        SQLiteDatabase sQLiteDatabase;
        Throwable th;
        SQLiteDatabase sQLiteDatabase2 = null;
        try {
            try {
                try {
                    try {
                        SQLiteDatabase a2 = u.a(c).a();
                        a2.beginTransaction();
                        for (int i = 0; i < jSONArray.length(); i++) {
                            try {
                                JSONObject jSONObject = jSONArray.getJSONObject(i);
                                ContentValues contentValues = new ContentValues();
                                String optString = jSONObject.optString("__i");
                                if (TextUtils.isEmpty(optString)) {
                                    optString = bd.g(c);
                                    if (TextUtils.isEmpty(optString)) {
                                        optString = "";
                                    }
                                }
                                contentValues.put("__i", optString);
                                contentValues.put("__e", jSONObject.optString("id"));
                                contentValues.put("__t", Integer.valueOf(jSONObject.optInt("__t")));
                                jSONObject.remove("__i");
                                jSONObject.remove("__t");
                                contentValues.put(s.b.a.c, a(jSONObject.toString()));
                                a2.insert(s.b.f1201a, null, contentValues);
                            } catch (Exception e2) {
                            }
                        }
                        a2.setTransactionSuccessful();
                        if (a2 != null) {
                            try {
                                a2.endTransaction();
                            } catch (Throwable th2) {
                            }
                        }
                        u.a(c).b();
                    } catch (Throwable th3) {
                        if (0 != 0) {
                            try {
                                sQLiteDatabase2.endTransaction();
                            } catch (Throwable th4) {
                            }
                        }
                        u.a(c).b();
                    }
                } catch (SQLiteDatabaseCorruptException e3) {
                    v.b(c);
                    if (0 != 0) {
                        try {
                            sQLiteDatabase2.endTransaction();
                        } catch (Throwable th5) {
                        }
                    }
                    u.a(c).b();
                }
            } catch (Throwable th6) {
                sQLiteDatabase = null;
                th = th6;
                if (sQLiteDatabase != null) {
                    try {
                        sQLiteDatabase.endTransaction();
                    } catch (Throwable th7) {
                    }
                }
                u.a(c).b();
                throw th;
            }
        } catch (Throwable th8) {
            sQLiteDatabase = null;
            th = th8;
            if (sQLiteDatabase != null) {
            }
            u.a(c).b();
            throw th;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:40:0x0074 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean a(String str, String str2, int i) {
        SQLiteDatabase sQLiteDatabase;
        Throwable th;
        SQLiteDatabase sQLiteDatabase2 = null;
        try {
            try {
                try {
                    SQLiteDatabase a2 = u.a(c).a();
                    a2.beginTransaction();
                    ContentValues contentValues = new ContentValues();
                    contentValues.put("__i", str);
                    String a3 = a(str2);
                    if (!TextUtils.isEmpty(a3)) {
                        contentValues.put("__a", a3);
                        contentValues.put("__t", Integer.valueOf(i));
                        a2.insert(s.a.f1198a, null, contentValues);
                    }
                    a2.setTransactionSuccessful();
                    if (a2 != null) {
                        try {
                            a2.endTransaction();
                        } catch (Throwable th2) {
                        }
                    }
                    u.a(c).b();
                    return false;
                } catch (Throwable th3) {
                    sQLiteDatabase = null;
                    th = th3;
                    if (sQLiteDatabase != null) {
                        try {
                            sQLiteDatabase.endTransaction();
                        } catch (Throwable th4) {
                        }
                    }
                    u.a(c).b();
                    throw th;
                }
            } catch (Throwable th5) {
                sQLiteDatabase = null;
                th = th5;
                if (sQLiteDatabase != null) {
                }
                u.a(c).b();
                throw th;
            }
        } catch (SQLiteDatabaseCorruptException e2) {
            v.b(c);
            if (0 != 0) {
                try {
                    sQLiteDatabase2.endTransaction();
                } catch (Throwable th6) {
                }
            }
            u.a(c).b();
            return false;
        } catch (Throwable th7) {
            if (0 != 0) {
                try {
                    sQLiteDatabase2.endTransaction();
                } catch (Throwable th8) {
                }
            }
            u.a(c).b();
            return false;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:109:0x020e A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:70:0x0209  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean a(String str, JSONObject jSONObject, a aVar) {
        Cursor cursor;
        SQLiteDatabase sQLiteDatabase;
        JSONObject jSONObject2;
        String str2;
        Cursor cursor2 = null;
        String str3 = null;
        cursor2 = null;
        SQLiteDatabase sQLiteDatabase2 = null;
        if (jSONObject != null) {
            try {
                sQLiteDatabase = u.a(c).a();
                try {
                    try {
                        sQLiteDatabase.beginTransaction();
                        if (aVar == a.BEGIN) {
                            long longValue = ((Long) jSONObject.get("__e")).longValue();
                            ContentValues contentValues = new ContentValues();
                            contentValues.put(s.c.a.f1205a, str);
                            contentValues.put("__e", String.valueOf(longValue));
                            sQLiteDatabase.insert(s.c.f1204a, null, contentValues);
                            cursor = null;
                        } else if (aVar == a.END) {
                            sQLiteDatabase.execSQL("update __sd set __f=\"" + ((Long) jSONObject.get(s.c.a.g)).longValue() + "\" where " + s.c.a.f1205a + "=\"" + str + "\"");
                            cursor = null;
                        } else if (aVar == a.PAGE) {
                            a(str, jSONObject, sQLiteDatabase, "__a");
                            cursor = null;
                        } else if (aVar == a.AUTOPAGE) {
                            a(str, jSONObject, sQLiteDatabase, s.c.a.c);
                            cursor = null;
                        } else if (aVar == a.NEWSESSION) {
                            try {
                                jSONObject2 = jSONObject.getJSONObject(s.c.a.e);
                            } catch (Exception e2) {
                                jSONObject2 = null;
                            }
                            if (jSONObject2 != null) {
                                cursor = sQLiteDatabase.rawQuery("select __d from __sd where __ii=\"" + str + "\"", null);
                                if (cursor != null) {
                                    while (cursor.moveToNext()) {
                                        try {
                                            try {
                                                str3 = b(cursor.getString(cursor.getColumnIndex(s.c.a.e)));
                                            } catch (SQLiteDatabaseCorruptException e3) {
                                                sQLiteDatabase2 = sQLiteDatabase;
                                                try {
                                                    v.b(c);
                                                    if (cursor != null) {
                                                        cursor.close();
                                                    }
                                                    if (sQLiteDatabase2 != null) {
                                                        try {
                                                            sQLiteDatabase2.endTransaction();
                                                        } catch (Throwable th) {
                                                        }
                                                    }
                                                    u.a(c).b();
                                                    return false;
                                                } catch (Throwable th2) {
                                                    th = th2;
                                                    sQLiteDatabase = sQLiteDatabase2;
                                                    cursor2 = cursor;
                                                    if (cursor2 != null) {
                                                        cursor2.close();
                                                    }
                                                    if (sQLiteDatabase != null) {
                                                        try {
                                                            sQLiteDatabase.endTransaction();
                                                        } catch (Throwable th3) {
                                                        }
                                                    }
                                                    u.a(c).b();
                                                    throw th;
                                                }
                                            }
                                        } catch (Throwable th4) {
                                            if (cursor != null) {
                                                cursor.close();
                                            }
                                            if (sQLiteDatabase != null) {
                                                try {
                                                    sQLiteDatabase.endTransaction();
                                                } catch (Throwable th5) {
                                                }
                                            }
                                            u.a(c).b();
                                            return false;
                                        }
                                    }
                                    str2 = str3;
                                } else {
                                    str2 = null;
                                }
                            } else {
                                str2 = null;
                                cursor = null;
                            }
                            if (jSONObject2 != null) {
                                try {
                                    JSONArray jSONArray = new JSONArray();
                                    if (!TextUtils.isEmpty(str2)) {
                                        jSONArray = new JSONArray(str2);
                                    }
                                    jSONArray.put(jSONObject2);
                                    String a2 = a(jSONArray.toString());
                                    if (!TextUtils.isEmpty(a2)) {
                                        sQLiteDatabase.execSQL("update  __sd set __d=\"" + a2 + "\" where " + s.c.a.f1205a + "=\"" + str + "\"");
                                    }
                                } catch (Exception e4) {
                                }
                            }
                            try {
                                JSONObject jSONObject3 = jSONObject.getJSONObject(s.c.a.d);
                                if (jSONObject3 != null) {
                                    String a3 = a(jSONObject3.toString());
                                    if (!TextUtils.isEmpty(a3)) {
                                        sQLiteDatabase.execSQL("update  __sd set __c=\"" + a3 + "\" where " + s.c.a.f1205a + "=\"" + str + "\"");
                                    }
                                }
                            } catch (Exception e5) {
                            }
                            try {
                                sQLiteDatabase.execSQL("update  __sd set __f=\"" + String.valueOf(jSONObject.getLong(s.c.a.g)) + "\" where " + s.c.a.f1205a + "=\"" + str + "\"");
                            } catch (Exception e6) {
                            }
                        } else {
                            cursor = null;
                        }
                        sQLiteDatabase.setTransactionSuccessful();
                        if (cursor != null) {
                            cursor.close();
                        }
                        if (sQLiteDatabase != null) {
                            try {
                                sQLiteDatabase.endTransaction();
                            } catch (Throwable th6) {
                            }
                        }
                        u.a(c).b();
                    } catch (SQLiteDatabaseCorruptException e7) {
                        cursor = null;
                        sQLiteDatabase2 = sQLiteDatabase;
                    }
                } catch (Throwable th7) {
                    cursor = null;
                }
            } catch (SQLiteDatabaseCorruptException e8) {
                cursor = null;
            } catch (Throwable th8) {
                cursor = null;
                sQLiteDatabase = null;
            }
        }
        return false;
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: Unreachable block: B:22:0x00c2
        	at jadx.core.dex.visitors.blocks.BlockProcessor.checkForUnreachableBlocks(BlockProcessor.java:92)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:52)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:44)
        */
    private void a(java.lang.String r6, org.json.JSONObject r7, android.database.sqlite.SQLiteDatabase r8, java.lang.String r9) throws org.json.JSONException {
        /*
            r5 = this;
            r1 = 0
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch: java.lang.Throwable -> Lba
            r0.<init>()     // Catch: java.lang.Throwable -> Lba
            java.lang.String r2 = "select "
            java.lang.StringBuilder r0 = r0.append(r2)     // Catch: java.lang.Throwable -> Lba
            java.lang.StringBuilder r0 = r0.append(r9)     // Catch: java.lang.Throwable -> Lba
            java.lang.String r2 = " from "
            java.lang.StringBuilder r0 = r0.append(r2)     // Catch: java.lang.Throwable -> Lba
            java.lang.String r2 = "__sd"
            java.lang.StringBuilder r0 = r0.append(r2)     // Catch: java.lang.Throwable -> Lba
            java.lang.String r2 = " where "
            java.lang.StringBuilder r0 = r0.append(r2)     // Catch: java.lang.Throwable -> Lba
            java.lang.String r2 = "__ii"
            java.lang.StringBuilder r0 = r0.append(r2)     // Catch: java.lang.Throwable -> Lba
            java.lang.String r2 = "=\""
            java.lang.StringBuilder r0 = r0.append(r2)     // Catch: java.lang.Throwable -> Lba
            java.lang.StringBuilder r0 = r0.append(r6)     // Catch: java.lang.Throwable -> Lba
            java.lang.String r2 = "\""
            java.lang.StringBuilder r0 = r0.append(r2)     // Catch: java.lang.Throwable -> Lba
            java.lang.String r0 = r0.toString()     // Catch: java.lang.Throwable -> Lba
            r2 = 0
            android.database.Cursor r0 = r8.rawQuery(r0, r2)     // Catch: java.lang.Throwable -> Lba
            if (r0 == 0) goto Ld0
        L43:
            boolean r2 = r0.moveToNext()     // Catch: java.lang.Throwable -> Lce
            if (r2 == 0) goto L56
            int r1 = r0.getColumnIndex(r9)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r1 = r0.getString(r1)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r1 = r5.b(r1)     // Catch: java.lang.Throwable -> Lce
            goto L43
        L56:
            r2 = r1
        L57:
            org.json.JSONArray r1 = new org.json.JSONArray     // Catch: java.lang.Throwable -> Lce
            r1.<init>()     // Catch: java.lang.Throwable -> Lce
            boolean r3 = android.text.TextUtils.isEmpty(r2)     // Catch: java.lang.Throwable -> Lce
            if (r3 != 0) goto L67
            org.json.JSONArray r1 = new org.json.JSONArray     // Catch: java.lang.Throwable -> Lce
            r1.<init>(r2)     // Catch: java.lang.Throwable -> Lce
        L67:
            r1.put(r7)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r1 = r1.toString()     // Catch: java.lang.Throwable -> Lce
            java.lang.String r1 = r5.a(r1)     // Catch: java.lang.Throwable -> Lce
            boolean r2 = android.text.TextUtils.isEmpty(r1)     // Catch: java.lang.Throwable -> Lce
            if (r2 != 0) goto Lb4
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch: java.lang.Throwable -> Lce
            r2.<init>()     // Catch: java.lang.Throwable -> Lce
            java.lang.String r3 = "update __sd set "
            java.lang.StringBuilder r2 = r2.append(r3)     // Catch: java.lang.Throwable -> Lce
            java.lang.StringBuilder r2 = r2.append(r9)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r3 = "=\""
            java.lang.StringBuilder r2 = r2.append(r3)     // Catch: java.lang.Throwable -> Lce
            java.lang.StringBuilder r1 = r2.append(r1)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r2 = "\" where "
            java.lang.StringBuilder r1 = r1.append(r2)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r2 = "__ii"
            java.lang.StringBuilder r1 = r1.append(r2)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r2 = "=\""
            java.lang.StringBuilder r1 = r1.append(r2)     // Catch: java.lang.Throwable -> Lce
            java.lang.StringBuilder r1 = r1.append(r6)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r2 = "\""
            java.lang.StringBuilder r1 = r1.append(r2)     // Catch: java.lang.Throwable -> Lce
            java.lang.String r1 = r1.toString()     // Catch: java.lang.Throwable -> Lce
            r8.execSQL(r1)     // Catch: java.lang.Throwable -> Lce
        Lb4:
            if (r0 == 0) goto Lb9
            r0.close()
        Lb9:
            return
        Lba:
            r0 = move-exception
            r0 = r1
        Lbc:
            if (r0 == 0) goto Lb9
            r0.close()
            goto Lb9
        Lc2:
            r0 = move-exception
        Lc3:
            if (r1 == 0) goto Lc8
            r1.close()
        Lc8:
            throw r0
        Lc9:
            r1 = move-exception
            r4 = r1
            r1 = r0
            r0 = r4
            goto Lc3
        Lce:
            r1 = move-exception
            goto Lbc
        Ld0:
            r2 = r1
            goto L57
        */
        throw new UnsupportedOperationException("Method not decompiled: com.umeng.analytics.pro.w.a(java.lang.String, org.json.JSONObject, android.database.sqlite.SQLiteDatabase, java.lang.String):void");
    }

    public JSONObject a() {
        JSONObject jSONObject = new JSONObject();
        JSONObject jSONObject2 = new JSONObject();
        c(jSONObject2);
        b(jSONObject2);
        a(jSONObject2);
        try {
            if (jSONObject2.length() > 0) {
                jSONObject.put(com.umeng.analytics.a.z, jSONObject2);
            }
        } catch (Throwable th) {
        }
        return jSONObject;
    }

    /* JADX WARN: Removed duplicated region for block: B:102:0x00d5 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00d0  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private void a(JSONObject jSONObject) {
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2;
        Cursor cursor;
        JSONArray jSONArray;
        JSONArray jSONArray2;
        Cursor cursor2 = null;
        try {
            sQLiteDatabase2 = u.a(c).a();
            try {
                sQLiteDatabase2.beginTransaction();
                cursor = sQLiteDatabase2.rawQuery("select *  from __et", null);
                if (cursor != null) {
                    try {
                        JSONObject jSONObject2 = new JSONObject();
                        JSONObject jSONObject3 = new JSONObject();
                        while (cursor.moveToNext()) {
                            int i = cursor.getInt(cursor.getColumnIndex("__t"));
                            String string = cursor.getString(cursor.getColumnIndex("__i"));
                            String string2 = cursor.getString(cursor.getColumnIndex(s.b.a.c));
                            if ("".equals(string)) {
                                string = bd.a();
                            }
                            switch (i) {
                                case f1210a /* 2049 */:
                                    if (TextUtils.isEmpty(string2)) {
                                        break;
                                    } else {
                                        JSONObject jSONObject4 = new JSONObject(b(string2));
                                        if (jSONObject2.has(string)) {
                                            jSONArray2 = jSONObject2.optJSONArray(string);
                                        } else {
                                            jSONArray2 = new JSONArray();
                                        }
                                        jSONArray2.put(jSONObject4);
                                        jSONObject2.put(string, jSONArray2);
                                        break;
                                    }
                                case b /* 2050 */:
                                    if (TextUtils.isEmpty(string2)) {
                                        break;
                                    } else {
                                        JSONObject jSONObject5 = new JSONObject(b(string2));
                                        if (jSONObject3.has(string)) {
                                            jSONArray = jSONObject3.optJSONArray(string);
                                        } else {
                                            jSONArray = new JSONArray();
                                        }
                                        jSONArray.put(jSONObject5);
                                        jSONObject3.put(string, jSONArray);
                                        break;
                                    }
                            }
                        }
                        if (jSONObject2.length() > 0) {
                            JSONArray jSONArray3 = new JSONArray();
                            Iterator<String> keys = jSONObject2.keys();
                            while (keys.hasNext()) {
                                JSONObject jSONObject6 = new JSONObject();
                                String next = keys.next();
                                jSONObject6.put(next, new JSONArray(jSONObject2.optString(next)));
                                if (jSONObject6.length() > 0) {
                                    jSONArray3.put(jSONObject6);
                                }
                            }
                            if (jSONArray3.length() > 0) {
                                jSONObject.put(x.aJ, jSONArray3);
                            }
                        }
                        if (jSONObject3.length() > 0) {
                            JSONArray jSONArray4 = new JSONArray();
                            Iterator<String> keys2 = jSONObject3.keys();
                            while (keys2.hasNext()) {
                                JSONObject jSONObject7 = new JSONObject();
                                String next2 = keys2.next();
                                jSONObject7.put(next2, new JSONArray(jSONObject3.optString(next2)));
                                if (jSONObject7.length() > 0) {
                                    jSONArray4.put(jSONObject7);
                                }
                            }
                            if (jSONArray4.length() > 0) {
                                jSONObject.put(x.aK, jSONArray4);
                            }
                        }
                    } catch (SQLiteDatabaseCorruptException e2) {
                        cursor2 = cursor;
                        sQLiteDatabase = sQLiteDatabase2;
                        try {
                            v.b(c);
                            if (cursor2 != null) {
                                cursor2.close();
                            }
                            if (sQLiteDatabase != null) {
                                try {
                                    sQLiteDatabase.endTransaction();
                                } catch (Throwable th) {
                                }
                            }
                            u.a(c).b();
                            return;
                        } catch (Throwable th2) {
                            th = th2;
                            sQLiteDatabase2 = sQLiteDatabase;
                            cursor = cursor2;
                            if (cursor != null) {
                                cursor.close();
                            }
                            if (sQLiteDatabase2 != null) {
                                try {
                                    sQLiteDatabase2.endTransaction();
                                } catch (Throwable th3) {
                                }
                            }
                            u.a(c).b();
                            throw th;
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        if (cursor != null) {
                        }
                        if (sQLiteDatabase2 != null) {
                        }
                        u.a(c).b();
                        throw th;
                    }
                }
                sQLiteDatabase2.setTransactionSuccessful();
                if (cursor != null) {
                    cursor.close();
                }
                if (sQLiteDatabase2 != null) {
                    try {
                        sQLiteDatabase2.endTransaction();
                    } catch (Throwable th5) {
                    }
                }
                u.a(c).b();
            } catch (SQLiteDatabaseCorruptException e3) {
                sQLiteDatabase = sQLiteDatabase2;
            } catch (Throwable th6) {
                th = th6;
                cursor = null;
            }
        } catch (SQLiteDatabaseCorruptException e4) {
            sQLiteDatabase = null;
        } catch (Throwable th7) {
            sQLiteDatabase2 = null;
            th = th7;
            cursor = null;
        }
    }

    /* JADX WARN: Not initialized variable reg: 1, insn: 0x00ba: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]), block:B:51:0x00b9 */
    private void b(JSONObject jSONObject) {
        SQLiteDatabase sQLiteDatabase;
        Cursor cursor;
        SQLiteDatabase sQLiteDatabase2;
        Cursor cursor2 = null;
        try {
            try {
                sQLiteDatabase = u.a(c).a();
                try {
                    try {
                        sQLiteDatabase.beginTransaction();
                        Cursor rawQuery = sQLiteDatabase.rawQuery("select *  from __er", null);
                        if (rawQuery != null) {
                            JSONArray jSONArray = new JSONArray();
                            while (rawQuery.moveToNext()) {
                                String string = rawQuery.getString(rawQuery.getColumnIndex("__a"));
                                if (!TextUtils.isEmpty(string)) {
                                    jSONArray.put(new JSONObject(b(string)));
                                }
                            }
                            if (jSONArray.length() > 0) {
                                jSONObject.put(x.aF, jSONArray);
                            }
                        }
                        sQLiteDatabase.setTransactionSuccessful();
                        if (rawQuery != null) {
                            rawQuery.close();
                        }
                        if (sQLiteDatabase != null) {
                            try {
                                sQLiteDatabase.endTransaction();
                            } catch (Throwable th) {
                            }
                        }
                        u.a(c).b();
                    } catch (Throwable th2) {
                        sQLiteDatabase2 = sQLiteDatabase;
                        cursor = null;
                        th = th2;
                        if (cursor != null) {
                            cursor.close();
                        }
                        if (sQLiteDatabase2 != null) {
                            try {
                                sQLiteDatabase2.endTransaction();
                            } catch (Throwable th3) {
                            }
                        }
                        u.a(c).b();
                        throw th;
                    }
                } catch (SQLiteDatabaseCorruptException e2) {
                    v.b(c);
                    if (0 != 0) {
                        cursor2.close();
                    }
                    if (sQLiteDatabase != null) {
                        try {
                            sQLiteDatabase.endTransaction();
                        } catch (Throwable th4) {
                        }
                    }
                    u.a(c).b();
                } catch (Throwable th5) {
                    if (0 != 0) {
                        cursor2.close();
                    }
                    if (sQLiteDatabase != null) {
                        try {
                            sQLiteDatabase.endTransaction();
                        } catch (Throwable th6) {
                        }
                    }
                    u.a(c).b();
                }
            } catch (Throwable th7) {
                th = th7;
                cursor = null;
            }
        } catch (SQLiteDatabaseCorruptException e3) {
            sQLiteDatabase = null;
        } catch (Throwable th8) {
            sQLiteDatabase2 = null;
            th = th8;
            cursor = null;
        }
    }

    /* JADX WARN: Not initialized variable reg: 1, insn: 0x0186: MOVE  (r2 I:??[OBJECT, ARRAY]) = (r1 I:??[OBJECT, ARRAY]), block:B:69:0x0185 */
    private void c(JSONObject jSONObject) {
        SQLiteDatabase sQLiteDatabase;
        Cursor cursor;
        SQLiteDatabase sQLiteDatabase2;
        Cursor cursor2 = null;
        try {
            try {
                sQLiteDatabase = u.a(c).a();
                try {
                    try {
                        sQLiteDatabase.beginTransaction();
                        Cursor rawQuery = sQLiteDatabase.rawQuery("select *  from __sd", null);
                        if (rawQuery != null) {
                            JSONArray jSONArray = new JSONArray();
                            this.h.clear();
                            while (rawQuery.moveToNext()) {
                                JSONObject jSONObject2 = new JSONObject();
                                String string = rawQuery.getString(rawQuery.getColumnIndex(s.c.a.g));
                                String string2 = rawQuery.getString(rawQuery.getColumnIndex("__e"));
                                if (!TextUtils.isEmpty(string) && !TextUtils.isEmpty(string2) && Long.parseLong(string) - Long.parseLong(string2) > 0) {
                                    String string3 = rawQuery.getString(rawQuery.getColumnIndex("__a"));
                                    String string4 = rawQuery.getString(rawQuery.getColumnIndex(s.c.a.c));
                                    String string5 = rawQuery.getString(rawQuery.getColumnIndex(s.c.a.d));
                                    String string6 = rawQuery.getString(rawQuery.getColumnIndex(s.c.a.e));
                                    String string7 = rawQuery.getString(rawQuery.getColumnIndex(s.c.a.f1205a));
                                    this.h.add(string7);
                                    jSONObject2.put("id", string7);
                                    jSONObject2.put(x.W, string2);
                                    jSONObject2.put(x.X, string);
                                    jSONObject2.put("duration", Long.parseLong(string) - Long.parseLong(string2));
                                    if (!TextUtils.isEmpty(string3)) {
                                        jSONObject2.put(x.Z, new JSONArray(b(string3)));
                                    }
                                    if (!TextUtils.isEmpty(string4)) {
                                        jSONObject2.put(x.aa, new JSONArray(b(string4)));
                                    }
                                    if (!TextUtils.isEmpty(string5)) {
                                        jSONObject2.put(x.ah, new JSONObject(b(string5)));
                                    }
                                    if (!TextUtils.isEmpty(string6)) {
                                        jSONObject2.put(x.ad, new JSONArray(b(string6)));
                                    }
                                    if (jSONObject2.length() > 0) {
                                        jSONArray.put(jSONObject2);
                                    }
                                }
                            }
                            if (jSONArray.length() > 0) {
                                jSONObject.put(x.U, jSONArray);
                            }
                        }
                        sQLiteDatabase.setTransactionSuccessful();
                        if (rawQuery != null) {
                            rawQuery.close();
                        }
                        if (sQLiteDatabase != null) {
                            try {
                                sQLiteDatabase.endTransaction();
                            } catch (Throwable th) {
                            }
                        }
                        u.a(c).b();
                    } catch (Throwable th2) {
                        sQLiteDatabase2 = sQLiteDatabase;
                        cursor = null;
                        th = th2;
                        if (cursor != null) {
                            cursor.close();
                        }
                        if (sQLiteDatabase2 != null) {
                            try {
                                sQLiteDatabase2.endTransaction();
                            } catch (Throwable th3) {
                            }
                        }
                        u.a(c).b();
                        throw th;
                    }
                } catch (SQLiteDatabaseCorruptException e2) {
                    v.b(c);
                    if (0 != 0) {
                        cursor2.close();
                    }
                    if (sQLiteDatabase != null) {
                        try {
                            sQLiteDatabase.endTransaction();
                        } catch (Throwable th4) {
                        }
                    }
                    u.a(c).b();
                } catch (Throwable th5) {
                    if (0 != 0) {
                        cursor2.close();
                    }
                    if (sQLiteDatabase != null) {
                        try {
                            sQLiteDatabase.endTransaction();
                        } catch (Throwable th6) {
                        }
                    }
                    u.a(c).b();
                }
            } catch (Throwable th7) {
                th = th7;
                cursor = null;
            }
        } catch (SQLiteDatabaseCorruptException e3) {
            sQLiteDatabase = null;
        } catch (Throwable th8) {
            sQLiteDatabase = null;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:54:0x00a0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void a(boolean z, boolean z2) {
        SQLiteDatabase sQLiteDatabase;
        SQLiteDatabase sQLiteDatabase2 = null;
        try {
            sQLiteDatabase = u.a(c).a();
            try {
                sQLiteDatabase.beginTransaction();
                sQLiteDatabase.execSQL("delete from __er");
                sQLiteDatabase.execSQL("delete from __et");
                if (!z2) {
                    if (this.h.size() > 0) {
                        for (int i = 0; i < this.h.size(); i++) {
                            sQLiteDatabase.execSQL("delete from __sd where __ii=\"" + this.h.get(i) + "\"");
                        }
                    }
                    this.h.clear();
                } else if (z) {
                    sQLiteDatabase.execSQL("delete from __sd");
                }
                sQLiteDatabase.setTransactionSuccessful();
                if (sQLiteDatabase != null) {
                    try {
                        sQLiteDatabase.endTransaction();
                    } catch (Throwable th) {
                    }
                }
                u.a(c).b();
            } catch (SQLiteDatabaseCorruptException e2) {
                sQLiteDatabase2 = sQLiteDatabase;
                try {
                    v.b(c);
                    if (sQLiteDatabase2 != null) {
                        try {
                            sQLiteDatabase2.endTransaction();
                        } catch (Throwable th2) {
                        }
                    }
                    u.a(c).b();
                } catch (Throwable th3) {
                    th = th3;
                    sQLiteDatabase = sQLiteDatabase2;
                    if (sQLiteDatabase != null) {
                        try {
                            sQLiteDatabase.endTransaction();
                        } catch (Throwable th4) {
                        }
                    }
                    u.a(c).b();
                    throw th;
                }
            } catch (Throwable th5) {
                th = th5;
                if (sQLiteDatabase != null) {
                }
                u.a(c).b();
                throw th;
            }
        } catch (SQLiteDatabaseCorruptException e3) {
        } catch (Throwable th6) {
            sQLiteDatabase = null;
            th = th6;
        }
    }

    private void b() {
        try {
            if (TextUtils.isEmpty(d)) {
                SharedPreferences a2 = ba.a(c);
                String string = a2.getString(f, null);
                if (TextUtils.isEmpty(string)) {
                    string = bv.A(c);
                    if (!TextUtils.isEmpty(string)) {
                        a2.edit().putString(f, string).commit();
                    }
                }
                if (!TextUtils.isEmpty(string)) {
                    String substring = string.substring(1, 9);
                    StringBuilder sb = new StringBuilder();
                    for (int i = 0; i < substring.length(); i++) {
                        char charAt = substring.charAt(i);
                        if (!Character.isDigit(charAt)) {
                            sb.append(charAt);
                        } else if (Integer.parseInt(Character.toString(charAt)) == 0) {
                            sb.append(0);
                        } else {
                            sb.append(10 - Integer.parseInt(Character.toString(charAt)));
                        }
                    }
                    d = sb.toString();
                }
                if (!TextUtils.isEmpty(d)) {
                    d += new StringBuilder(d).reverse().toString();
                    String string2 = a2.getString(g, null);
                    if (TextUtils.isEmpty(string2)) {
                        a2.edit().putString(g, a(e)).commit();
                    } else if (!e.equals(b(string2))) {
                        a(true, false);
                    }
                }
            }
        } catch (Throwable th) {
        }
    }

    public String a(String str) {
        try {
            if (TextUtils.isEmpty(d)) {
                return str;
            }
            return Base64.encodeToString(bt.a(str.getBytes(), d.getBytes()), 0);
        } catch (Exception e2) {
            return null;
        }
    }

    public String b(String str) {
        try {
            if (TextUtils.isEmpty(d)) {
                return str;
            }
            return new String(bt.b(Base64.decode(str.getBytes(), 0), d.getBytes()));
        } catch (Exception e2) {
            return null;
        }
    }
}
